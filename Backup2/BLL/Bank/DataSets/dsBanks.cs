//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.Bank.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsBanks : DataSet {
        
        private BanksDataTable tableBanks;
        
        public dsBanks() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsBanks(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Banks"] != null)) {
                    this.Tables.Add(new BanksDataTable(ds.Tables["Banks"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BanksDataTable Banks {
            get {
                return this.tableBanks;
            }
        }
        
        public override DataSet Clone() {
            dsBanks cln = ((dsBanks)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Banks"] != null)) {
                this.Tables.Add(new BanksDataTable(ds.Tables["Banks"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableBanks = ((BanksDataTable)(this.Tables["Banks"]));
            if ((this.tableBanks != null)) {
                this.tableBanks.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsBanks";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsBanks.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableBanks = new BanksDataTable();
            this.Tables.Add(this.tableBanks);
        }
        
        private bool ShouldSerializeBanks() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void BanksRowChangeEventHandler(object sender, BanksRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BanksDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBankID;
            
            private DataColumn columnBankName;
            
            private DataColumn columnCityID;
            
            private DataColumn columnCodeBIK;
            
            private DataColumn columnKAccount;
            
            private DataColumn columnCityName;
            
            internal BanksDataTable() : 
                    base("Banks") {
                this.InitClass();
            }
            
            internal BanksDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BankIDColumn {
                get {
                    return this.columnBankID;
                }
            }
            
            internal DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            internal DataColumn CityIDColumn {
                get {
                    return this.columnCityID;
                }
            }
            
            internal DataColumn CodeBIKColumn {
                get {
                    return this.columnCodeBIK;
                }
            }
            
            internal DataColumn KAccountColumn {
                get {
                    return this.columnKAccount;
                }
            }
            
            internal DataColumn CityNameColumn {
                get {
                    return this.columnCityName;
                }
            }
            
            public BanksRow this[int index] {
                get {
                    return ((BanksRow)(this.Rows[index]));
                }
            }
            
            public event BanksRowChangeEventHandler BanksRowChanged;
            
            public event BanksRowChangeEventHandler BanksRowChanging;
            
            public event BanksRowChangeEventHandler BanksRowDeleted;
            
            public event BanksRowChangeEventHandler BanksRowDeleting;
            
            public void AddBanksRow(BanksRow row) {
                this.Rows.Add(row);
            }
            
            public BanksRow AddBanksRow(string BankName, int CityID, string CodeBIK, string KAccount, string CityName) {
                BanksRow rowBanksRow = ((BanksRow)(this.NewRow()));
                rowBanksRow.ItemArray = new object[] {
                        null,
                        BankName,
                        CityID,
                        CodeBIK,
                        KAccount,
                        CityName};
                this.Rows.Add(rowBanksRow);
                return rowBanksRow;
            }
            
            public BanksRow FindByBankID(int BankID) {
                return ((BanksRow)(this.Rows.Find(new object[] {
                            BankID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BanksDataTable cln = ((BanksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BanksDataTable();
            }
            
            internal void InitVars() {
                this.columnBankID = this.Columns["BankID"];
                this.columnBankName = this.Columns["BankName"];
                this.columnCityID = this.Columns["CityID"];
                this.columnCodeBIK = this.Columns["CodeBIK"];
                this.columnKAccount = this.Columns["KAccount"];
                this.columnCityName = this.Columns["CityName"];
            }
            
            private void InitClass() {
                this.columnBankID = new DataColumn("BankID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankID);
                this.columnBankName = new DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankName);
                this.columnCityID = new DataColumn("CityID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCityID);
                this.columnCodeBIK = new DataColumn("CodeBIK", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeBIK);
                this.columnKAccount = new DataColumn("KAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnKAccount);
                this.columnCityName = new DataColumn("CityName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCityName);
                this.Constraints.Add(new UniqueConstraint("dsBanksKey1", new DataColumn[] {
                                this.columnBankID}, true));
                this.columnBankID.AutoIncrement = true;
                this.columnBankID.AllowDBNull = false;
                this.columnBankID.ReadOnly = true;
                this.columnBankID.Unique = true;
            }
            
            public BanksRow NewBanksRow() {
                return ((BanksRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BanksRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BanksRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BanksRowChanged != null)) {
                    this.BanksRowChanged(this, new BanksRowChangeEvent(((BanksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BanksRowChanging != null)) {
                    this.BanksRowChanging(this, new BanksRowChangeEvent(((BanksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BanksRowDeleted != null)) {
                    this.BanksRowDeleted(this, new BanksRowChangeEvent(((BanksRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BanksRowDeleting != null)) {
                    this.BanksRowDeleting(this, new BanksRowChangeEvent(((BanksRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBanksRow(BanksRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BanksRow : DataRow {
            
            private BanksDataTable tableBanks;
            
            internal BanksRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBanks = ((BanksDataTable)(this.Table));
            }
            
            public int BankID {
                get {
                    return ((int)(this[this.tableBanks.BankIDColumn]));
                }
                set {
                    this[this.tableBanks.BankIDColumn] = value;
                }
            }
            
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tableBanks.BankNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBanks.BankNameColumn] = value;
                }
            }
            
            public int CityID {
                get {
                    try {
                        return ((int)(this[this.tableBanks.CityIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBanks.CityIDColumn] = value;
                }
            }
            
            public string CodeBIK {
                get {
                    try {
                        return ((string)(this[this.tableBanks.CodeBIKColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBanks.CodeBIKColumn] = value;
                }
            }
            
            public string KAccount {
                get {
                    try {
                        return ((string)(this[this.tableBanks.KAccountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBanks.KAccountColumn] = value;
                }
            }
            
            public string CityName {
                get {
                    try {
                        return ((string)(this[this.tableBanks.CityNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBanks.CityNameColumn] = value;
                }
            }
            
            public bool IsBankNameNull() {
                return this.IsNull(this.tableBanks.BankNameColumn);
            }
            
            public void SetBankNameNull() {
                this[this.tableBanks.BankNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityIDNull() {
                return this.IsNull(this.tableBanks.CityIDColumn);
            }
            
            public void SetCityIDNull() {
                this[this.tableBanks.CityIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeBIKNull() {
                return this.IsNull(this.tableBanks.CodeBIKColumn);
            }
            
            public void SetCodeBIKNull() {
                this[this.tableBanks.CodeBIKColumn] = System.Convert.DBNull;
            }
            
            public bool IsKAccountNull() {
                return this.IsNull(this.tableBanks.KAccountColumn);
            }
            
            public void SetKAccountNull() {
                this[this.tableBanks.KAccountColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNameNull() {
                return this.IsNull(this.tableBanks.CityNameColumn);
            }
            
            public void SetCityNameNull() {
                this[this.tableBanks.CityNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BanksRowChangeEvent : EventArgs {
            
            private BanksRow eventRow;
            
            private DataRowAction eventAction;
            
            public BanksRowChangeEvent(BanksRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BanksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
