//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.ClientRequest.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsReqState : DataSet {
        
        private ClientsRequestStatesDataTable tableClientsRequestStates;
        
        public dsReqState() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsReqState(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClientsRequestStates"] != null)) {
                    this.Tables.Add(new ClientsRequestStatesDataTable(ds.Tables["ClientsRequestStates"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientsRequestStatesDataTable ClientsRequestStates {
            get {
                return this.tableClientsRequestStates;
            }
        }
        
        public override DataSet Clone() {
            dsReqState cln = ((dsReqState)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ClientsRequestStates"] != null)) {
                this.Tables.Add(new ClientsRequestStatesDataTable(ds.Tables["ClientsRequestStates"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableClientsRequestStates = ((ClientsRequestStatesDataTable)(this.Tables["ClientsRequestStates"]));
            if ((this.tableClientsRequestStates != null)) {
                this.tableClientsRequestStates.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsReqState";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsReqState.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableClientsRequestStates = new ClientsRequestStatesDataTable();
            this.Tables.Add(this.tableClientsRequestStates);
        }
        
        private bool ShouldSerializeClientsRequestStates() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ClientsRequestStatesRowChangeEventHandler(object sender, ClientsRequestStatesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsRequestStatesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRequestStateID;
            
            private DataColumn columnRequestStateName;
            
            internal ClientsRequestStatesDataTable() : 
                    base("ClientsRequestStates") {
                this.InitClass();
            }
            
            internal ClientsRequestStatesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RequestStateIDColumn {
                get {
                    return this.columnRequestStateID;
                }
            }
            
            internal DataColumn RequestStateNameColumn {
                get {
                    return this.columnRequestStateName;
                }
            }
            
            public ClientsRequestStatesRow this[int index] {
                get {
                    return ((ClientsRequestStatesRow)(this.Rows[index]));
                }
            }
            
            public event ClientsRequestStatesRowChangeEventHandler ClientsRequestStatesRowChanged;
            
            public event ClientsRequestStatesRowChangeEventHandler ClientsRequestStatesRowChanging;
            
            public event ClientsRequestStatesRowChangeEventHandler ClientsRequestStatesRowDeleted;
            
            public event ClientsRequestStatesRowChangeEventHandler ClientsRequestStatesRowDeleting;
            
            public void AddClientsRequestStatesRow(ClientsRequestStatesRow row) {
                this.Rows.Add(row);
            }
            
            public ClientsRequestStatesRow AddClientsRequestStatesRow(string RequestStateName) {
                ClientsRequestStatesRow rowClientsRequestStatesRow = ((ClientsRequestStatesRow)(this.NewRow()));
                rowClientsRequestStatesRow.ItemArray = new object[] {
                        null,
                        RequestStateName};
                this.Rows.Add(rowClientsRequestStatesRow);
                return rowClientsRequestStatesRow;
            }
            
            public ClientsRequestStatesRow FindByRequestStateID(int RequestStateID) {
                return ((ClientsRequestStatesRow)(this.Rows.Find(new object[] {
                            RequestStateID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClientsRequestStatesDataTable cln = ((ClientsRequestStatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClientsRequestStatesDataTable();
            }
            
            internal void InitVars() {
                this.columnRequestStateID = this.Columns["RequestStateID"];
                this.columnRequestStateName = this.Columns["RequestStateName"];
            }
            
            private void InitClass() {
                this.columnRequestStateID = new DataColumn("RequestStateID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestStateID);
                this.columnRequestStateName = new DataColumn("RequestStateName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestStateName);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnRequestStateID}, true));
                this.columnRequestStateID.AutoIncrement = true;
                this.columnRequestStateID.AllowDBNull = false;
                this.columnRequestStateID.ReadOnly = true;
                this.columnRequestStateID.Unique = true;
                this.columnRequestStateName.AllowDBNull = false;
            }
            
            public ClientsRequestStatesRow NewClientsRequestStatesRow() {
                return ((ClientsRequestStatesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClientsRequestStatesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClientsRequestStatesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientsRequestStatesRowChanged != null)) {
                    this.ClientsRequestStatesRowChanged(this, new ClientsRequestStatesRowChangeEvent(((ClientsRequestStatesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientsRequestStatesRowChanging != null)) {
                    this.ClientsRequestStatesRowChanging(this, new ClientsRequestStatesRowChangeEvent(((ClientsRequestStatesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientsRequestStatesRowDeleted != null)) {
                    this.ClientsRequestStatesRowDeleted(this, new ClientsRequestStatesRowChangeEvent(((ClientsRequestStatesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientsRequestStatesRowDeleting != null)) {
                    this.ClientsRequestStatesRowDeleting(this, new ClientsRequestStatesRowChangeEvent(((ClientsRequestStatesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClientsRequestStatesRow(ClientsRequestStatesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsRequestStatesRow : DataRow {
            
            private ClientsRequestStatesDataTable tableClientsRequestStates;
            
            internal ClientsRequestStatesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientsRequestStates = ((ClientsRequestStatesDataTable)(this.Table));
            }
            
            public int RequestStateID {
                get {
                    return ((int)(this[this.tableClientsRequestStates.RequestStateIDColumn]));
                }
                set {
                    this[this.tableClientsRequestStates.RequestStateIDColumn] = value;
                }
            }
            
            public string RequestStateName {
                get {
                    return ((string)(this[this.tableClientsRequestStates.RequestStateNameColumn]));
                }
                set {
                    this[this.tableClientsRequestStates.RequestStateNameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsRequestStatesRowChangeEvent : EventArgs {
            
            private ClientsRequestStatesRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClientsRequestStatesRowChangeEvent(ClientsRequestStatesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClientsRequestStatesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
