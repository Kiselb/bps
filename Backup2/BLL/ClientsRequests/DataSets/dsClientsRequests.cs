//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.ClientsRequests.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsClientsRequests : DataSet {
        
        private ClientsRequestsDataTable tableClientsRequests;
        
        public dsClientsRequests() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsClientsRequests(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClientsRequests"] != null)) {
                    this.Tables.Add(new ClientsRequestsDataTable(ds.Tables["ClientsRequests"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientsRequestsDataTable ClientsRequests {
            get {
                return this.tableClientsRequests;
            }
        }
        
        public override DataSet Clone() {
            dsClientsRequests cln = ((dsClientsRequests)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ClientsRequests"] != null)) {
                this.Tables.Add(new ClientsRequestsDataTable(ds.Tables["ClientsRequests"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableClientsRequests = ((ClientsRequestsDataTable)(this.Tables["ClientsRequests"]));
            if ((this.tableClientsRequests != null)) {
                this.tableClientsRequests.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsClientsRequests";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsClientsRequests.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableClientsRequests = new ClientsRequestsDataTable();
            this.Tables.Add(this.tableClientsRequests);
        }
        
        private bool ShouldSerializeClientsRequests() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ClientsRequestsRowChangeEventHandler(object sender, ClientsRequestsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsRequestsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRequestStateName;
            
            private DataColumn columnRequestTypeName;
            
            private DataColumn columnClientName;
            
            private DataColumn columnRequestID;
            
            private DataColumn columnRequestTypeID;
            
            private DataColumn columnRequestDate;
            
            private DataColumn columnClientID;
            
            private DataColumn columnRequestStateID;
            
            private DataColumn columnRequestSum;
            
            private DataColumn columnAccountFrom;
            
            private DataColumn columnAccountTo;
            
            private DataColumn columnRemarks;
            
            private DataColumn columnOrgFrom;
            
            private DataColumn columnOrgTo;
            
            private DataColumn columnOrgFromINN;
            
            private DataColumn columnOrgToINN;
            
            private DataColumn columnOrgFromKPP;
            
            private DataColumn columnOrgToKPP;
            
            private DataColumn columnCurrencyFrom;
            
            private DataColumn columnCurrencyTo;
            
            private DataColumn columnBankName;
            
            private DataColumn columnCodeBIK;
            
            private DataColumn columnVAT;
            
            private DataColumn columnPurpose;
            
            private DataColumn columnExecutedSum;
            
            private DataColumn columnClientGroupID;
            
            private DataColumn columnClientGroupName;
            
            internal ClientsRequestsDataTable() : 
                    base("ClientsRequests") {
                this.InitClass();
            }
            
            internal ClientsRequestsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RequestStateNameColumn {
                get {
                    return this.columnRequestStateName;
                }
            }
            
            internal DataColumn RequestTypeNameColumn {
                get {
                    return this.columnRequestTypeName;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn RequestIDColumn {
                get {
                    return this.columnRequestID;
                }
            }
            
            internal DataColumn RequestTypeIDColumn {
                get {
                    return this.columnRequestTypeID;
                }
            }
            
            internal DataColumn RequestDateColumn {
                get {
                    return this.columnRequestDate;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn RequestStateIDColumn {
                get {
                    return this.columnRequestStateID;
                }
            }
            
            internal DataColumn RequestSumColumn {
                get {
                    return this.columnRequestSum;
                }
            }
            
            internal DataColumn AccountFromColumn {
                get {
                    return this.columnAccountFrom;
                }
            }
            
            internal DataColumn AccountToColumn {
                get {
                    return this.columnAccountTo;
                }
            }
            
            internal DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            internal DataColumn OrgFromColumn {
                get {
                    return this.columnOrgFrom;
                }
            }
            
            internal DataColumn OrgToColumn {
                get {
                    return this.columnOrgTo;
                }
            }
            
            internal DataColumn OrgFromINNColumn {
                get {
                    return this.columnOrgFromINN;
                }
            }
            
            internal DataColumn OrgToINNColumn {
                get {
                    return this.columnOrgToINN;
                }
            }
            
            internal DataColumn OrgFromKPPColumn {
                get {
                    return this.columnOrgFromKPP;
                }
            }
            
            internal DataColumn OrgToKPPColumn {
                get {
                    return this.columnOrgToKPP;
                }
            }
            
            internal DataColumn CurrencyFromColumn {
                get {
                    return this.columnCurrencyFrom;
                }
            }
            
            internal DataColumn CurrencyToColumn {
                get {
                    return this.columnCurrencyTo;
                }
            }
            
            internal DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            internal DataColumn CodeBIKColumn {
                get {
                    return this.columnCodeBIK;
                }
            }
            
            internal DataColumn VATColumn {
                get {
                    return this.columnVAT;
                }
            }
            
            internal DataColumn PurposeColumn {
                get {
                    return this.columnPurpose;
                }
            }
            
            internal DataColumn ExecutedSumColumn {
                get {
                    return this.columnExecutedSum;
                }
            }
            
            internal DataColumn ClientGroupIDColumn {
                get {
                    return this.columnClientGroupID;
                }
            }
            
            internal DataColumn ClientGroupNameColumn {
                get {
                    return this.columnClientGroupName;
                }
            }
            
            public ClientsRequestsRow this[int index] {
                get {
                    return ((ClientsRequestsRow)(this.Rows[index]));
                }
            }
            
            public event ClientsRequestsRowChangeEventHandler ClientsRequestsRowChanged;
            
            public event ClientsRequestsRowChangeEventHandler ClientsRequestsRowChanging;
            
            public event ClientsRequestsRowChangeEventHandler ClientsRequestsRowDeleted;
            
            public event ClientsRequestsRowChangeEventHandler ClientsRequestsRowDeleting;
            
            public void AddClientsRequestsRow(ClientsRequestsRow row) {
                this.Rows.Add(row);
            }
            
            public ClientsRequestsRow AddClientsRequestsRow(
                        string RequestStateName, 
                        string RequestTypeName, 
                        string ClientName, 
                        int RequestTypeID, 
                        System.DateTime RequestDate, 
                        int ClientID, 
                        int RequestStateID, 
                        System.Double RequestSum, 
                        string AccountFrom, 
                        string AccountTo, 
                        string Remarks, 
                        string OrgFrom, 
                        string OrgTo, 
                        string OrgFromINN, 
                        string OrgToINN, 
                        string OrgFromKPP, 
                        string OrgToKPP, 
                        string CurrencyFrom, 
                        string CurrencyTo, 
                        string BankName, 
                        string CodeBIK, 
                        System.Double VAT, 
                        string Purpose, 
                        System.Double ExecutedSum, 
                        int ClientGroupID, 
                        string ClientGroupName) {
                ClientsRequestsRow rowClientsRequestsRow = ((ClientsRequestsRow)(this.NewRow()));
                rowClientsRequestsRow.ItemArray = new object[] {
                        RequestStateName,
                        RequestTypeName,
                        ClientName,
                        null,
                        RequestTypeID,
                        RequestDate,
                        ClientID,
                        RequestStateID,
                        RequestSum,
                        AccountFrom,
                        AccountTo,
                        Remarks,
                        OrgFrom,
                        OrgTo,
                        OrgFromINN,
                        OrgToINN,
                        OrgFromKPP,
                        OrgToKPP,
                        CurrencyFrom,
                        CurrencyTo,
                        BankName,
                        CodeBIK,
                        VAT,
                        Purpose,
                        ExecutedSum,
                        ClientGroupID,
                        ClientGroupName};
                this.Rows.Add(rowClientsRequestsRow);
                return rowClientsRequestsRow;
            }
            
            public ClientsRequestsRow FindByRequestID(int RequestID) {
                return ((ClientsRequestsRow)(this.Rows.Find(new object[] {
                            RequestID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClientsRequestsDataTable cln = ((ClientsRequestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClientsRequestsDataTable();
            }
            
            internal void InitVars() {
                this.columnRequestStateName = this.Columns["RequestStateName"];
                this.columnRequestTypeName = this.Columns["RequestTypeName"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnRequestID = this.Columns["RequestID"];
                this.columnRequestTypeID = this.Columns["RequestTypeID"];
                this.columnRequestDate = this.Columns["RequestDate"];
                this.columnClientID = this.Columns["ClientID"];
                this.columnRequestStateID = this.Columns["RequestStateID"];
                this.columnRequestSum = this.Columns["RequestSum"];
                this.columnAccountFrom = this.Columns["AccountFrom"];
                this.columnAccountTo = this.Columns["AccountTo"];
                this.columnRemarks = this.Columns["Remarks"];
                this.columnOrgFrom = this.Columns["OrgFrom"];
                this.columnOrgTo = this.Columns["OrgTo"];
                this.columnOrgFromINN = this.Columns["OrgFromINN"];
                this.columnOrgToINN = this.Columns["OrgToINN"];
                this.columnOrgFromKPP = this.Columns["OrgFromKPP"];
                this.columnOrgToKPP = this.Columns["OrgToKPP"];
                this.columnCurrencyFrom = this.Columns["CurrencyFrom"];
                this.columnCurrencyTo = this.Columns["CurrencyTo"];
                this.columnBankName = this.Columns["BankName"];
                this.columnCodeBIK = this.Columns["CodeBIK"];
                this.columnVAT = this.Columns["VAT"];
                this.columnPurpose = this.Columns["Purpose"];
                this.columnExecutedSum = this.Columns["ExecutedSum"];
                this.columnClientGroupID = this.Columns["ClientGroupID"];
                this.columnClientGroupName = this.Columns["ClientGroupName"];
            }
            
            private void InitClass() {
                this.columnRequestStateName = new DataColumn("RequestStateName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestStateName);
                this.columnRequestTypeName = new DataColumn("RequestTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestTypeName);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnRequestID = new DataColumn("RequestID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestID);
                this.columnRequestTypeID = new DataColumn("RequestTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestTypeID);
                this.columnRequestDate = new DataColumn("RequestDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestDate);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnRequestStateID = new DataColumn("RequestStateID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestStateID);
                this.columnRequestSum = new DataColumn("RequestSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestSum);
                this.columnAccountFrom = new DataColumn("AccountFrom", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountFrom);
                this.columnAccountTo = new DataColumn("AccountTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountTo);
                this.columnRemarks = new DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRemarks);
                this.columnOrgFrom = new DataColumn("OrgFrom", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgFrom);
                this.columnOrgTo = new DataColumn("OrgTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgTo);
                this.columnOrgFromINN = new DataColumn("OrgFromINN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgFromINN);
                this.columnOrgToINN = new DataColumn("OrgToINN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgToINN);
                this.columnOrgFromKPP = new DataColumn("OrgFromKPP", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgFromKPP);
                this.columnOrgToKPP = new DataColumn("OrgToKPP", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgToKPP);
                this.columnCurrencyFrom = new DataColumn("CurrencyFrom", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyFrom);
                this.columnCurrencyTo = new DataColumn("CurrencyTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyTo);
                this.columnBankName = new DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankName);
                this.columnCodeBIK = new DataColumn("CodeBIK", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeBIK);
                this.columnVAT = new DataColumn("VAT", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVAT);
                this.columnPurpose = new DataColumn("Purpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPurpose);
                this.columnExecutedSum = new DataColumn("ExecutedSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutedSum);
                this.columnClientGroupID = new DataColumn("ClientGroupID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupID);
                this.columnClientGroupName = new DataColumn("ClientGroupName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupName);
                this.Constraints.Add(new UniqueConstraint("dsClientsRequestsKey1", new DataColumn[] {
                                this.columnRequestID}, true));
                this.columnRequestStateName.AllowDBNull = false;
                this.columnRequestTypeName.AllowDBNull = false;
                this.columnClientName.AllowDBNull = false;
                this.columnRequestID.AutoIncrement = true;
                this.columnRequestID.AllowDBNull = false;
                this.columnRequestID.ReadOnly = true;
                this.columnRequestID.Unique = true;
                this.columnRequestTypeID.AllowDBNull = false;
                this.columnRequestDate.AllowDBNull = false;
                this.columnClientID.AllowDBNull = false;
                this.columnRequestStateID.AllowDBNull = false;
                this.columnRequestSum.AllowDBNull = false;
                this.columnExecutedSum.AllowDBNull = false;
                this.columnClientGroupID.AllowDBNull = false;
                this.columnClientGroupName.AllowDBNull = false;
            }
            
            public ClientsRequestsRow NewClientsRequestsRow() {
                return ((ClientsRequestsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClientsRequestsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClientsRequestsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientsRequestsRowChanged != null)) {
                    this.ClientsRequestsRowChanged(this, new ClientsRequestsRowChangeEvent(((ClientsRequestsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientsRequestsRowChanging != null)) {
                    this.ClientsRequestsRowChanging(this, new ClientsRequestsRowChangeEvent(((ClientsRequestsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientsRequestsRowDeleted != null)) {
                    this.ClientsRequestsRowDeleted(this, new ClientsRequestsRowChangeEvent(((ClientsRequestsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientsRequestsRowDeleting != null)) {
                    this.ClientsRequestsRowDeleting(this, new ClientsRequestsRowChangeEvent(((ClientsRequestsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClientsRequestsRow(ClientsRequestsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsRequestsRow : DataRow {
            
            private ClientsRequestsDataTable tableClientsRequests;
            
            internal ClientsRequestsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientsRequests = ((ClientsRequestsDataTable)(this.Table));
            }
            
            public string RequestStateName {
                get {
                    return ((string)(this[this.tableClientsRequests.RequestStateNameColumn]));
                }
                set {
                    this[this.tableClientsRequests.RequestStateNameColumn] = value;
                }
            }
            
            public string RequestTypeName {
                get {
                    return ((string)(this[this.tableClientsRequests.RequestTypeNameColumn]));
                }
                set {
                    this[this.tableClientsRequests.RequestTypeNameColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    return ((string)(this[this.tableClientsRequests.ClientNameColumn]));
                }
                set {
                    this[this.tableClientsRequests.ClientNameColumn] = value;
                }
            }
            
            public int RequestID {
                get {
                    return ((int)(this[this.tableClientsRequests.RequestIDColumn]));
                }
                set {
                    this[this.tableClientsRequests.RequestIDColumn] = value;
                }
            }
            
            public int RequestTypeID {
                get {
                    return ((int)(this[this.tableClientsRequests.RequestTypeIDColumn]));
                }
                set {
                    this[this.tableClientsRequests.RequestTypeIDColumn] = value;
                }
            }
            
            public System.DateTime RequestDate {
                get {
                    return ((System.DateTime)(this[this.tableClientsRequests.RequestDateColumn]));
                }
                set {
                    this[this.tableClientsRequests.RequestDateColumn] = value;
                }
            }
            
            public int ClientID {
                get {
                    return ((int)(this[this.tableClientsRequests.ClientIDColumn]));
                }
                set {
                    this[this.tableClientsRequests.ClientIDColumn] = value;
                }
            }
            
            public int RequestStateID {
                get {
                    return ((int)(this[this.tableClientsRequests.RequestStateIDColumn]));
                }
                set {
                    this[this.tableClientsRequests.RequestStateIDColumn] = value;
                }
            }
            
            public System.Double RequestSum {
                get {
                    return ((System.Double)(this[this.tableClientsRequests.RequestSumColumn]));
                }
                set {
                    this[this.tableClientsRequests.RequestSumColumn] = value;
                }
            }
            
            public string AccountFrom {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.AccountFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.AccountFromColumn] = value;
                }
            }
            
            public string AccountTo {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.AccountToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.AccountToColumn] = value;
                }
            }
            
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.RemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.RemarksColumn] = value;
                }
            }
            
            public string OrgFrom {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.OrgFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.OrgFromColumn] = value;
                }
            }
            
            public string OrgTo {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.OrgToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.OrgToColumn] = value;
                }
            }
            
            public string OrgFromINN {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.OrgFromINNColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.OrgFromINNColumn] = value;
                }
            }
            
            public string OrgToINN {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.OrgToINNColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.OrgToINNColumn] = value;
                }
            }
            
            public string OrgFromKPP {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.OrgFromKPPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.OrgFromKPPColumn] = value;
                }
            }
            
            public string OrgToKPP {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.OrgToKPPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.OrgToKPPColumn] = value;
                }
            }
            
            public string CurrencyFrom {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.CurrencyFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.CurrencyFromColumn] = value;
                }
            }
            
            public string CurrencyTo {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.CurrencyToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.CurrencyToColumn] = value;
                }
            }
            
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.BankNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.BankNameColumn] = value;
                }
            }
            
            public string CodeBIK {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.CodeBIKColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.CodeBIKColumn] = value;
                }
            }
            
            public System.Double VAT {
                get {
                    try {
                        return ((System.Double)(this[this.tableClientsRequests.VATColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.VATColumn] = value;
                }
            }
            
            public string Purpose {
                get {
                    try {
                        return ((string)(this[this.tableClientsRequests.PurposeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientsRequests.PurposeColumn] = value;
                }
            }
            
            public System.Double ExecutedSum {
                get {
                    return ((System.Double)(this[this.tableClientsRequests.ExecutedSumColumn]));
                }
                set {
                    this[this.tableClientsRequests.ExecutedSumColumn] = value;
                }
            }
            
            public int ClientGroupID {
                get {
                    return ((int)(this[this.tableClientsRequests.ClientGroupIDColumn]));
                }
                set {
                    this[this.tableClientsRequests.ClientGroupIDColumn] = value;
                }
            }
            
            public string ClientGroupName {
                get {
                    return ((string)(this[this.tableClientsRequests.ClientGroupNameColumn]));
                }
                set {
                    this[this.tableClientsRequests.ClientGroupNameColumn] = value;
                }
            }
            
            public bool IsAccountFromNull() {
                return this.IsNull(this.tableClientsRequests.AccountFromColumn);
            }
            
            public void SetAccountFromNull() {
                this[this.tableClientsRequests.AccountFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountToNull() {
                return this.IsNull(this.tableClientsRequests.AccountToColumn);
            }
            
            public void SetAccountToNull() {
                this[this.tableClientsRequests.AccountToColumn] = System.Convert.DBNull;
            }
            
            public bool IsRemarksNull() {
                return this.IsNull(this.tableClientsRequests.RemarksColumn);
            }
            
            public void SetRemarksNull() {
                this[this.tableClientsRequests.RemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgFromNull() {
                return this.IsNull(this.tableClientsRequests.OrgFromColumn);
            }
            
            public void SetOrgFromNull() {
                this[this.tableClientsRequests.OrgFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgToNull() {
                return this.IsNull(this.tableClientsRequests.OrgToColumn);
            }
            
            public void SetOrgToNull() {
                this[this.tableClientsRequests.OrgToColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgFromINNNull() {
                return this.IsNull(this.tableClientsRequests.OrgFromINNColumn);
            }
            
            public void SetOrgFromINNNull() {
                this[this.tableClientsRequests.OrgFromINNColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgToINNNull() {
                return this.IsNull(this.tableClientsRequests.OrgToINNColumn);
            }
            
            public void SetOrgToINNNull() {
                this[this.tableClientsRequests.OrgToINNColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgFromKPPNull() {
                return this.IsNull(this.tableClientsRequests.OrgFromKPPColumn);
            }
            
            public void SetOrgFromKPPNull() {
                this[this.tableClientsRequests.OrgFromKPPColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgToKPPNull() {
                return this.IsNull(this.tableClientsRequests.OrgToKPPColumn);
            }
            
            public void SetOrgToKPPNull() {
                this[this.tableClientsRequests.OrgToKPPColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrencyFromNull() {
                return this.IsNull(this.tableClientsRequests.CurrencyFromColumn);
            }
            
            public void SetCurrencyFromNull() {
                this[this.tableClientsRequests.CurrencyFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrencyToNull() {
                return this.IsNull(this.tableClientsRequests.CurrencyToColumn);
            }
            
            public void SetCurrencyToNull() {
                this[this.tableClientsRequests.CurrencyToColumn] = System.Convert.DBNull;
            }
            
            public bool IsBankNameNull() {
                return this.IsNull(this.tableClientsRequests.BankNameColumn);
            }
            
            public void SetBankNameNull() {
                this[this.tableClientsRequests.BankNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeBIKNull() {
                return this.IsNull(this.tableClientsRequests.CodeBIKColumn);
            }
            
            public void SetCodeBIKNull() {
                this[this.tableClientsRequests.CodeBIKColumn] = System.Convert.DBNull;
            }
            
            public bool IsVATNull() {
                return this.IsNull(this.tableClientsRequests.VATColumn);
            }
            
            public void SetVATNull() {
                this[this.tableClientsRequests.VATColumn] = System.Convert.DBNull;
            }
            
            public bool IsPurposeNull() {
                return this.IsNull(this.tableClientsRequests.PurposeColumn);
            }
            
            public void SetPurposeNull() {
                this[this.tableClientsRequests.PurposeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsRequestsRowChangeEvent : EventArgs {
            
            private ClientsRequestsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClientsRequestsRowChangeEvent(ClientsRequestsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClientsRequestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
