//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.Clients.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsOrgsClients : DataSet {
        
        private OrgsClientsDataTable tableOrgsClients;
        
        public dsOrgsClients() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsOrgsClients(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["OrgsClients"] != null)) {
                    this.Tables.Add(new OrgsClientsDataTable(ds.Tables["OrgsClients"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrgsClientsDataTable OrgsClients {
            get {
                return this.tableOrgsClients;
            }
        }
        
        public override DataSet Clone() {
            dsOrgsClients cln = ((dsOrgsClients)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["OrgsClients"] != null)) {
                this.Tables.Add(new OrgsClientsDataTable(ds.Tables["OrgsClients"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableOrgsClients = ((OrgsClientsDataTable)(this.Tables["OrgsClients"]));
            if ((this.tableOrgsClients != null)) {
                this.tableOrgsClients.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsOrgsClients";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsOrgsClients.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableOrgsClients = new OrgsClientsDataTable();
            this.Tables.Add(this.tableOrgsClients);
        }
        
        private bool ShouldSerializeOrgsClients() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void OrgsClientsRowChangeEventHandler(object sender, OrgsClientsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrgsClientsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClientID;
            
            private DataColumn columnOrgID;
            
            private DataColumn columnDirection;
            
            private DataColumn columnIsAvailable;
            
            private DataColumn columnOrgName;
            
            private DataColumn columnCodeINN;
            
            private DataColumn columnIsRemoved;
            
            private DataColumn columnCodeKPP;
            
            internal OrgsClientsDataTable() : 
                    base("OrgsClients") {
                this.InitClass();
            }
            
            internal OrgsClientsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            internal DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            internal DataColumn IsAvailableColumn {
                get {
                    return this.columnIsAvailable;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            internal DataColumn CodeINNColumn {
                get {
                    return this.columnCodeINN;
                }
            }
            
            internal DataColumn IsRemovedColumn {
                get {
                    return this.columnIsRemoved;
                }
            }
            
            internal DataColumn CodeKPPColumn {
                get {
                    return this.columnCodeKPP;
                }
            }
            
            public OrgsClientsRow this[int index] {
                get {
                    return ((OrgsClientsRow)(this.Rows[index]));
                }
            }
            
            public event OrgsClientsRowChangeEventHandler OrgsClientsRowChanged;
            
            public event OrgsClientsRowChangeEventHandler OrgsClientsRowChanging;
            
            public event OrgsClientsRowChangeEventHandler OrgsClientsRowDeleted;
            
            public event OrgsClientsRowChangeEventHandler OrgsClientsRowDeleting;
            
            public void AddOrgsClientsRow(OrgsClientsRow row) {
                this.Rows.Add(row);
            }
            
            public OrgsClientsRow AddOrgsClientsRow(int ClientID, int OrgID, System.Byte Direction, bool IsAvailable, string OrgName, string CodeINN, bool IsRemoved, string CodeKPP) {
                OrgsClientsRow rowOrgsClientsRow = ((OrgsClientsRow)(this.NewRow()));
                rowOrgsClientsRow.ItemArray = new object[] {
                        ClientID,
                        OrgID,
                        Direction,
                        IsAvailable,
                        OrgName,
                        CodeINN,
                        IsRemoved,
                        CodeKPP};
                this.Rows.Add(rowOrgsClientsRow);
                return rowOrgsClientsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OrgsClientsDataTable cln = ((OrgsClientsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OrgsClientsDataTable();
            }
            
            internal void InitVars() {
                this.columnClientID = this.Columns["ClientID"];
                this.columnOrgID = this.Columns["OrgID"];
                this.columnDirection = this.Columns["Direction"];
                this.columnIsAvailable = this.Columns["IsAvailable"];
                this.columnOrgName = this.Columns["OrgName"];
                this.columnCodeINN = this.Columns["CodeINN"];
                this.columnIsRemoved = this.Columns["IsRemoved"];
                this.columnCodeKPP = this.Columns["CodeKPP"];
            }
            
            private void InitClass() {
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.columnDirection = new DataColumn("Direction", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDirection);
                this.columnIsAvailable = new DataColumn("IsAvailable", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAvailable);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnCodeINN = new DataColumn("CodeINN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeINN);
                this.columnIsRemoved = new DataColumn("IsRemoved", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsRemoved);
                this.columnCodeKPP = new DataColumn("CodeKPP", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeKPP);
                this.Constraints.Add(new UniqueConstraint("dsOrgsClientsKey1", new DataColumn[] {
                                this.columnClientID,
                                this.columnOrgID,
                                this.columnDirection}, false));
                this.columnClientID.AllowDBNull = false;
                this.columnOrgID.AllowDBNull = false;
                this.columnDirection.AllowDBNull = false;
                this.columnIsAvailable.AllowDBNull = false;
                this.columnOrgName.AllowDBNull = false;
                this.columnCodeINN.AllowDBNull = false;
                this.columnIsRemoved.AllowDBNull = false;
            }
            
            public OrgsClientsRow NewOrgsClientsRow() {
                return ((OrgsClientsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OrgsClientsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrgsClientsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrgsClientsRowChanged != null)) {
                    this.OrgsClientsRowChanged(this, new OrgsClientsRowChangeEvent(((OrgsClientsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrgsClientsRowChanging != null)) {
                    this.OrgsClientsRowChanging(this, new OrgsClientsRowChangeEvent(((OrgsClientsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrgsClientsRowDeleted != null)) {
                    this.OrgsClientsRowDeleted(this, new OrgsClientsRowChangeEvent(((OrgsClientsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrgsClientsRowDeleting != null)) {
                    this.OrgsClientsRowDeleting(this, new OrgsClientsRowChangeEvent(((OrgsClientsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrgsClientsRow(OrgsClientsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrgsClientsRow : DataRow {
            
            private OrgsClientsDataTable tableOrgsClients;
            
            internal OrgsClientsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrgsClients = ((OrgsClientsDataTable)(this.Table));
            }
            
            public int ClientID {
                get {
                    return ((int)(this[this.tableOrgsClients.ClientIDColumn]));
                }
                set {
                    this[this.tableOrgsClients.ClientIDColumn] = value;
                }
            }
            
            public int OrgID {
                get {
                    return ((int)(this[this.tableOrgsClients.OrgIDColumn]));
                }
                set {
                    this[this.tableOrgsClients.OrgIDColumn] = value;
                }
            }
            
            public System.Byte Direction {
                get {
                    return ((System.Byte)(this[this.tableOrgsClients.DirectionColumn]));
                }
                set {
                    this[this.tableOrgsClients.DirectionColumn] = value;
                }
            }
            
            public bool IsAvailable {
                get {
                    return ((bool)(this[this.tableOrgsClients.IsAvailableColumn]));
                }
                set {
                    this[this.tableOrgsClients.IsAvailableColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    return ((string)(this[this.tableOrgsClients.OrgNameColumn]));
                }
                set {
                    this[this.tableOrgsClients.OrgNameColumn] = value;
                }
            }
            
            public string CodeINN {
                get {
                    return ((string)(this[this.tableOrgsClients.CodeINNColumn]));
                }
                set {
                    this[this.tableOrgsClients.CodeINNColumn] = value;
                }
            }
            
            public bool IsRemoved {
                get {
                    return ((bool)(this[this.tableOrgsClients.IsRemovedColumn]));
                }
                set {
                    this[this.tableOrgsClients.IsRemovedColumn] = value;
                }
            }
            
            public string CodeKPP {
                get {
                    try {
                        return ((string)(this[this.tableOrgsClients.CodeKPPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrgsClients.CodeKPPColumn] = value;
                }
            }
            
            public bool IsCodeKPPNull() {
                return this.IsNull(this.tableOrgsClients.CodeKPPColumn);
            }
            
            public void SetCodeKPPNull() {
                this[this.tableOrgsClients.CodeKPPColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrgsClientsRowChangeEvent : EventArgs {
            
            private OrgsClientsRow eventRow;
            
            private DataRowAction eventAction;
            
            public OrgsClientsRowChangeEvent(OrgsClientsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrgsClientsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
