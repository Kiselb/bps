//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.AccountStatements {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsAccountsStatementsList : DataSet {
        
        private AccountsStatementsHeadersDataTable tableAccountsStatementsHeaders;
        
        private AccountsStatementsDataTable tableAccountsStatements;
        
        public dsAccountsStatementsList() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsAccountsStatementsList(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AccountsStatementsHeaders"] != null)) {
                    this.Tables.Add(new AccountsStatementsHeadersDataTable(ds.Tables["AccountsStatementsHeaders"]));
                }
                if ((ds.Tables["AccountsStatements"] != null)) {
                    this.Tables.Add(new AccountsStatementsDataTable(ds.Tables["AccountsStatements"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountsStatementsHeadersDataTable AccountsStatementsHeaders {
            get {
                return this.tableAccountsStatementsHeaders;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountsStatementsDataTable AccountsStatements {
            get {
                return this.tableAccountsStatements;
            }
        }
        
        public override DataSet Clone() {
            dsAccountsStatementsList cln = ((dsAccountsStatementsList)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["AccountsStatementsHeaders"] != null)) {
                this.Tables.Add(new AccountsStatementsHeadersDataTable(ds.Tables["AccountsStatementsHeaders"]));
            }
            if ((ds.Tables["AccountsStatements"] != null)) {
                this.Tables.Add(new AccountsStatementsDataTable(ds.Tables["AccountsStatements"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAccountsStatementsHeaders = ((AccountsStatementsHeadersDataTable)(this.Tables["AccountsStatementsHeaders"]));
            if ((this.tableAccountsStatementsHeaders != null)) {
                this.tableAccountsStatementsHeaders.InitVars();
            }
            this.tableAccountsStatements = ((AccountsStatementsDataTable)(this.Tables["AccountsStatements"]));
            if ((this.tableAccountsStatements != null)) {
                this.tableAccountsStatements.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsAccountsStatementsList";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsAccountsStatementsList.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAccountsStatementsHeaders = new AccountsStatementsHeadersDataTable();
            this.Tables.Add(this.tableAccountsStatementsHeaders);
            this.tableAccountsStatements = new AccountsStatementsDataTable();
            this.Tables.Add(this.tableAccountsStatements);
            this.InitExpressions();
        }
        
        private bool ShouldSerializeAccountsStatementsHeaders() {
            return false;
        }
        
        private bool ShouldSerializeAccountsStatements() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        private void InitExpressions() {
            this.tableAccountsStatements.INColumn.Expression = "IIF(Direction,PaymentOrderSum, null)";
            this.tableAccountsStatements.OUTColumn.Expression = "IIF(Direction,null, PaymentOrderSum)";
        }
        
        public delegate void AccountsStatementsHeadersRowChangeEventHandler(object sender, AccountsStatementsHeadersRowChangeEvent e);
        
        public delegate void AccountsStatementsRowChangeEventHandler(object sender, AccountsStatementsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsHeadersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnHeaderID;
            
            private DataColumn columnOrgAccountID;
            
            private DataColumn columnHeaderDate;
            
            private DataColumn columnSaldoStart;
            
            private DataColumn columnSaldoEnd;
            
            private DataColumn columnConfirmed;
            
            private DataColumn columnAccountID;
            
            private DataColumn columnRAccount;
            
            private DataColumn columnCurrencyID;
            
            private DataColumn columnOrgName;
            
            private DataColumn columnIsInner;
            
            private DataColumn columnIsNormal;
            
            private DataColumn columnOrgsAccountsIDCorr;
            
            private DataColumn columnOrgID;
            
            private DataColumn columnRemarks;
            
            internal AccountsStatementsHeadersDataTable() : 
                    base("AccountsStatementsHeaders") {
                this.InitClass();
            }
            
            internal AccountsStatementsHeadersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn HeaderIDColumn {
                get {
                    return this.columnHeaderID;
                }
            }
            
            internal DataColumn OrgAccountIDColumn {
                get {
                    return this.columnOrgAccountID;
                }
            }
            
            internal DataColumn HeaderDateColumn {
                get {
                    return this.columnHeaderDate;
                }
            }
            
            internal DataColumn SaldoStartColumn {
                get {
                    return this.columnSaldoStart;
                }
            }
            
            internal DataColumn SaldoEndColumn {
                get {
                    return this.columnSaldoEnd;
                }
            }
            
            internal DataColumn ConfirmedColumn {
                get {
                    return this.columnConfirmed;
                }
            }
            
            internal DataColumn AccountIDColumn {
                get {
                    return this.columnAccountID;
                }
            }
            
            internal DataColumn RAccountColumn {
                get {
                    return this.columnRAccount;
                }
            }
            
            internal DataColumn CurrencyIDColumn {
                get {
                    return this.columnCurrencyID;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            internal DataColumn IsInnerColumn {
                get {
                    return this.columnIsInner;
                }
            }
            
            internal DataColumn IsNormalColumn {
                get {
                    return this.columnIsNormal;
                }
            }
            
            internal DataColumn OrgsAccountsIDCorrColumn {
                get {
                    return this.columnOrgsAccountsIDCorr;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            internal DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            public AccountsStatementsHeadersRow this[int index] {
                get {
                    return ((AccountsStatementsHeadersRow)(this.Rows[index]));
                }
            }
            
            public event AccountsStatementsHeadersRowChangeEventHandler AccountsStatementsHeadersRowChanged;
            
            public event AccountsStatementsHeadersRowChangeEventHandler AccountsStatementsHeadersRowChanging;
            
            public event AccountsStatementsHeadersRowChangeEventHandler AccountsStatementsHeadersRowDeleted;
            
            public event AccountsStatementsHeadersRowChangeEventHandler AccountsStatementsHeadersRowDeleting;
            
            public void AddAccountsStatementsHeadersRow(AccountsStatementsHeadersRow row) {
                this.Rows.Add(row);
            }
            
            public AccountsStatementsHeadersRow AddAccountsStatementsHeadersRow(int OrgAccountID, System.DateTime HeaderDate, System.Double SaldoStart, System.Double SaldoEnd, bool Confirmed, int AccountID, string RAccount, string CurrencyID, string OrgName, bool IsInner, bool IsNormal, string Remarks) {
                AccountsStatementsHeadersRow rowAccountsStatementsHeadersRow = ((AccountsStatementsHeadersRow)(this.NewRow()));
                rowAccountsStatementsHeadersRow.ItemArray = new object[] {
                        null,
                        OrgAccountID,
                        HeaderDate,
                        SaldoStart,
                        SaldoEnd,
                        Confirmed,
                        AccountID,
                        RAccount,
                        CurrencyID,
                        OrgName,
                        IsInner,
                        IsNormal,
                        null,
                        null,
                        Remarks};
                this.Rows.Add(rowAccountsStatementsHeadersRow);
                return rowAccountsStatementsHeadersRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AccountsStatementsHeadersDataTable cln = ((AccountsStatementsHeadersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AccountsStatementsHeadersDataTable();
            }
            
            internal void InitVars() {
                this.columnHeaderID = this.Columns["HeaderID"];
                this.columnOrgAccountID = this.Columns["OrgAccountID"];
                this.columnHeaderDate = this.Columns["HeaderDate"];
                this.columnSaldoStart = this.Columns["SaldoStart"];
                this.columnSaldoEnd = this.Columns["SaldoEnd"];
                this.columnConfirmed = this.Columns["Confirmed"];
                this.columnAccountID = this.Columns["AccountID"];
                this.columnRAccount = this.Columns["RAccount"];
                this.columnCurrencyID = this.Columns["CurrencyID"];
                this.columnOrgName = this.Columns["OrgName"];
                this.columnIsInner = this.Columns["IsInner"];
                this.columnIsNormal = this.Columns["IsNormal"];
                this.columnOrgsAccountsIDCorr = this.Columns["OrgsAccountsIDCorr"];
                this.columnOrgID = this.Columns["OrgID"];
                this.columnRemarks = this.Columns["Remarks"];
            }
            
            private void InitClass() {
                this.columnHeaderID = new DataColumn("HeaderID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderID);
                this.columnOrgAccountID = new DataColumn("OrgAccountID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgAccountID);
                this.columnHeaderDate = new DataColumn("HeaderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderDate);
                this.columnSaldoStart = new DataColumn("SaldoStart", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSaldoStart);
                this.columnSaldoEnd = new DataColumn("SaldoEnd", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSaldoEnd);
                this.columnConfirmed = new DataColumn("Confirmed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfirmed);
                this.columnAccountID = new DataColumn("AccountID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountID);
                this.columnRAccount = new DataColumn("RAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccount);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyID);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnIsInner = new DataColumn("IsInner", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInner);
                this.columnIsNormal = new DataColumn("IsNormal", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsNormal);
                this.columnOrgsAccountsIDCorr = new DataColumn("OrgsAccountsIDCorr", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgsAccountsIDCorr);
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.columnRemarks = new DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRemarks);
                this.columnHeaderID.AutoIncrement = true;
                this.columnHeaderID.AllowDBNull = false;
                this.columnHeaderID.ReadOnly = true;
                this.columnOrgAccountID.AllowDBNull = false;
                this.columnHeaderDate.AllowDBNull = false;
                this.columnSaldoStart.AllowDBNull = false;
                this.columnSaldoEnd.AllowDBNull = false;
                this.columnConfirmed.AllowDBNull = false;
                this.columnAccountID.AllowDBNull = false;
                this.columnRAccount.AllowDBNull = false;
                this.columnCurrencyID.AllowDBNull = false;
                this.columnOrgName.AllowDBNull = false;
                this.columnIsInner.AllowDBNull = false;
                this.columnIsNormal.AllowDBNull = false;
                this.columnOrgsAccountsIDCorr.AutoIncrement = true;
                this.columnOrgsAccountsIDCorr.AllowDBNull = false;
                this.columnOrgsAccountsIDCorr.ReadOnly = true;
                this.columnOrgID.AutoIncrement = true;
                this.columnOrgID.AllowDBNull = false;
                this.columnOrgID.ReadOnly = true;
            }
            
            public AccountsStatementsHeadersRow NewAccountsStatementsHeadersRow() {
                return ((AccountsStatementsHeadersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AccountsStatementsHeadersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AccountsStatementsHeadersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountsStatementsHeadersRowChanged != null)) {
                    this.AccountsStatementsHeadersRowChanged(this, new AccountsStatementsHeadersRowChangeEvent(((AccountsStatementsHeadersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountsStatementsHeadersRowChanging != null)) {
                    this.AccountsStatementsHeadersRowChanging(this, new AccountsStatementsHeadersRowChangeEvent(((AccountsStatementsHeadersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountsStatementsHeadersRowDeleted != null)) {
                    this.AccountsStatementsHeadersRowDeleted(this, new AccountsStatementsHeadersRowChangeEvent(((AccountsStatementsHeadersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountsStatementsHeadersRowDeleting != null)) {
                    this.AccountsStatementsHeadersRowDeleting(this, new AccountsStatementsHeadersRowChangeEvent(((AccountsStatementsHeadersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAccountsStatementsHeadersRow(AccountsStatementsHeadersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsHeadersRow : DataRow {
            
            private AccountsStatementsHeadersDataTable tableAccountsStatementsHeaders;
            
            internal AccountsStatementsHeadersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccountsStatementsHeaders = ((AccountsStatementsHeadersDataTable)(this.Table));
            }
            
            public int HeaderID {
                get {
                    return ((int)(this[this.tableAccountsStatementsHeaders.HeaderIDColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.HeaderIDColumn] = value;
                }
            }
            
            public int OrgAccountID {
                get {
                    return ((int)(this[this.tableAccountsStatementsHeaders.OrgAccountIDColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.OrgAccountIDColumn] = value;
                }
            }
            
            public System.DateTime HeaderDate {
                get {
                    return ((System.DateTime)(this[this.tableAccountsStatementsHeaders.HeaderDateColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.HeaderDateColumn] = value;
                }
            }
            
            public System.Double SaldoStart {
                get {
                    return ((System.Double)(this[this.tableAccountsStatementsHeaders.SaldoStartColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.SaldoStartColumn] = value;
                }
            }
            
            public System.Double SaldoEnd {
                get {
                    return ((System.Double)(this[this.tableAccountsStatementsHeaders.SaldoEndColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.SaldoEndColumn] = value;
                }
            }
            
            public bool Confirmed {
                get {
                    return ((bool)(this[this.tableAccountsStatementsHeaders.ConfirmedColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.ConfirmedColumn] = value;
                }
            }
            
            public int AccountID {
                get {
                    return ((int)(this[this.tableAccountsStatementsHeaders.AccountIDColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.AccountIDColumn] = value;
                }
            }
            
            public string RAccount {
                get {
                    return ((string)(this[this.tableAccountsStatementsHeaders.RAccountColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.RAccountColumn] = value;
                }
            }
            
            public string CurrencyID {
                get {
                    return ((string)(this[this.tableAccountsStatementsHeaders.CurrencyIDColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.CurrencyIDColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    return ((string)(this[this.tableAccountsStatementsHeaders.OrgNameColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.OrgNameColumn] = value;
                }
            }
            
            public bool IsInner {
                get {
                    return ((bool)(this[this.tableAccountsStatementsHeaders.IsInnerColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.IsInnerColumn] = value;
                }
            }
            
            public bool IsNormal {
                get {
                    return ((bool)(this[this.tableAccountsStatementsHeaders.IsNormalColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.IsNormalColumn] = value;
                }
            }
            
            public int OrgsAccountsIDCorr {
                get {
                    return ((int)(this[this.tableAccountsStatementsHeaders.OrgsAccountsIDCorrColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.OrgsAccountsIDCorrColumn] = value;
                }
            }
            
            public int OrgID {
                get {
                    return ((int)(this[this.tableAccountsStatementsHeaders.OrgIDColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.OrgIDColumn] = value;
                }
            }
            
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableAccountsStatementsHeaders.RemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountsStatementsHeaders.RemarksColumn] = value;
                }
            }
            
            public bool IsRemarksNull() {
                return this.IsNull(this.tableAccountsStatementsHeaders.RemarksColumn);
            }
            
            public void SetRemarksNull() {
                this[this.tableAccountsStatementsHeaders.RemarksColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsHeadersRowChangeEvent : EventArgs {
            
            private AccountsStatementsHeadersRow eventRow;
            
            private DataRowAction eventAction;
            
            public AccountsStatementsHeadersRowChangeEvent(AccountsStatementsHeadersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AccountsStatementsHeadersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAccountStatementID;
            
            private DataColumn columnHeaderID;
            
            private DataColumn columnPaymentOrderDate;
            
            private DataColumn columnPaymentNo;
            
            private DataColumn columnOrgAccountIDCorr;
            
            private DataColumn columnDirection;
            
            private DataColumn columnPaymentOrderSum;
            
            private DataColumn columnPaymentOrderPurpose;
            
            private DataColumn columnRemarks;
            
            private DataColumn columnAccountID;
            
            private DataColumn columnOrgID;
            
            private DataColumn columnRAccount;
            
            private DataColumn columnCurrencyID;
            
            private DataColumn columnOrgName;
            
            private DataColumn columnIsInner;
            
            private DataColumn columnIsNormal;
            
            private DataColumn columnExpr1;
            
            private DataColumn columnOrgsAccountsID;
            
            private DataColumn columnExpr2;
            
            private DataColumn columnIN;
            
            private DataColumn columnOUT;
            
            internal AccountsStatementsDataTable() : 
                    base("AccountsStatements") {
                this.InitClass();
            }
            
            internal AccountsStatementsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AccountStatementIDColumn {
                get {
                    return this.columnAccountStatementID;
                }
            }
            
            internal DataColumn HeaderIDColumn {
                get {
                    return this.columnHeaderID;
                }
            }
            
            internal DataColumn PaymentOrderDateColumn {
                get {
                    return this.columnPaymentOrderDate;
                }
            }
            
            internal DataColumn PaymentNoColumn {
                get {
                    return this.columnPaymentNo;
                }
            }
            
            internal DataColumn OrgAccountIDCorrColumn {
                get {
                    return this.columnOrgAccountIDCorr;
                }
            }
            
            internal DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            internal DataColumn PaymentOrderSumColumn {
                get {
                    return this.columnPaymentOrderSum;
                }
            }
            
            internal DataColumn PaymentOrderPurposeColumn {
                get {
                    return this.columnPaymentOrderPurpose;
                }
            }
            
            internal DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            internal DataColumn AccountIDColumn {
                get {
                    return this.columnAccountID;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            internal DataColumn RAccountColumn {
                get {
                    return this.columnRAccount;
                }
            }
            
            internal DataColumn CurrencyIDColumn {
                get {
                    return this.columnCurrencyID;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            internal DataColumn IsInnerColumn {
                get {
                    return this.columnIsInner;
                }
            }
            
            internal DataColumn IsNormalColumn {
                get {
                    return this.columnIsNormal;
                }
            }
            
            internal DataColumn Expr1Column {
                get {
                    return this.columnExpr1;
                }
            }
            
            internal DataColumn OrgsAccountsIDColumn {
                get {
                    return this.columnOrgsAccountsID;
                }
            }
            
            internal DataColumn Expr2Column {
                get {
                    return this.columnExpr2;
                }
            }
            
            internal DataColumn INColumn {
                get {
                    return this.columnIN;
                }
            }
            
            internal DataColumn OUTColumn {
                get {
                    return this.columnOUT;
                }
            }
            
            public AccountsStatementsRow this[int index] {
                get {
                    return ((AccountsStatementsRow)(this.Rows[index]));
                }
            }
            
            public event AccountsStatementsRowChangeEventHandler AccountsStatementsRowChanged;
            
            public event AccountsStatementsRowChangeEventHandler AccountsStatementsRowChanging;
            
            public event AccountsStatementsRowChangeEventHandler AccountsStatementsRowDeleted;
            
            public event AccountsStatementsRowChangeEventHandler AccountsStatementsRowDeleting;
            
            public void AddAccountsStatementsRow(AccountsStatementsRow row) {
                this.Rows.Add(row);
            }
            
            public AccountsStatementsRow AddAccountsStatementsRow(
                        int HeaderID, 
                        System.DateTime PaymentOrderDate, 
                        string PaymentNo, 
                        int OrgAccountIDCorr, 
                        bool Direction, 
                        System.Double PaymentOrderSum, 
                        string PaymentOrderPurpose, 
                        string Remarks, 
                        int AccountID, 
                        int OrgID, 
                        string RAccount, 
                        string CurrencyID, 
                        string OrgName, 
                        bool IsInner, 
                        bool IsNormal, 
                        System.Double IN, 
                        System.Double OUT) {
                AccountsStatementsRow rowAccountsStatementsRow = ((AccountsStatementsRow)(this.NewRow()));
                rowAccountsStatementsRow.ItemArray = new object[] {
                        null,
                        HeaderID,
                        PaymentOrderDate,
                        PaymentNo,
                        OrgAccountIDCorr,
                        Direction,
                        PaymentOrderSum,
                        PaymentOrderPurpose,
                        Remarks,
                        AccountID,
                        OrgID,
                        RAccount,
                        CurrencyID,
                        OrgName,
                        IsInner,
                        IsNormal,
                        null,
                        null,
                        null,
                        IN,
                        OUT};
                this.Rows.Add(rowAccountsStatementsRow);
                return rowAccountsStatementsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AccountsStatementsDataTable cln = ((AccountsStatementsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AccountsStatementsDataTable();
            }
            
            internal void InitVars() {
                this.columnAccountStatementID = this.Columns["AccountStatementID"];
                this.columnHeaderID = this.Columns["HeaderID"];
                this.columnPaymentOrderDate = this.Columns["PaymentOrderDate"];
                this.columnPaymentNo = this.Columns["PaymentNo"];
                this.columnOrgAccountIDCorr = this.Columns["OrgAccountIDCorr"];
                this.columnDirection = this.Columns["Direction"];
                this.columnPaymentOrderSum = this.Columns["PaymentOrderSum"];
                this.columnPaymentOrderPurpose = this.Columns["PaymentOrderPurpose"];
                this.columnRemarks = this.Columns["Remarks"];
                this.columnAccountID = this.Columns["AccountID"];
                this.columnOrgID = this.Columns["OrgID"];
                this.columnRAccount = this.Columns["RAccount"];
                this.columnCurrencyID = this.Columns["CurrencyID"];
                this.columnOrgName = this.Columns["OrgName"];
                this.columnIsInner = this.Columns["IsInner"];
                this.columnIsNormal = this.Columns["IsNormal"];
                this.columnExpr1 = this.Columns["Expr1"];
                this.columnOrgsAccountsID = this.Columns["OrgsAccountsID"];
                this.columnExpr2 = this.Columns["Expr2"];
                this.columnIN = this.Columns["IN"];
                this.columnOUT = this.Columns["OUT"];
            }
            
            private void InitClass() {
                this.columnAccountStatementID = new DataColumn("AccountStatementID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountStatementID);
                this.columnHeaderID = new DataColumn("HeaderID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderID);
                this.columnPaymentOrderDate = new DataColumn("PaymentOrderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderDate);
                this.columnPaymentNo = new DataColumn("PaymentNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentNo);
                this.columnOrgAccountIDCorr = new DataColumn("OrgAccountIDCorr", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgAccountIDCorr);
                this.columnDirection = new DataColumn("Direction", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDirection);
                this.columnPaymentOrderSum = new DataColumn("PaymentOrderSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderSum);
                this.columnPaymentOrderPurpose = new DataColumn("PaymentOrderPurpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderPurpose);
                this.columnRemarks = new DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRemarks);
                this.columnAccountID = new DataColumn("AccountID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountID);
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.columnRAccount = new DataColumn("RAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccount);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyID);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnIsInner = new DataColumn("IsInner", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInner);
                this.columnIsNormal = new DataColumn("IsNormal", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsNormal);
                this.columnExpr1 = new DataColumn("Expr1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr1);
                this.columnOrgsAccountsID = new DataColumn("OrgsAccountsID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgsAccountsID);
                this.columnExpr2 = new DataColumn("Expr2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr2);
                this.columnIN = new DataColumn("IN", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIN);
                this.columnOUT = new DataColumn("OUT", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOUT);
                this.Constraints.Add(new UniqueConstraint("dsAccountsStatementsListKey1", new DataColumn[] {
                                this.columnAccountStatementID}, false));
                this.columnAccountStatementID.AutoIncrement = true;
                this.columnAccountStatementID.AllowDBNull = false;
                this.columnAccountStatementID.ReadOnly = true;
                this.columnAccountStatementID.Unique = true;
                this.columnHeaderID.AllowDBNull = false;
                this.columnPaymentOrderDate.AllowDBNull = false;
                this.columnPaymentNo.AllowDBNull = false;
                this.columnOrgAccountIDCorr.AllowDBNull = false;
                this.columnDirection.AllowDBNull = false;
                this.columnPaymentOrderSum.AllowDBNull = false;
                this.columnAccountID.AllowDBNull = false;
                this.columnOrgID.AllowDBNull = false;
                this.columnRAccount.AllowDBNull = false;
                this.columnCurrencyID.AllowDBNull = false;
                this.columnOrgName.AllowDBNull = false;
                this.columnIsInner.AllowDBNull = false;
                this.columnIsNormal.AllowDBNull = false;
                this.columnExpr1.AutoIncrement = true;
                this.columnExpr1.AllowDBNull = false;
                this.columnExpr1.ReadOnly = true;
                this.columnOrgsAccountsID.AutoIncrement = true;
                this.columnOrgsAccountsID.AllowDBNull = false;
                this.columnOrgsAccountsID.ReadOnly = true;
                this.columnExpr2.AutoIncrement = true;
                this.columnExpr2.AllowDBNull = false;
                this.columnExpr2.ReadOnly = true;
                this.columnIN.ReadOnly = true;
                this.columnOUT.ReadOnly = true;
            }
            
            public AccountsStatementsRow NewAccountsStatementsRow() {
                return ((AccountsStatementsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AccountsStatementsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AccountsStatementsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountsStatementsRowChanged != null)) {
                    this.AccountsStatementsRowChanged(this, new AccountsStatementsRowChangeEvent(((AccountsStatementsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountsStatementsRowChanging != null)) {
                    this.AccountsStatementsRowChanging(this, new AccountsStatementsRowChangeEvent(((AccountsStatementsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountsStatementsRowDeleted != null)) {
                    this.AccountsStatementsRowDeleted(this, new AccountsStatementsRowChangeEvent(((AccountsStatementsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountsStatementsRowDeleting != null)) {
                    this.AccountsStatementsRowDeleting(this, new AccountsStatementsRowChangeEvent(((AccountsStatementsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAccountsStatementsRow(AccountsStatementsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsRow : DataRow {
            
            private AccountsStatementsDataTable tableAccountsStatements;
            
            internal AccountsStatementsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccountsStatements = ((AccountsStatementsDataTable)(this.Table));
            }
            
            public int AccountStatementID {
                get {
                    return ((int)(this[this.tableAccountsStatements.AccountStatementIDColumn]));
                }
                set {
                    this[this.tableAccountsStatements.AccountStatementIDColumn] = value;
                }
            }
            
            public int HeaderID {
                get {
                    return ((int)(this[this.tableAccountsStatements.HeaderIDColumn]));
                }
                set {
                    this[this.tableAccountsStatements.HeaderIDColumn] = value;
                }
            }
            
            public System.DateTime PaymentOrderDate {
                get {
                    return ((System.DateTime)(this[this.tableAccountsStatements.PaymentOrderDateColumn]));
                }
                set {
                    this[this.tableAccountsStatements.PaymentOrderDateColumn] = value;
                }
            }
            
            public string PaymentNo {
                get {
                    return ((string)(this[this.tableAccountsStatements.PaymentNoColumn]));
                }
                set {
                    this[this.tableAccountsStatements.PaymentNoColumn] = value;
                }
            }
            
            public int OrgAccountIDCorr {
                get {
                    return ((int)(this[this.tableAccountsStatements.OrgAccountIDCorrColumn]));
                }
                set {
                    this[this.tableAccountsStatements.OrgAccountIDCorrColumn] = value;
                }
            }
            
            public bool Direction {
                get {
                    return ((bool)(this[this.tableAccountsStatements.DirectionColumn]));
                }
                set {
                    this[this.tableAccountsStatements.DirectionColumn] = value;
                }
            }
            
            public System.Double PaymentOrderSum {
                get {
                    return ((System.Double)(this[this.tableAccountsStatements.PaymentOrderSumColumn]));
                }
                set {
                    this[this.tableAccountsStatements.PaymentOrderSumColumn] = value;
                }
            }
            
            public string PaymentOrderPurpose {
                get {
                    try {
                        return ((string)(this[this.tableAccountsStatements.PaymentOrderPurposeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountsStatements.PaymentOrderPurposeColumn] = value;
                }
            }
            
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableAccountsStatements.RemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountsStatements.RemarksColumn] = value;
                }
            }
            
            public int AccountID {
                get {
                    return ((int)(this[this.tableAccountsStatements.AccountIDColumn]));
                }
                set {
                    this[this.tableAccountsStatements.AccountIDColumn] = value;
                }
            }
            
            public int OrgID {
                get {
                    return ((int)(this[this.tableAccountsStatements.OrgIDColumn]));
                }
                set {
                    this[this.tableAccountsStatements.OrgIDColumn] = value;
                }
            }
            
            public string RAccount {
                get {
                    return ((string)(this[this.tableAccountsStatements.RAccountColumn]));
                }
                set {
                    this[this.tableAccountsStatements.RAccountColumn] = value;
                }
            }
            
            public string CurrencyID {
                get {
                    return ((string)(this[this.tableAccountsStatements.CurrencyIDColumn]));
                }
                set {
                    this[this.tableAccountsStatements.CurrencyIDColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    return ((string)(this[this.tableAccountsStatements.OrgNameColumn]));
                }
                set {
                    this[this.tableAccountsStatements.OrgNameColumn] = value;
                }
            }
            
            public bool IsInner {
                get {
                    return ((bool)(this[this.tableAccountsStatements.IsInnerColumn]));
                }
                set {
                    this[this.tableAccountsStatements.IsInnerColumn] = value;
                }
            }
            
            public bool IsNormal {
                get {
                    return ((bool)(this[this.tableAccountsStatements.IsNormalColumn]));
                }
                set {
                    this[this.tableAccountsStatements.IsNormalColumn] = value;
                }
            }
            
            public int Expr1 {
                get {
                    return ((int)(this[this.tableAccountsStatements.Expr1Column]));
                }
                set {
                    this[this.tableAccountsStatements.Expr1Column] = value;
                }
            }
            
            public int OrgsAccountsID {
                get {
                    return ((int)(this[this.tableAccountsStatements.OrgsAccountsIDColumn]));
                }
                set {
                    this[this.tableAccountsStatements.OrgsAccountsIDColumn] = value;
                }
            }
            
            public int Expr2 {
                get {
                    return ((int)(this[this.tableAccountsStatements.Expr2Column]));
                }
                set {
                    this[this.tableAccountsStatements.Expr2Column] = value;
                }
            }
            
            public System.Double IN {
                get {
                    try {
                        return ((System.Double)(this[this.tableAccountsStatements.INColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountsStatements.INColumn] = value;
                }
            }
            
            public System.Double OUT {
                get {
                    try {
                        return ((System.Double)(this[this.tableAccountsStatements.OUTColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountsStatements.OUTColumn] = value;
                }
            }
            
            public bool IsPaymentOrderPurposeNull() {
                return this.IsNull(this.tableAccountsStatements.PaymentOrderPurposeColumn);
            }
            
            public void SetPaymentOrderPurposeNull() {
                this[this.tableAccountsStatements.PaymentOrderPurposeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRemarksNull() {
                return this.IsNull(this.tableAccountsStatements.RemarksColumn);
            }
            
            public void SetRemarksNull() {
                this[this.tableAccountsStatements.RemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsINNull() {
                return this.IsNull(this.tableAccountsStatements.INColumn);
            }
            
            public void SetINNull() {
                this[this.tableAccountsStatements.INColumn] = System.Convert.DBNull;
            }
            
            public bool IsOUTNull() {
                return this.IsNull(this.tableAccountsStatements.OUTColumn);
            }
            
            public void SetOUTNull() {
                this[this.tableAccountsStatements.OUTColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsRowChangeEvent : EventArgs {
            
            private AccountsStatementsRow eventRow;
            
            private DataRowAction eventAction;
            
            public AccountsStatementsRowChangeEvent(AccountsStatementsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AccountsStatementsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
