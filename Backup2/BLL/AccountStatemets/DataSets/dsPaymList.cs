//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS._Forms {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsPaymList : DataSet {
        
        private PaymentOrderDataTable tablePaymentOrder;
        
        public dsPaymList() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsPaymList(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PaymentOrder"] != null)) {
                    this.Tables.Add(new PaymentOrderDataTable(ds.Tables["PaymentOrder"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentOrderDataTable PaymentOrder {
            get {
                return this.tablePaymentOrder;
            }
        }
        
        public override DataSet Clone() {
            dsPaymList cln = ((dsPaymList)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["PaymentOrder"] != null)) {
                this.Tables.Add(new PaymentOrderDataTable(ds.Tables["PaymentOrder"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePaymentOrder = ((PaymentOrderDataTable)(this.Tables["PaymentOrder"]));
            if ((this.tablePaymentOrder != null)) {
                this.tablePaymentOrder.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsPaymList";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsPaymList.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePaymentOrder = new PaymentOrderDataTable();
            this.Tables.Add(this.tablePaymentOrder);
        }
        
        private bool ShouldSerializePaymentOrder() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PaymentOrderRowChangeEventHandler(object sender, PaymentOrderRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentOrderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRAccount;
            
            private DataColumn columnOrgsAccountsTo_RAccount;
            
            private DataColumn columnBankName;
            
            private DataColumn columnKAccount;
            
            private DataColumn columnOrgName;
            
            private DataColumn columnOrgsTo_OrgName;
            
            private DataColumn columnBanksTo_BankName;
            
            private DataColumn columnBanksTo_KAccount;
            
            private DataColumn columnPaymentOrderID;
            
            private DataColumn columnPaymentOrderDate;
            
            private DataColumn columnOrgAccountIDFrom;
            
            private DataColumn columnOrgAccountIDTo;
            
            private DataColumn columnPaymentOrderSum;
            
            private DataColumn columnPaymentOrderPurpose;
            
            private DataColumn columnCreatedAt;
            
            private DataColumn columnModifiedAt;
            
            private DataColumn columnConfirmedAt;
            
            private DataColumn columnOperCreated;
            
            private DataColumn columnOperModified;
            
            private DataColumn columnOperConfirmed;
            
            private DataColumn columnConfirmed;
            
            private DataColumn columnRemarks;
            
            private DataColumn columnBankID;
            
            private DataColumn columnAccountID;
            
            private DataColumn columnOrgID;
            
            private DataColumn columnExpr1;
            
            private DataColumn columnExpr2;
            
            private DataColumn columnExpr3;
            
            private DataColumn columnPaymentNo;
            
            private DataColumn columnIsInner;
            
            private DataColumn columnIsInnerTo;
            
            private DataColumn columnCurrencyID;
            
            private DataColumn columnCurrencyIDTo;
            
            private DataColumn columnDocumentIDFrom;
            
            private DataColumn columnStateFrom;
            
            private DataColumn columnStateTo;
            
            private DataColumn columnOperationID;
            
            private DataColumn columnOperationIDTo;
            
            private DataColumn columnDocumentIDTo;
            
            internal PaymentOrderDataTable() : 
                    base("PaymentOrder") {
                this.InitClass();
            }
            
            internal PaymentOrderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RAccountColumn {
                get {
                    return this.columnRAccount;
                }
            }
            
            internal DataColumn OrgsAccountsTo_RAccountColumn {
                get {
                    return this.columnOrgsAccountsTo_RAccount;
                }
            }
            
            internal DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            internal DataColumn KAccountColumn {
                get {
                    return this.columnKAccount;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            internal DataColumn OrgsTo_OrgNameColumn {
                get {
                    return this.columnOrgsTo_OrgName;
                }
            }
            
            internal DataColumn BanksTo_BankNameColumn {
                get {
                    return this.columnBanksTo_BankName;
                }
            }
            
            internal DataColumn BanksTo_KAccountColumn {
                get {
                    return this.columnBanksTo_KAccount;
                }
            }
            
            internal DataColumn PaymentOrderIDColumn {
                get {
                    return this.columnPaymentOrderID;
                }
            }
            
            internal DataColumn PaymentOrderDateColumn {
                get {
                    return this.columnPaymentOrderDate;
                }
            }
            
            internal DataColumn OrgAccountIDFromColumn {
                get {
                    return this.columnOrgAccountIDFrom;
                }
            }
            
            internal DataColumn OrgAccountIDToColumn {
                get {
                    return this.columnOrgAccountIDTo;
                }
            }
            
            internal DataColumn PaymentOrderSumColumn {
                get {
                    return this.columnPaymentOrderSum;
                }
            }
            
            internal DataColumn PaymentOrderPurposeColumn {
                get {
                    return this.columnPaymentOrderPurpose;
                }
            }
            
            internal DataColumn CreatedAtColumn {
                get {
                    return this.columnCreatedAt;
                }
            }
            
            internal DataColumn ModifiedAtColumn {
                get {
                    return this.columnModifiedAt;
                }
            }
            
            internal DataColumn ConfirmedAtColumn {
                get {
                    return this.columnConfirmedAt;
                }
            }
            
            internal DataColumn OperCreatedColumn {
                get {
                    return this.columnOperCreated;
                }
            }
            
            internal DataColumn OperModifiedColumn {
                get {
                    return this.columnOperModified;
                }
            }
            
            internal DataColumn OperConfirmedColumn {
                get {
                    return this.columnOperConfirmed;
                }
            }
            
            internal DataColumn ConfirmedColumn {
                get {
                    return this.columnConfirmed;
                }
            }
            
            internal DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            internal DataColumn BankIDColumn {
                get {
                    return this.columnBankID;
                }
            }
            
            internal DataColumn AccountIDColumn {
                get {
                    return this.columnAccountID;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            internal DataColumn Expr1Column {
                get {
                    return this.columnExpr1;
                }
            }
            
            internal DataColumn Expr2Column {
                get {
                    return this.columnExpr2;
                }
            }
            
            internal DataColumn Expr3Column {
                get {
                    return this.columnExpr3;
                }
            }
            
            internal DataColumn PaymentNoColumn {
                get {
                    return this.columnPaymentNo;
                }
            }
            
            internal DataColumn IsInnerColumn {
                get {
                    return this.columnIsInner;
                }
            }
            
            internal DataColumn IsInnerToColumn {
                get {
                    return this.columnIsInnerTo;
                }
            }
            
            internal DataColumn CurrencyIDColumn {
                get {
                    return this.columnCurrencyID;
                }
            }
            
            internal DataColumn CurrencyIDToColumn {
                get {
                    return this.columnCurrencyIDTo;
                }
            }
            
            internal DataColumn DocumentIDFromColumn {
                get {
                    return this.columnDocumentIDFrom;
                }
            }
            
            internal DataColumn StateFromColumn {
                get {
                    return this.columnStateFrom;
                }
            }
            
            internal DataColumn StateToColumn {
                get {
                    return this.columnStateTo;
                }
            }
            
            internal DataColumn OperationIDColumn {
                get {
                    return this.columnOperationID;
                }
            }
            
            internal DataColumn OperationIDToColumn {
                get {
                    return this.columnOperationIDTo;
                }
            }
            
            internal DataColumn DocumentIDToColumn {
                get {
                    return this.columnDocumentIDTo;
                }
            }
            
            public PaymentOrderRow this[int index] {
                get {
                    return ((PaymentOrderRow)(this.Rows[index]));
                }
            }
            
            public event PaymentOrderRowChangeEventHandler PaymentOrderRowChanged;
            
            public event PaymentOrderRowChangeEventHandler PaymentOrderRowChanging;
            
            public event PaymentOrderRowChangeEventHandler PaymentOrderRowDeleted;
            
            public event PaymentOrderRowChangeEventHandler PaymentOrderRowDeleting;
            
            public void AddPaymentOrderRow(PaymentOrderRow row) {
                this.Rows.Add(row);
            }
            
            public PaymentOrderRow AddPaymentOrderRow(
                        string RAccount, 
                        string OrgsAccountsTo_RAccount, 
                        string BankName, 
                        string KAccount, 
                        string OrgName, 
                        string OrgsTo_OrgName, 
                        string BanksTo_BankName, 
                        string BanksTo_KAccount, 
                        System.DateTime PaymentOrderDate, 
                        int OrgAccountIDFrom, 
                        int OrgAccountIDTo, 
                        System.Double PaymentOrderSum, 
                        string PaymentOrderPurpose, 
                        System.DateTime CreatedAt, 
                        System.DateTime ModifiedAt, 
                        System.DateTime ConfirmedAt, 
                        int OperCreated, 
                        int OperModified, 
                        int OperConfirmed, 
                        bool Confirmed, 
                        string Remarks, 
                        int AccountID, 
                        int Expr2, 
                        string PaymentNo, 
                        bool IsInner, 
                        bool IsInnerTo, 
                        string CurrencyID, 
                        string CurrencyIDTo, 
                        int DocumentIDFrom, 
                        bool StateFrom, 
                        bool StateTo, 
                        int DocumentIDTo) {
                PaymentOrderRow rowPaymentOrderRow = ((PaymentOrderRow)(this.NewRow()));
                rowPaymentOrderRow.ItemArray = new object[] {
                        RAccount,
                        OrgsAccountsTo_RAccount,
                        BankName,
                        KAccount,
                        OrgName,
                        OrgsTo_OrgName,
                        BanksTo_BankName,
                        BanksTo_KAccount,
                        null,
                        PaymentOrderDate,
                        OrgAccountIDFrom,
                        OrgAccountIDTo,
                        PaymentOrderSum,
                        PaymentOrderPurpose,
                        CreatedAt,
                        ModifiedAt,
                        ConfirmedAt,
                        OperCreated,
                        OperModified,
                        OperConfirmed,
                        Confirmed,
                        Remarks,
                        null,
                        AccountID,
                        null,
                        null,
                        Expr2,
                        null,
                        PaymentNo,
                        IsInner,
                        IsInnerTo,
                        CurrencyID,
                        CurrencyIDTo,
                        DocumentIDFrom,
                        StateFrom,
                        StateTo,
                        null,
                        null,
                        DocumentIDTo};
                this.Rows.Add(rowPaymentOrderRow);
                return rowPaymentOrderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PaymentOrderDataTable cln = ((PaymentOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PaymentOrderDataTable();
            }
            
            internal void InitVars() {
                this.columnRAccount = this.Columns["RAccount"];
                this.columnOrgsAccountsTo_RAccount = this.Columns["OrgsAccountsTo_RAccount"];
                this.columnBankName = this.Columns["BankName"];
                this.columnKAccount = this.Columns["KAccount"];
                this.columnOrgName = this.Columns["OrgName"];
                this.columnOrgsTo_OrgName = this.Columns["OrgsTo_OrgName"];
                this.columnBanksTo_BankName = this.Columns["BanksTo_BankName"];
                this.columnBanksTo_KAccount = this.Columns["BanksTo_KAccount"];
                this.columnPaymentOrderID = this.Columns["PaymentOrderID"];
                this.columnPaymentOrderDate = this.Columns["PaymentOrderDate"];
                this.columnOrgAccountIDFrom = this.Columns["OrgAccountIDFrom"];
                this.columnOrgAccountIDTo = this.Columns["OrgAccountIDTo"];
                this.columnPaymentOrderSum = this.Columns["PaymentOrderSum"];
                this.columnPaymentOrderPurpose = this.Columns["PaymentOrderPurpose"];
                this.columnCreatedAt = this.Columns["CreatedAt"];
                this.columnModifiedAt = this.Columns["ModifiedAt"];
                this.columnConfirmedAt = this.Columns["ConfirmedAt"];
                this.columnOperCreated = this.Columns["OperCreated"];
                this.columnOperModified = this.Columns["OperModified"];
                this.columnOperConfirmed = this.Columns["OperConfirmed"];
                this.columnConfirmed = this.Columns["Confirmed"];
                this.columnRemarks = this.Columns["Remarks"];
                this.columnBankID = this.Columns["BankID"];
                this.columnAccountID = this.Columns["AccountID"];
                this.columnOrgID = this.Columns["OrgID"];
                this.columnExpr1 = this.Columns["Expr1"];
                this.columnExpr2 = this.Columns["Expr2"];
                this.columnExpr3 = this.Columns["Expr3"];
                this.columnPaymentNo = this.Columns["PaymentNo"];
                this.columnIsInner = this.Columns["IsInner"];
                this.columnIsInnerTo = this.Columns["IsInnerTo"];
                this.columnCurrencyID = this.Columns["CurrencyID"];
                this.columnCurrencyIDTo = this.Columns["CurrencyIDTo"];
                this.columnDocumentIDFrom = this.Columns["DocumentIDFrom"];
                this.columnStateFrom = this.Columns["StateFrom"];
                this.columnStateTo = this.Columns["StateTo"];
                this.columnOperationID = this.Columns["OperationID"];
                this.columnOperationIDTo = this.Columns["OperationIDTo"];
                this.columnDocumentIDTo = this.Columns["DocumentIDTo"];
            }
            
            private void InitClass() {
                this.columnRAccount = new DataColumn("RAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccount);
                this.columnOrgsAccountsTo_RAccount = new DataColumn("OrgsAccountsTo_RAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgsAccountsTo_RAccount);
                this.columnBankName = new DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankName);
                this.columnKAccount = new DataColumn("KAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnKAccount);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnOrgsTo_OrgName = new DataColumn("OrgsTo_OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgsTo_OrgName);
                this.columnBanksTo_BankName = new DataColumn("BanksTo_BankName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBanksTo_BankName);
                this.columnBanksTo_KAccount = new DataColumn("BanksTo_KAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBanksTo_KAccount);
                this.columnPaymentOrderID = new DataColumn("PaymentOrderID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderID);
                this.columnPaymentOrderDate = new DataColumn("PaymentOrderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderDate);
                this.columnOrgAccountIDFrom = new DataColumn("OrgAccountIDFrom", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgAccountIDFrom);
                this.columnOrgAccountIDTo = new DataColumn("OrgAccountIDTo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgAccountIDTo);
                this.columnPaymentOrderSum = new DataColumn("PaymentOrderSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderSum);
                this.columnPaymentOrderPurpose = new DataColumn("PaymentOrderPurpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderPurpose);
                this.columnCreatedAt = new DataColumn("CreatedAt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedAt);
                this.columnModifiedAt = new DataColumn("ModifiedAt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedAt);
                this.columnConfirmedAt = new DataColumn("ConfirmedAt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfirmedAt);
                this.columnOperCreated = new DataColumn("OperCreated", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOperCreated);
                this.columnOperModified = new DataColumn("OperModified", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOperModified);
                this.columnOperConfirmed = new DataColumn("OperConfirmed", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOperConfirmed);
                this.columnConfirmed = new DataColumn("Confirmed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfirmed);
                this.columnRemarks = new DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRemarks);
                this.columnBankID = new DataColumn("BankID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankID);
                this.columnAccountID = new DataColumn("AccountID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountID);
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.columnExpr1 = new DataColumn("Expr1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr1);
                this.columnExpr2 = new DataColumn("Expr2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr2);
                this.columnExpr3 = new DataColumn("Expr3", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr3);
                this.columnPaymentNo = new DataColumn("PaymentNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentNo);
                this.columnIsInner = new DataColumn("IsInner", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInner);
                this.columnIsInnerTo = new DataColumn("IsInnerTo", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInnerTo);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyID);
                this.columnCurrencyIDTo = new DataColumn("CurrencyIDTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyIDTo);
                this.columnDocumentIDFrom = new DataColumn("DocumentIDFrom", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDocumentIDFrom);
                this.columnStateFrom = new DataColumn("StateFrom", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateFrom);
                this.columnStateTo = new DataColumn("StateTo", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateTo);
                this.columnOperationID = new DataColumn("OperationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOperationID);
                this.columnOperationIDTo = new DataColumn("OperationIDTo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOperationIDTo);
                this.columnDocumentIDTo = new DataColumn("DocumentIDTo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDocumentIDTo);
                this.columnRAccount.AllowDBNull = false;
                this.columnOrgsAccountsTo_RAccount.AllowDBNull = false;
                this.columnBankName.AllowDBNull = false;
                this.columnKAccount.AllowDBNull = false;
                this.columnOrgName.AllowDBNull = false;
                this.columnOrgsTo_OrgName.AllowDBNull = false;
                this.columnBanksTo_BankName.AllowDBNull = false;
                this.columnBanksTo_KAccount.AllowDBNull = false;
                this.columnPaymentOrderID.AutoIncrement = true;
                this.columnPaymentOrderID.AllowDBNull = false;
                this.columnPaymentOrderID.ReadOnly = true;
                this.columnPaymentOrderDate.AllowDBNull = false;
                this.columnOrgAccountIDFrom.AllowDBNull = false;
                this.columnOrgAccountIDTo.AllowDBNull = false;
                this.columnPaymentOrderSum.AllowDBNull = false;
                this.columnPaymentOrderPurpose.AllowDBNull = false;
                this.columnCreatedAt.AllowDBNull = false;
                this.columnModifiedAt.AllowDBNull = false;
                this.columnOperCreated.AllowDBNull = false;
                this.columnOperModified.AllowDBNull = false;
                this.columnConfirmed.AllowDBNull = false;
                this.columnRemarks.AllowDBNull = false;
                this.columnBankID.AutoIncrement = true;
                this.columnBankID.AllowDBNull = false;
                this.columnBankID.ReadOnly = true;
                this.columnAccountID.AllowDBNull = false;
                this.columnOrgID.AutoIncrement = true;
                this.columnOrgID.AllowDBNull = false;
                this.columnOrgID.ReadOnly = true;
                this.columnExpr1.AutoIncrement = true;
                this.columnExpr1.AllowDBNull = false;
                this.columnExpr1.ReadOnly = true;
                this.columnExpr2.AllowDBNull = false;
                this.columnExpr3.AutoIncrement = true;
                this.columnExpr3.AllowDBNull = false;
                this.columnExpr3.ReadOnly = true;
                this.columnPaymentNo.AllowDBNull = false;
                this.columnIsInner.AllowDBNull = false;
                this.columnIsInnerTo.AllowDBNull = false;
                this.columnCurrencyID.AllowDBNull = false;
                this.columnCurrencyIDTo.AllowDBNull = false;
                this.columnOperationID.AutoIncrement = true;
                this.columnOperationID.ReadOnly = true;
                this.columnOperationIDTo.AutoIncrement = true;
                this.columnOperationIDTo.ReadOnly = true;
            }
            
            public PaymentOrderRow NewPaymentOrderRow() {
                return ((PaymentOrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PaymentOrderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PaymentOrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentOrderRowChanged != null)) {
                    this.PaymentOrderRowChanged(this, new PaymentOrderRowChangeEvent(((PaymentOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentOrderRowChanging != null)) {
                    this.PaymentOrderRowChanging(this, new PaymentOrderRowChangeEvent(((PaymentOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentOrderRowDeleted != null)) {
                    this.PaymentOrderRowDeleted(this, new PaymentOrderRowChangeEvent(((PaymentOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentOrderRowDeleting != null)) {
                    this.PaymentOrderRowDeleting(this, new PaymentOrderRowChangeEvent(((PaymentOrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePaymentOrderRow(PaymentOrderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentOrderRow : DataRow {
            
            private PaymentOrderDataTable tablePaymentOrder;
            
            internal PaymentOrderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaymentOrder = ((PaymentOrderDataTable)(this.Table));
            }
            
            public string RAccount {
                get {
                    return ((string)(this[this.tablePaymentOrder.RAccountColumn]));
                }
                set {
                    this[this.tablePaymentOrder.RAccountColumn] = value;
                }
            }
            
            public string OrgsAccountsTo_RAccount {
                get {
                    return ((string)(this[this.tablePaymentOrder.OrgsAccountsTo_RAccountColumn]));
                }
                set {
                    this[this.tablePaymentOrder.OrgsAccountsTo_RAccountColumn] = value;
                }
            }
            
            public string BankName {
                get {
                    return ((string)(this[this.tablePaymentOrder.BankNameColumn]));
                }
                set {
                    this[this.tablePaymentOrder.BankNameColumn] = value;
                }
            }
            
            public string KAccount {
                get {
                    return ((string)(this[this.tablePaymentOrder.KAccountColumn]));
                }
                set {
                    this[this.tablePaymentOrder.KAccountColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    return ((string)(this[this.tablePaymentOrder.OrgNameColumn]));
                }
                set {
                    this[this.tablePaymentOrder.OrgNameColumn] = value;
                }
            }
            
            public string OrgsTo_OrgName {
                get {
                    return ((string)(this[this.tablePaymentOrder.OrgsTo_OrgNameColumn]));
                }
                set {
                    this[this.tablePaymentOrder.OrgsTo_OrgNameColumn] = value;
                }
            }
            
            public string BanksTo_BankName {
                get {
                    return ((string)(this[this.tablePaymentOrder.BanksTo_BankNameColumn]));
                }
                set {
                    this[this.tablePaymentOrder.BanksTo_BankNameColumn] = value;
                }
            }
            
            public string BanksTo_KAccount {
                get {
                    return ((string)(this[this.tablePaymentOrder.BanksTo_KAccountColumn]));
                }
                set {
                    this[this.tablePaymentOrder.BanksTo_KAccountColumn] = value;
                }
            }
            
            public int PaymentOrderID {
                get {
                    return ((int)(this[this.tablePaymentOrder.PaymentOrderIDColumn]));
                }
                set {
                    this[this.tablePaymentOrder.PaymentOrderIDColumn] = value;
                }
            }
            
            public System.DateTime PaymentOrderDate {
                get {
                    return ((System.DateTime)(this[this.tablePaymentOrder.PaymentOrderDateColumn]));
                }
                set {
                    this[this.tablePaymentOrder.PaymentOrderDateColumn] = value;
                }
            }
            
            public int OrgAccountIDFrom {
                get {
                    return ((int)(this[this.tablePaymentOrder.OrgAccountIDFromColumn]));
                }
                set {
                    this[this.tablePaymentOrder.OrgAccountIDFromColumn] = value;
                }
            }
            
            public int OrgAccountIDTo {
                get {
                    return ((int)(this[this.tablePaymentOrder.OrgAccountIDToColumn]));
                }
                set {
                    this[this.tablePaymentOrder.OrgAccountIDToColumn] = value;
                }
            }
            
            public System.Double PaymentOrderSum {
                get {
                    return ((System.Double)(this[this.tablePaymentOrder.PaymentOrderSumColumn]));
                }
                set {
                    this[this.tablePaymentOrder.PaymentOrderSumColumn] = value;
                }
            }
            
            public string PaymentOrderPurpose {
                get {
                    return ((string)(this[this.tablePaymentOrder.PaymentOrderPurposeColumn]));
                }
                set {
                    this[this.tablePaymentOrder.PaymentOrderPurposeColumn] = value;
                }
            }
            
            public System.DateTime CreatedAt {
                get {
                    return ((System.DateTime)(this[this.tablePaymentOrder.CreatedAtColumn]));
                }
                set {
                    this[this.tablePaymentOrder.CreatedAtColumn] = value;
                }
            }
            
            public System.DateTime ModifiedAt {
                get {
                    return ((System.DateTime)(this[this.tablePaymentOrder.ModifiedAtColumn]));
                }
                set {
                    this[this.tablePaymentOrder.ModifiedAtColumn] = value;
                }
            }
            
            public System.DateTime ConfirmedAt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePaymentOrder.ConfirmedAtColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentOrder.ConfirmedAtColumn] = value;
                }
            }
            
            public int OperCreated {
                get {
                    return ((int)(this[this.tablePaymentOrder.OperCreatedColumn]));
                }
                set {
                    this[this.tablePaymentOrder.OperCreatedColumn] = value;
                }
            }
            
            public int OperModified {
                get {
                    return ((int)(this[this.tablePaymentOrder.OperModifiedColumn]));
                }
                set {
                    this[this.tablePaymentOrder.OperModifiedColumn] = value;
                }
            }
            
            public int OperConfirmed {
                get {
                    try {
                        return ((int)(this[this.tablePaymentOrder.OperConfirmedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentOrder.OperConfirmedColumn] = value;
                }
            }
            
            public bool Confirmed {
                get {
                    return ((bool)(this[this.tablePaymentOrder.ConfirmedColumn]));
                }
                set {
                    this[this.tablePaymentOrder.ConfirmedColumn] = value;
                }
            }
            
            public string Remarks {
                get {
                    return ((string)(this[this.tablePaymentOrder.RemarksColumn]));
                }
                set {
                    this[this.tablePaymentOrder.RemarksColumn] = value;
                }
            }
            
            public int BankID {
                get {
                    return ((int)(this[this.tablePaymentOrder.BankIDColumn]));
                }
                set {
                    this[this.tablePaymentOrder.BankIDColumn] = value;
                }
            }
            
            public int AccountID {
                get {
                    return ((int)(this[this.tablePaymentOrder.AccountIDColumn]));
                }
                set {
                    this[this.tablePaymentOrder.AccountIDColumn] = value;
                }
            }
            
            public int OrgID {
                get {
                    return ((int)(this[this.tablePaymentOrder.OrgIDColumn]));
                }
                set {
                    this[this.tablePaymentOrder.OrgIDColumn] = value;
                }
            }
            
            public int Expr1 {
                get {
                    return ((int)(this[this.tablePaymentOrder.Expr1Column]));
                }
                set {
                    this[this.tablePaymentOrder.Expr1Column] = value;
                }
            }
            
            public int Expr2 {
                get {
                    return ((int)(this[this.tablePaymentOrder.Expr2Column]));
                }
                set {
                    this[this.tablePaymentOrder.Expr2Column] = value;
                }
            }
            
            public int Expr3 {
                get {
                    return ((int)(this[this.tablePaymentOrder.Expr3Column]));
                }
                set {
                    this[this.tablePaymentOrder.Expr3Column] = value;
                }
            }
            
            public string PaymentNo {
                get {
                    return ((string)(this[this.tablePaymentOrder.PaymentNoColumn]));
                }
                set {
                    this[this.tablePaymentOrder.PaymentNoColumn] = value;
                }
            }
            
            public bool IsInner {
                get {
                    return ((bool)(this[this.tablePaymentOrder.IsInnerColumn]));
                }
                set {
                    this[this.tablePaymentOrder.IsInnerColumn] = value;
                }
            }
            
            public bool IsInnerTo {
                get {
                    return ((bool)(this[this.tablePaymentOrder.IsInnerToColumn]));
                }
                set {
                    this[this.tablePaymentOrder.IsInnerToColumn] = value;
                }
            }
            
            public string CurrencyID {
                get {
                    return ((string)(this[this.tablePaymentOrder.CurrencyIDColumn]));
                }
                set {
                    this[this.tablePaymentOrder.CurrencyIDColumn] = value;
                }
            }
            
            public string CurrencyIDTo {
                get {
                    return ((string)(this[this.tablePaymentOrder.CurrencyIDToColumn]));
                }
                set {
                    this[this.tablePaymentOrder.CurrencyIDToColumn] = value;
                }
            }
            
            public int DocumentIDFrom {
                get {
                    try {
                        return ((int)(this[this.tablePaymentOrder.DocumentIDFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentOrder.DocumentIDFromColumn] = value;
                }
            }
            
            public bool StateFrom {
                get {
                    try {
                        return ((bool)(this[this.tablePaymentOrder.StateFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentOrder.StateFromColumn] = value;
                }
            }
            
            public bool StateTo {
                get {
                    try {
                        return ((bool)(this[this.tablePaymentOrder.StateToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentOrder.StateToColumn] = value;
                }
            }
            
            public int OperationID {
                get {
                    try {
                        return ((int)(this[this.tablePaymentOrder.OperationIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentOrder.OperationIDColumn] = value;
                }
            }
            
            public int OperationIDTo {
                get {
                    try {
                        return ((int)(this[this.tablePaymentOrder.OperationIDToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentOrder.OperationIDToColumn] = value;
                }
            }
            
            public int DocumentIDTo {
                get {
                    try {
                        return ((int)(this[this.tablePaymentOrder.DocumentIDToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentOrder.DocumentIDToColumn] = value;
                }
            }
            
            public bool IsConfirmedAtNull() {
                return this.IsNull(this.tablePaymentOrder.ConfirmedAtColumn);
            }
            
            public void SetConfirmedAtNull() {
                this[this.tablePaymentOrder.ConfirmedAtColumn] = System.Convert.DBNull;
            }
            
            public bool IsOperConfirmedNull() {
                return this.IsNull(this.tablePaymentOrder.OperConfirmedColumn);
            }
            
            public void SetOperConfirmedNull() {
                this[this.tablePaymentOrder.OperConfirmedColumn] = System.Convert.DBNull;
            }
            
            public bool IsDocumentIDFromNull() {
                return this.IsNull(this.tablePaymentOrder.DocumentIDFromColumn);
            }
            
            public void SetDocumentIDFromNull() {
                this[this.tablePaymentOrder.DocumentIDFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateFromNull() {
                return this.IsNull(this.tablePaymentOrder.StateFromColumn);
            }
            
            public void SetStateFromNull() {
                this[this.tablePaymentOrder.StateFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateToNull() {
                return this.IsNull(this.tablePaymentOrder.StateToColumn);
            }
            
            public void SetStateToNull() {
                this[this.tablePaymentOrder.StateToColumn] = System.Convert.DBNull;
            }
            
            public bool IsOperationIDNull() {
                return this.IsNull(this.tablePaymentOrder.OperationIDColumn);
            }
            
            public void SetOperationIDNull() {
                this[this.tablePaymentOrder.OperationIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsOperationIDToNull() {
                return this.IsNull(this.tablePaymentOrder.OperationIDToColumn);
            }
            
            public void SetOperationIDToNull() {
                this[this.tablePaymentOrder.OperationIDToColumn] = System.Convert.DBNull;
            }
            
            public bool IsDocumentIDToNull() {
                return this.IsNull(this.tablePaymentOrder.DocumentIDToColumn);
            }
            
            public void SetDocumentIDToNull() {
                this[this.tablePaymentOrder.DocumentIDToColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentOrderRowChangeEvent : EventArgs {
            
            private PaymentOrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public PaymentOrderRowChangeEvent(PaymentOrderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PaymentOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
