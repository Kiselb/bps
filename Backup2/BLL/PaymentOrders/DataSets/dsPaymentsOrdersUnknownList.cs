//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS._Forms {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsPaymentsOrdersUnknownList : DataSet {
        
        private PaymentsOrdersDataTable tablePaymentsOrders;
        
        public dsPaymentsOrdersUnknownList() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsPaymentsOrdersUnknownList(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PaymentsOrders"] != null)) {
                    this.Tables.Add(new PaymentsOrdersDataTable(ds.Tables["PaymentsOrders"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentsOrdersDataTable PaymentsOrders {
            get {
                return this.tablePaymentsOrders;
            }
        }
        
        public override DataSet Clone() {
            dsPaymentsOrdersUnknownList cln = ((dsPaymentsOrdersUnknownList)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["PaymentsOrders"] != null)) {
                this.Tables.Add(new PaymentsOrdersDataTable(ds.Tables["PaymentsOrders"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePaymentsOrders = ((PaymentsOrdersDataTable)(this.Tables["PaymentsOrders"]));
            if ((this.tablePaymentsOrders != null)) {
                this.tablePaymentsOrders.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsPaymentsOrdersUnknownList";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsPaymentsOrdersUnknownList.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePaymentsOrders = new PaymentsOrdersDataTable();
            this.Tables.Add(this.tablePaymentsOrders);
        }
        
        private bool ShouldSerializePaymentsOrders() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PaymentsOrdersRowChangeEventHandler(object sender, PaymentsOrdersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentsOrdersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnHeaderID;
            
            private DataColumn columnHeaderDate;
            
            private DataColumn columnPaymentOrderID;
            
            private DataColumn columnPaymentNo;
            
            private DataColumn columnPaymentOrderDate;
            
            private DataColumn columnConfirmed;
            
            private DataColumn columnRAccount;
            
            private DataColumn columnOrgName;
            
            private DataColumn columnCodeINN;
            
            private DataColumn columnRAccountContra;
            
            private DataColumn columnOrgNameContra;
            
            private DataColumn columnPaymentOrderSum;
            
            private DataColumn columnPaymentOrderPurpose;
            
            private DataColumn columnCodeINNContra;
            
            private DataColumn columnOrgsAccountsID;
            
            private DataColumn columnOrgID;
            
            private DataColumn columnOrgsAccountsIDContra;
            
            private DataColumn columnOrgIDContra;
            
            private DataColumn columnRemarks;
            
            private DataColumn columnTransactionID;
            
            internal PaymentsOrdersDataTable() : 
                    base("PaymentsOrders") {
                this.InitClass();
            }
            
            internal PaymentsOrdersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn HeaderIDColumn {
                get {
                    return this.columnHeaderID;
                }
            }
            
            internal DataColumn HeaderDateColumn {
                get {
                    return this.columnHeaderDate;
                }
            }
            
            internal DataColumn PaymentOrderIDColumn {
                get {
                    return this.columnPaymentOrderID;
                }
            }
            
            internal DataColumn PaymentNoColumn {
                get {
                    return this.columnPaymentNo;
                }
            }
            
            internal DataColumn PaymentOrderDateColumn {
                get {
                    return this.columnPaymentOrderDate;
                }
            }
            
            internal DataColumn ConfirmedColumn {
                get {
                    return this.columnConfirmed;
                }
            }
            
            internal DataColumn RAccountColumn {
                get {
                    return this.columnRAccount;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            internal DataColumn CodeINNColumn {
                get {
                    return this.columnCodeINN;
                }
            }
            
            internal DataColumn RAccountContraColumn {
                get {
                    return this.columnRAccountContra;
                }
            }
            
            internal DataColumn OrgNameContraColumn {
                get {
                    return this.columnOrgNameContra;
                }
            }
            
            internal DataColumn PaymentOrderSumColumn {
                get {
                    return this.columnPaymentOrderSum;
                }
            }
            
            internal DataColumn PaymentOrderPurposeColumn {
                get {
                    return this.columnPaymentOrderPurpose;
                }
            }
            
            internal DataColumn CodeINNContraColumn {
                get {
                    return this.columnCodeINNContra;
                }
            }
            
            internal DataColumn OrgsAccountsIDColumn {
                get {
                    return this.columnOrgsAccountsID;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            internal DataColumn OrgsAccountsIDContraColumn {
                get {
                    return this.columnOrgsAccountsIDContra;
                }
            }
            
            internal DataColumn OrgIDContraColumn {
                get {
                    return this.columnOrgIDContra;
                }
            }
            
            internal DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            internal DataColumn TransactionIDColumn {
                get {
                    return this.columnTransactionID;
                }
            }
            
            public PaymentsOrdersRow this[int index] {
                get {
                    return ((PaymentsOrdersRow)(this.Rows[index]));
                }
            }
            
            public event PaymentsOrdersRowChangeEventHandler PaymentsOrdersRowChanged;
            
            public event PaymentsOrdersRowChangeEventHandler PaymentsOrdersRowChanging;
            
            public event PaymentsOrdersRowChangeEventHandler PaymentsOrdersRowDeleted;
            
            public event PaymentsOrdersRowChangeEventHandler PaymentsOrdersRowDeleting;
            
            public void AddPaymentsOrdersRow(PaymentsOrdersRow row) {
                this.Rows.Add(row);
            }
            
            public PaymentsOrdersRow AddPaymentsOrdersRow(System.DateTime HeaderDate, string PaymentNo, System.DateTime PaymentOrderDate, bool Confirmed, string RAccount, string OrgName, string CodeINN, string RAccountContra, string OrgNameContra, System.Double PaymentOrderSum, string PaymentOrderPurpose, string CodeINNContra, string Remarks) {
                PaymentsOrdersRow rowPaymentsOrdersRow = ((PaymentsOrdersRow)(this.NewRow()));
                rowPaymentsOrdersRow.ItemArray = new object[] {
                        null,
                        HeaderDate,
                        null,
                        PaymentNo,
                        PaymentOrderDate,
                        Confirmed,
                        RAccount,
                        OrgName,
                        CodeINN,
                        RAccountContra,
                        OrgNameContra,
                        PaymentOrderSum,
                        PaymentOrderPurpose,
                        CodeINNContra,
                        null,
                        null,
                        null,
                        null,
                        Remarks,
                        null};
                this.Rows.Add(rowPaymentsOrdersRow);
                return rowPaymentsOrdersRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PaymentsOrdersDataTable cln = ((PaymentsOrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PaymentsOrdersDataTable();
            }
            
            internal void InitVars() {
                this.columnHeaderID = this.Columns["HeaderID"];
                this.columnHeaderDate = this.Columns["HeaderDate"];
                this.columnPaymentOrderID = this.Columns["PaymentOrderID"];
                this.columnPaymentNo = this.Columns["PaymentNo"];
                this.columnPaymentOrderDate = this.Columns["PaymentOrderDate"];
                this.columnConfirmed = this.Columns["Confirmed"];
                this.columnRAccount = this.Columns["RAccount"];
                this.columnOrgName = this.Columns["OrgName"];
                this.columnCodeINN = this.Columns["CodeINN"];
                this.columnRAccountContra = this.Columns["RAccountContra"];
                this.columnOrgNameContra = this.Columns["OrgNameContra"];
                this.columnPaymentOrderSum = this.Columns["PaymentOrderSum"];
                this.columnPaymentOrderPurpose = this.Columns["PaymentOrderPurpose"];
                this.columnCodeINNContra = this.Columns["CodeINNContra"];
                this.columnOrgsAccountsID = this.Columns["OrgsAccountsID"];
                this.columnOrgID = this.Columns["OrgID"];
                this.columnOrgsAccountsIDContra = this.Columns["OrgsAccountsIDContra"];
                this.columnOrgIDContra = this.Columns["OrgIDContra"];
                this.columnRemarks = this.Columns["Remarks"];
                this.columnTransactionID = this.Columns["TransactionID"];
            }
            
            private void InitClass() {
                this.columnHeaderID = new DataColumn("HeaderID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderID);
                this.columnHeaderDate = new DataColumn("HeaderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderDate);
                this.columnPaymentOrderID = new DataColumn("PaymentOrderID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderID);
                this.columnPaymentNo = new DataColumn("PaymentNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentNo);
                this.columnPaymentOrderDate = new DataColumn("PaymentOrderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderDate);
                this.columnConfirmed = new DataColumn("Confirmed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfirmed);
                this.columnRAccount = new DataColumn("RAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccount);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnCodeINN = new DataColumn("CodeINN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeINN);
                this.columnRAccountContra = new DataColumn("RAccountContra", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccountContra);
                this.columnOrgNameContra = new DataColumn("OrgNameContra", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgNameContra);
                this.columnPaymentOrderSum = new DataColumn("PaymentOrderSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderSum);
                this.columnPaymentOrderPurpose = new DataColumn("PaymentOrderPurpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderPurpose);
                this.columnCodeINNContra = new DataColumn("CodeINNContra", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeINNContra);
                this.columnOrgsAccountsID = new DataColumn("OrgsAccountsID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgsAccountsID);
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.columnOrgsAccountsIDContra = new DataColumn("OrgsAccountsIDContra", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgsAccountsIDContra);
                this.columnOrgIDContra = new DataColumn("OrgIDContra", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgIDContra);
                this.columnRemarks = new DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRemarks);
                this.columnTransactionID = new DataColumn("TransactionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionID);
                this.columnHeaderID.AutoIncrement = true;
                this.columnHeaderID.AllowDBNull = false;
                this.columnHeaderID.ReadOnly = true;
                this.columnHeaderDate.AllowDBNull = false;
                this.columnPaymentOrderID.AutoIncrement = true;
                this.columnPaymentOrderID.AllowDBNull = false;
                this.columnPaymentOrderID.ReadOnly = true;
                this.columnPaymentNo.AllowDBNull = false;
                this.columnPaymentOrderDate.AllowDBNull = false;
                this.columnConfirmed.AllowDBNull = false;
                this.columnRAccount.AllowDBNull = false;
                this.columnOrgName.AllowDBNull = false;
                this.columnCodeINN.AllowDBNull = false;
                this.columnRAccountContra.AllowDBNull = false;
                this.columnOrgNameContra.AllowDBNull = false;
                this.columnPaymentOrderSum.AllowDBNull = false;
                this.columnCodeINNContra.AllowDBNull = false;
                this.columnOrgsAccountsID.AutoIncrement = true;
                this.columnOrgsAccountsID.AllowDBNull = false;
                this.columnOrgsAccountsID.ReadOnly = true;
                this.columnOrgID.AutoIncrement = true;
                this.columnOrgID.AllowDBNull = false;
                this.columnOrgID.ReadOnly = true;
                this.columnOrgsAccountsIDContra.AutoIncrement = true;
                this.columnOrgsAccountsIDContra.AllowDBNull = false;
                this.columnOrgsAccountsIDContra.ReadOnly = true;
                this.columnOrgIDContra.AutoIncrement = true;
                this.columnOrgIDContra.AllowDBNull = false;
                this.columnOrgIDContra.ReadOnly = true;
                this.columnTransactionID.AutoIncrement = true;
                this.columnTransactionID.ReadOnly = true;
            }
            
            public PaymentsOrdersRow NewPaymentsOrdersRow() {
                return ((PaymentsOrdersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PaymentsOrdersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PaymentsOrdersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentsOrdersRowChanged != null)) {
                    this.PaymentsOrdersRowChanged(this, new PaymentsOrdersRowChangeEvent(((PaymentsOrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentsOrdersRowChanging != null)) {
                    this.PaymentsOrdersRowChanging(this, new PaymentsOrdersRowChangeEvent(((PaymentsOrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentsOrdersRowDeleted != null)) {
                    this.PaymentsOrdersRowDeleted(this, new PaymentsOrdersRowChangeEvent(((PaymentsOrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentsOrdersRowDeleting != null)) {
                    this.PaymentsOrdersRowDeleting(this, new PaymentsOrdersRowChangeEvent(((PaymentsOrdersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePaymentsOrdersRow(PaymentsOrdersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentsOrdersRow : DataRow {
            
            private PaymentsOrdersDataTable tablePaymentsOrders;
            
            internal PaymentsOrdersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaymentsOrders = ((PaymentsOrdersDataTable)(this.Table));
            }
            
            public int HeaderID {
                get {
                    return ((int)(this[this.tablePaymentsOrders.HeaderIDColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.HeaderIDColumn] = value;
                }
            }
            
            public System.DateTime HeaderDate {
                get {
                    return ((System.DateTime)(this[this.tablePaymentsOrders.HeaderDateColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.HeaderDateColumn] = value;
                }
            }
            
            public int PaymentOrderID {
                get {
                    return ((int)(this[this.tablePaymentsOrders.PaymentOrderIDColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.PaymentOrderIDColumn] = value;
                }
            }
            
            public string PaymentNo {
                get {
                    return ((string)(this[this.tablePaymentsOrders.PaymentNoColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.PaymentNoColumn] = value;
                }
            }
            
            public System.DateTime PaymentOrderDate {
                get {
                    return ((System.DateTime)(this[this.tablePaymentsOrders.PaymentOrderDateColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.PaymentOrderDateColumn] = value;
                }
            }
            
            public bool Confirmed {
                get {
                    return ((bool)(this[this.tablePaymentsOrders.ConfirmedColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.ConfirmedColumn] = value;
                }
            }
            
            public string RAccount {
                get {
                    return ((string)(this[this.tablePaymentsOrders.RAccountColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.RAccountColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    return ((string)(this[this.tablePaymentsOrders.OrgNameColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.OrgNameColumn] = value;
                }
            }
            
            public string CodeINN {
                get {
                    return ((string)(this[this.tablePaymentsOrders.CodeINNColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.CodeINNColumn] = value;
                }
            }
            
            public string RAccountContra {
                get {
                    return ((string)(this[this.tablePaymentsOrders.RAccountContraColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.RAccountContraColumn] = value;
                }
            }
            
            public string OrgNameContra {
                get {
                    return ((string)(this[this.tablePaymentsOrders.OrgNameContraColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.OrgNameContraColumn] = value;
                }
            }
            
            public System.Double PaymentOrderSum {
                get {
                    return ((System.Double)(this[this.tablePaymentsOrders.PaymentOrderSumColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.PaymentOrderSumColumn] = value;
                }
            }
            
            public string PaymentOrderPurpose {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrders.PaymentOrderPurposeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrders.PaymentOrderPurposeColumn] = value;
                }
            }
            
            public string CodeINNContra {
                get {
                    return ((string)(this[this.tablePaymentsOrders.CodeINNContraColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.CodeINNContraColumn] = value;
                }
            }
            
            public int OrgsAccountsID {
                get {
                    return ((int)(this[this.tablePaymentsOrders.OrgsAccountsIDColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.OrgsAccountsIDColumn] = value;
                }
            }
            
            public int OrgID {
                get {
                    return ((int)(this[this.tablePaymentsOrders.OrgIDColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.OrgIDColumn] = value;
                }
            }
            
            public int OrgsAccountsIDContra {
                get {
                    return ((int)(this[this.tablePaymentsOrders.OrgsAccountsIDContraColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.OrgsAccountsIDContraColumn] = value;
                }
            }
            
            public int OrgIDContra {
                get {
                    return ((int)(this[this.tablePaymentsOrders.OrgIDContraColumn]));
                }
                set {
                    this[this.tablePaymentsOrders.OrgIDContraColumn] = value;
                }
            }
            
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrders.RemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrders.RemarksColumn] = value;
                }
            }
            
            public int TransactionID {
                get {
                    try {
                        return ((int)(this[this.tablePaymentsOrders.TransactionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrders.TransactionIDColumn] = value;
                }
            }
            
            public bool IsPaymentOrderPurposeNull() {
                return this.IsNull(this.tablePaymentsOrders.PaymentOrderPurposeColumn);
            }
            
            public void SetPaymentOrderPurposeNull() {
                this[this.tablePaymentsOrders.PaymentOrderPurposeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRemarksNull() {
                return this.IsNull(this.tablePaymentsOrders.RemarksColumn);
            }
            
            public void SetRemarksNull() {
                this[this.tablePaymentsOrders.RemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionIDNull() {
                return this.IsNull(this.tablePaymentsOrders.TransactionIDColumn);
            }
            
            public void SetTransactionIDNull() {
                this[this.tablePaymentsOrders.TransactionIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentsOrdersRowChangeEvent : EventArgs {
            
            private PaymentsOrdersRow eventRow;
            
            private DataRowAction eventAction;
            
            public PaymentsOrdersRowChangeEvent(PaymentsOrdersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PaymentsOrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
