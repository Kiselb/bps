//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.Currency.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsCurrHistory : DataSet {
        
        private CurrenciesHistoryDataTable tableCurrenciesHistory;
        
        public dsCurrHistory() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsCurrHistory(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CurrenciesHistory"] != null)) {
                    this.Tables.Add(new CurrenciesHistoryDataTable(ds.Tables["CurrenciesHistory"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CurrenciesHistoryDataTable CurrenciesHistory {
            get {
                return this.tableCurrenciesHistory;
            }
        }
        
        public override DataSet Clone() {
            dsCurrHistory cln = ((dsCurrHistory)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["CurrenciesHistory"] != null)) {
                this.Tables.Add(new CurrenciesHistoryDataTable(ds.Tables["CurrenciesHistory"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCurrenciesHistory = ((CurrenciesHistoryDataTable)(this.Tables["CurrenciesHistory"]));
            if ((this.tableCurrenciesHistory != null)) {
                this.tableCurrenciesHistory.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsCurrHistory";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsCurrHistory.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCurrenciesHistory = new CurrenciesHistoryDataTable();
            this.Tables.Add(this.tableCurrenciesHistory);
        }
        
        private bool ShouldSerializeCurrenciesHistory() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CurrenciesHistoryRowChangeEventHandler(object sender, CurrenciesHistoryRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CurrenciesHistoryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnCurrDate;
            
            private DataColumn columnCurrencyID;
            
            private DataColumn columnCurrRate;
            
            private DataColumn columnBaseCurrencyID;
            
            private DataColumn columnCurrencyName;
            
            internal CurrenciesHistoryDataTable() : 
                    base("CurrenciesHistory") {
                this.InitClass();
            }
            
            internal CurrenciesHistoryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn CurrDateColumn {
                get {
                    return this.columnCurrDate;
                }
            }
            
            internal DataColumn CurrencyIDColumn {
                get {
                    return this.columnCurrencyID;
                }
            }
            
            internal DataColumn CurrRateColumn {
                get {
                    return this.columnCurrRate;
                }
            }
            
            internal DataColumn BaseCurrencyIDColumn {
                get {
                    return this.columnBaseCurrencyID;
                }
            }
            
            internal DataColumn CurrencyNameColumn {
                get {
                    return this.columnCurrencyName;
                }
            }
            
            public CurrenciesHistoryRow this[int index] {
                get {
                    return ((CurrenciesHistoryRow)(this.Rows[index]));
                }
            }
            
            public event CurrenciesHistoryRowChangeEventHandler CurrenciesHistoryRowChanged;
            
            public event CurrenciesHistoryRowChangeEventHandler CurrenciesHistoryRowChanging;
            
            public event CurrenciesHistoryRowChangeEventHandler CurrenciesHistoryRowDeleted;
            
            public event CurrenciesHistoryRowChangeEventHandler CurrenciesHistoryRowDeleting;
            
            public void AddCurrenciesHistoryRow(CurrenciesHistoryRow row) {
                this.Rows.Add(row);
            }
            
            public CurrenciesHistoryRow AddCurrenciesHistoryRow(System.DateTime CurrDate, string CurrencyID, System.Double CurrRate, string BaseCurrencyID, string CurrencyName) {
                CurrenciesHistoryRow rowCurrenciesHistoryRow = ((CurrenciesHistoryRow)(this.NewRow()));
                rowCurrenciesHistoryRow.ItemArray = new object[] {
                        null,
                        CurrDate,
                        CurrencyID,
                        CurrRate,
                        BaseCurrencyID,
                        CurrencyName};
                this.Rows.Add(rowCurrenciesHistoryRow);
                return rowCurrenciesHistoryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CurrenciesHistoryDataTable cln = ((CurrenciesHistoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CurrenciesHistoryDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnCurrDate = this.Columns["CurrDate"];
                this.columnCurrencyID = this.Columns["CurrencyID"];
                this.columnCurrRate = this.Columns["CurrRate"];
                this.columnBaseCurrencyID = this.Columns["BaseCurrencyID"];
                this.columnCurrencyName = this.Columns["CurrencyName"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnCurrDate = new DataColumn("CurrDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrDate);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyID);
                this.columnCurrRate = new DataColumn("CurrRate", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrRate);
                this.columnBaseCurrencyID = new DataColumn("BaseCurrencyID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBaseCurrencyID);
                this.columnCurrencyName = new DataColumn("CurrencyName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyName);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnCurrDate.AllowDBNull = false;
                this.columnCurrencyID.AllowDBNull = false;
                this.columnCurrRate.AllowDBNull = false;
                this.columnBaseCurrencyID.AllowDBNull = false;
                this.columnCurrencyName.AllowDBNull = false;
            }
            
            public CurrenciesHistoryRow NewCurrenciesHistoryRow() {
                return ((CurrenciesHistoryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CurrenciesHistoryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CurrenciesHistoryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CurrenciesHistoryRowChanged != null)) {
                    this.CurrenciesHistoryRowChanged(this, new CurrenciesHistoryRowChangeEvent(((CurrenciesHistoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CurrenciesHistoryRowChanging != null)) {
                    this.CurrenciesHistoryRowChanging(this, new CurrenciesHistoryRowChangeEvent(((CurrenciesHistoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CurrenciesHistoryRowDeleted != null)) {
                    this.CurrenciesHistoryRowDeleted(this, new CurrenciesHistoryRowChangeEvent(((CurrenciesHistoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CurrenciesHistoryRowDeleting != null)) {
                    this.CurrenciesHistoryRowDeleting(this, new CurrenciesHistoryRowChangeEvent(((CurrenciesHistoryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCurrenciesHistoryRow(CurrenciesHistoryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CurrenciesHistoryRow : DataRow {
            
            private CurrenciesHistoryDataTable tableCurrenciesHistory;
            
            internal CurrenciesHistoryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCurrenciesHistory = ((CurrenciesHistoryDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableCurrenciesHistory.IDColumn]));
                }
                set {
                    this[this.tableCurrenciesHistory.IDColumn] = value;
                }
            }
            
            public System.DateTime CurrDate {
                get {
                    return ((System.DateTime)(this[this.tableCurrenciesHistory.CurrDateColumn]));
                }
                set {
                    this[this.tableCurrenciesHistory.CurrDateColumn] = value;
                }
            }
            
            public string CurrencyID {
                get {
                    return ((string)(this[this.tableCurrenciesHistory.CurrencyIDColumn]));
                }
                set {
                    this[this.tableCurrenciesHistory.CurrencyIDColumn] = value;
                }
            }
            
            public System.Double CurrRate {
                get {
                    return ((System.Double)(this[this.tableCurrenciesHistory.CurrRateColumn]));
                }
                set {
                    this[this.tableCurrenciesHistory.CurrRateColumn] = value;
                }
            }
            
            public string BaseCurrencyID {
                get {
                    return ((string)(this[this.tableCurrenciesHistory.BaseCurrencyIDColumn]));
                }
                set {
                    this[this.tableCurrenciesHistory.BaseCurrencyIDColumn] = value;
                }
            }
            
            public string CurrencyName {
                get {
                    return ((string)(this[this.tableCurrenciesHistory.CurrencyNameColumn]));
                }
                set {
                    this[this.tableCurrenciesHistory.CurrencyNameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CurrenciesHistoryRowChangeEvent : EventArgs {
            
            private CurrenciesHistoryRow eventRow;
            
            private DataRowAction eventAction;
            
            public CurrenciesHistoryRowChangeEvent(CurrenciesHistoryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CurrenciesHistoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
