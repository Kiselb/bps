//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS._Forms {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsCreditsPoints : DataSet {
        
        private CreditsPointsDataTable tableCreditsPoints;
        
        public dsCreditsPoints() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsCreditsPoints(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CreditsPoints"] != null)) {
                    this.Tables.Add(new CreditsPointsDataTable(ds.Tables["CreditsPoints"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CreditsPointsDataTable CreditsPoints {
            get {
                return this.tableCreditsPoints;
            }
        }
        
        public override DataSet Clone() {
            dsCreditsPoints cln = ((dsCreditsPoints)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["CreditsPoints"] != null)) {
                this.Tables.Add(new CreditsPointsDataTable(ds.Tables["CreditsPoints"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCreditsPoints = ((CreditsPointsDataTable)(this.Tables["CreditsPoints"]));
            if ((this.tableCreditsPoints != null)) {
                this.tableCreditsPoints.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsCreditsPoints";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsCreditsPoints.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCreditsPoints = new CreditsPointsDataTable();
            this.Tables.Add(this.tableCreditsPoints);
        }
        
        private bool ShouldSerializeCreditsPoints() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CreditsPointsRowChangeEventHandler(object sender, CreditsPointsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CreditsPointsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPointID;
            
            private DataColumn columnCreditID;
            
            private DataColumn columnPointDate;
            
            private DataColumn columnPointSum;
            
            private DataColumn columnPointPercent;
            
            internal CreditsPointsDataTable() : 
                    base("CreditsPoints") {
                this.InitClass();
            }
            
            internal CreditsPointsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PointIDColumn {
                get {
                    return this.columnPointID;
                }
            }
            
            internal DataColumn CreditIDColumn {
                get {
                    return this.columnCreditID;
                }
            }
            
            internal DataColumn PointDateColumn {
                get {
                    return this.columnPointDate;
                }
            }
            
            internal DataColumn PointSumColumn {
                get {
                    return this.columnPointSum;
                }
            }
            
            internal DataColumn PointPercentColumn {
                get {
                    return this.columnPointPercent;
                }
            }
            
            public CreditsPointsRow this[int index] {
                get {
                    return ((CreditsPointsRow)(this.Rows[index]));
                }
            }
            
            public event CreditsPointsRowChangeEventHandler CreditsPointsRowChanged;
            
            public event CreditsPointsRowChangeEventHandler CreditsPointsRowChanging;
            
            public event CreditsPointsRowChangeEventHandler CreditsPointsRowDeleted;
            
            public event CreditsPointsRowChangeEventHandler CreditsPointsRowDeleting;
            
            public void AddCreditsPointsRow(CreditsPointsRow row) {
                this.Rows.Add(row);
            }
            
            public CreditsPointsRow AddCreditsPointsRow(int CreditID, System.DateTime PointDate, System.Double PointSum, System.Double PointPercent) {
                CreditsPointsRow rowCreditsPointsRow = ((CreditsPointsRow)(this.NewRow()));
                rowCreditsPointsRow.ItemArray = new object[] {
                        null,
                        CreditID,
                        PointDate,
                        PointSum,
                        PointPercent};
                this.Rows.Add(rowCreditsPointsRow);
                return rowCreditsPointsRow;
            }
            
            public CreditsPointsRow FindByPointID(int PointID) {
                return ((CreditsPointsRow)(this.Rows.Find(new object[] {
                            PointID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CreditsPointsDataTable cln = ((CreditsPointsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CreditsPointsDataTable();
            }
            
            internal void InitVars() {
                this.columnPointID = this.Columns["PointID"];
                this.columnCreditID = this.Columns["CreditID"];
                this.columnPointDate = this.Columns["PointDate"];
                this.columnPointSum = this.Columns["PointSum"];
                this.columnPointPercent = this.Columns["PointPercent"];
            }
            
            private void InitClass() {
                this.columnPointID = new DataColumn("PointID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointID);
                this.columnCreditID = new DataColumn("CreditID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreditID);
                this.columnPointDate = new DataColumn("PointDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointDate);
                this.columnPointSum = new DataColumn("PointSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointSum);
                this.columnPointPercent = new DataColumn("PointPercent", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPointPercent);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPointID}, true));
                this.columnPointID.AutoIncrement = true;
                this.columnPointID.AllowDBNull = false;
                this.columnPointID.ReadOnly = true;
                this.columnPointID.Unique = true;
                this.columnCreditID.AllowDBNull = false;
                this.columnPointDate.AllowDBNull = false;
                this.columnPointSum.AllowDBNull = false;
                this.columnPointPercent.AllowDBNull = false;
            }
            
            public CreditsPointsRow NewCreditsPointsRow() {
                return ((CreditsPointsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CreditsPointsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CreditsPointsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CreditsPointsRowChanged != null)) {
                    this.CreditsPointsRowChanged(this, new CreditsPointsRowChangeEvent(((CreditsPointsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CreditsPointsRowChanging != null)) {
                    this.CreditsPointsRowChanging(this, new CreditsPointsRowChangeEvent(((CreditsPointsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CreditsPointsRowDeleted != null)) {
                    this.CreditsPointsRowDeleted(this, new CreditsPointsRowChangeEvent(((CreditsPointsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CreditsPointsRowDeleting != null)) {
                    this.CreditsPointsRowDeleting(this, new CreditsPointsRowChangeEvent(((CreditsPointsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCreditsPointsRow(CreditsPointsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CreditsPointsRow : DataRow {
            
            private CreditsPointsDataTable tableCreditsPoints;
            
            internal CreditsPointsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCreditsPoints = ((CreditsPointsDataTable)(this.Table));
            }
            
            public int PointID {
                get {
                    return ((int)(this[this.tableCreditsPoints.PointIDColumn]));
                }
                set {
                    this[this.tableCreditsPoints.PointIDColumn] = value;
                }
            }
            
            public int CreditID {
                get {
                    return ((int)(this[this.tableCreditsPoints.CreditIDColumn]));
                }
                set {
                    this[this.tableCreditsPoints.CreditIDColumn] = value;
                }
            }
            
            public System.DateTime PointDate {
                get {
                    return ((System.DateTime)(this[this.tableCreditsPoints.PointDateColumn]));
                }
                set {
                    this[this.tableCreditsPoints.PointDateColumn] = value;
                }
            }
            
            public System.Double PointSum {
                get {
                    return ((System.Double)(this[this.tableCreditsPoints.PointSumColumn]));
                }
                set {
                    this[this.tableCreditsPoints.PointSumColumn] = value;
                }
            }
            
            public System.Double PointPercent {
                get {
                    return ((System.Double)(this[this.tableCreditsPoints.PointPercentColumn]));
                }
                set {
                    this[this.tableCreditsPoints.PointPercentColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CreditsPointsRowChangeEvent : EventArgs {
            
            private CreditsPointsRow eventRow;
            
            private DataRowAction eventAction;
            
            public CreditsPointsRowChangeEvent(CreditsPointsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CreditsPointsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
