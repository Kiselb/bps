//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.AccountStatements {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsAccStatementsList : DataSet {
        
        private AccountsStatementsHeadersDataTable tableAccountsStatementsHeaders;
        
        public dsAccStatementsList() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsAccStatementsList(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AccountsStatementsHeaders"] != null)) {
                    this.Tables.Add(new AccountsStatementsHeadersDataTable(ds.Tables["AccountsStatementsHeaders"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountsStatementsHeadersDataTable AccountsStatementsHeaders {
            get {
                return this.tableAccountsStatementsHeaders;
            }
        }
        
        public override DataSet Clone() {
            dsAccStatementsList cln = ((dsAccStatementsList)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["AccountsStatementsHeaders"] != null)) {
                this.Tables.Add(new AccountsStatementsHeadersDataTable(ds.Tables["AccountsStatementsHeaders"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAccountsStatementsHeaders = ((AccountsStatementsHeadersDataTable)(this.Tables["AccountsStatementsHeaders"]));
            if ((this.tableAccountsStatementsHeaders != null)) {
                this.tableAccountsStatementsHeaders.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsAccStatementsList";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsAccStatementsList.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAccountsStatementsHeaders = new AccountsStatementsHeadersDataTable();
            this.Tables.Add(this.tableAccountsStatementsHeaders);
        }
        
        private bool ShouldSerializeAccountsStatementsHeaders() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AccountsStatementsHeadersRowChangeEventHandler(object sender, AccountsStatementsHeadersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsHeadersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOrgsAccountsID;
            
            private DataColumn columnHeaderID;
            
            private DataColumn columnHeaderDate;
            
            private DataColumn columnConfirmed;
            
            private DataColumn columnOrgName;
            
            private DataColumn columnBankName;
            
            private DataColumn columnRAccount;
            
            private DataColumn columnKAccount;
            
            private DataColumn columnBankID;
            
            private DataColumn columnOrgID;
            
            internal AccountsStatementsHeadersDataTable() : 
                    base("AccountsStatementsHeaders") {
                this.InitClass();
            }
            
            internal AccountsStatementsHeadersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OrgsAccountsIDColumn {
                get {
                    return this.columnOrgsAccountsID;
                }
            }
            
            internal DataColumn HeaderIDColumn {
                get {
                    return this.columnHeaderID;
                }
            }
            
            internal DataColumn HeaderDateColumn {
                get {
                    return this.columnHeaderDate;
                }
            }
            
            internal DataColumn ConfirmedColumn {
                get {
                    return this.columnConfirmed;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            internal DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            internal DataColumn RAccountColumn {
                get {
                    return this.columnRAccount;
                }
            }
            
            internal DataColumn KAccountColumn {
                get {
                    return this.columnKAccount;
                }
            }
            
            internal DataColumn BankIDColumn {
                get {
                    return this.columnBankID;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            public AccountsStatementsHeadersRow this[int index] {
                get {
                    return ((AccountsStatementsHeadersRow)(this.Rows[index]));
                }
            }
            
            public event AccountsStatementsHeadersRowChangeEventHandler AccountsStatementsHeadersRowChanged;
            
            public event AccountsStatementsHeadersRowChangeEventHandler AccountsStatementsHeadersRowChanging;
            
            public event AccountsStatementsHeadersRowChangeEventHandler AccountsStatementsHeadersRowDeleted;
            
            public event AccountsStatementsHeadersRowChangeEventHandler AccountsStatementsHeadersRowDeleting;
            
            public void AddAccountsStatementsHeadersRow(AccountsStatementsHeadersRow row) {
                this.Rows.Add(row);
            }
            
            public AccountsStatementsHeadersRow AddAccountsStatementsHeadersRow(System.DateTime HeaderDate, bool Confirmed, string OrgName, string BankName, string RAccount, string KAccount) {
                AccountsStatementsHeadersRow rowAccountsStatementsHeadersRow = ((AccountsStatementsHeadersRow)(this.NewRow()));
                rowAccountsStatementsHeadersRow.ItemArray = new object[] {
                        null,
                        null,
                        HeaderDate,
                        Confirmed,
                        OrgName,
                        BankName,
                        RAccount,
                        KAccount,
                        null,
                        null};
                this.Rows.Add(rowAccountsStatementsHeadersRow);
                return rowAccountsStatementsHeadersRow;
            }
            
            public AccountsStatementsHeadersRow FindByOrgsAccountsIDHeaderIDBankIDOrgID(int OrgsAccountsID, int HeaderID, int BankID, int OrgID) {
                return ((AccountsStatementsHeadersRow)(this.Rows.Find(new object[] {
                            OrgsAccountsID,
                            HeaderID,
                            BankID,
                            OrgID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AccountsStatementsHeadersDataTable cln = ((AccountsStatementsHeadersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AccountsStatementsHeadersDataTable();
            }
            
            internal void InitVars() {
                this.columnOrgsAccountsID = this.Columns["OrgsAccountsID"];
                this.columnHeaderID = this.Columns["HeaderID"];
                this.columnHeaderDate = this.Columns["HeaderDate"];
                this.columnConfirmed = this.Columns["Confirmed"];
                this.columnOrgName = this.Columns["OrgName"];
                this.columnBankName = this.Columns["BankName"];
                this.columnRAccount = this.Columns["RAccount"];
                this.columnKAccount = this.Columns["KAccount"];
                this.columnBankID = this.Columns["BankID"];
                this.columnOrgID = this.Columns["OrgID"];
            }
            
            private void InitClass() {
                this.columnOrgsAccountsID = new DataColumn("OrgsAccountsID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgsAccountsID);
                this.columnHeaderID = new DataColumn("HeaderID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderID);
                this.columnHeaderDate = new DataColumn("HeaderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderDate);
                this.columnConfirmed = new DataColumn("Confirmed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfirmed);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnBankName = new DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankName);
                this.columnRAccount = new DataColumn("RAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccount);
                this.columnKAccount = new DataColumn("KAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnKAccount);
                this.columnBankID = new DataColumn("BankID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankID);
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnOrgsAccountsID,
                                this.columnHeaderID,
                                this.columnBankID,
                                this.columnOrgID}, true));
                this.columnOrgsAccountsID.AutoIncrement = true;
                this.columnOrgsAccountsID.AllowDBNull = false;
                this.columnOrgsAccountsID.ReadOnly = true;
                this.columnHeaderID.AutoIncrement = true;
                this.columnHeaderID.AllowDBNull = false;
                this.columnHeaderID.ReadOnly = true;
                this.columnHeaderDate.AllowDBNull = false;
                this.columnConfirmed.AllowDBNull = false;
                this.columnOrgName.AllowDBNull = false;
                this.columnBankName.AllowDBNull = false;
                this.columnRAccount.AllowDBNull = false;
                this.columnKAccount.AllowDBNull = false;
                this.columnBankID.AutoIncrement = true;
                this.columnBankID.AllowDBNull = false;
                this.columnBankID.ReadOnly = true;
                this.columnOrgID.AutoIncrement = true;
                this.columnOrgID.AllowDBNull = false;
                this.columnOrgID.ReadOnly = true;
            }
            
            public AccountsStatementsHeadersRow NewAccountsStatementsHeadersRow() {
                return ((AccountsStatementsHeadersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AccountsStatementsHeadersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AccountsStatementsHeadersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountsStatementsHeadersRowChanged != null)) {
                    this.AccountsStatementsHeadersRowChanged(this, new AccountsStatementsHeadersRowChangeEvent(((AccountsStatementsHeadersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountsStatementsHeadersRowChanging != null)) {
                    this.AccountsStatementsHeadersRowChanging(this, new AccountsStatementsHeadersRowChangeEvent(((AccountsStatementsHeadersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountsStatementsHeadersRowDeleted != null)) {
                    this.AccountsStatementsHeadersRowDeleted(this, new AccountsStatementsHeadersRowChangeEvent(((AccountsStatementsHeadersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountsStatementsHeadersRowDeleting != null)) {
                    this.AccountsStatementsHeadersRowDeleting(this, new AccountsStatementsHeadersRowChangeEvent(((AccountsStatementsHeadersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAccountsStatementsHeadersRow(AccountsStatementsHeadersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsHeadersRow : DataRow {
            
            private AccountsStatementsHeadersDataTable tableAccountsStatementsHeaders;
            
            internal AccountsStatementsHeadersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccountsStatementsHeaders = ((AccountsStatementsHeadersDataTable)(this.Table));
            }
            
            public int OrgsAccountsID {
                get {
                    return ((int)(this[this.tableAccountsStatementsHeaders.OrgsAccountsIDColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.OrgsAccountsIDColumn] = value;
                }
            }
            
            public int HeaderID {
                get {
                    return ((int)(this[this.tableAccountsStatementsHeaders.HeaderIDColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.HeaderIDColumn] = value;
                }
            }
            
            public System.DateTime HeaderDate {
                get {
                    return ((System.DateTime)(this[this.tableAccountsStatementsHeaders.HeaderDateColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.HeaderDateColumn] = value;
                }
            }
            
            public bool Confirmed {
                get {
                    return ((bool)(this[this.tableAccountsStatementsHeaders.ConfirmedColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.ConfirmedColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    return ((string)(this[this.tableAccountsStatementsHeaders.OrgNameColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.OrgNameColumn] = value;
                }
            }
            
            public string BankName {
                get {
                    return ((string)(this[this.tableAccountsStatementsHeaders.BankNameColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.BankNameColumn] = value;
                }
            }
            
            public string RAccount {
                get {
                    return ((string)(this[this.tableAccountsStatementsHeaders.RAccountColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.RAccountColumn] = value;
                }
            }
            
            public string KAccount {
                get {
                    return ((string)(this[this.tableAccountsStatementsHeaders.KAccountColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.KAccountColumn] = value;
                }
            }
            
            public int BankID {
                get {
                    return ((int)(this[this.tableAccountsStatementsHeaders.BankIDColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.BankIDColumn] = value;
                }
            }
            
            public int OrgID {
                get {
                    return ((int)(this[this.tableAccountsStatementsHeaders.OrgIDColumn]));
                }
                set {
                    this[this.tableAccountsStatementsHeaders.OrgIDColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsHeadersRowChangeEvent : EventArgs {
            
            private AccountsStatementsHeadersRow eventRow;
            
            private DataRowAction eventAction;
            
            public AccountsStatementsHeadersRowChangeEvent(AccountsStatementsHeadersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AccountsStatementsHeadersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
