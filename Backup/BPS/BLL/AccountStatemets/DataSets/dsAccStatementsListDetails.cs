//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.AccountStatements {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsAccStatementsListDetails : DataSet {
        
        private GetPaymentsOrdersDataTable tableGetPaymentsOrders;
        
        public dsAccStatementsListDetails() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsAccStatementsListDetails(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetPaymentsOrders"] != null)) {
                    this.Tables.Add(new GetPaymentsOrdersDataTable(ds.Tables["GetPaymentsOrders"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetPaymentsOrdersDataTable GetPaymentsOrders {
            get {
                return this.tableGetPaymentsOrders;
            }
        }
        
        public override DataSet Clone() {
            dsAccStatementsListDetails cln = ((dsAccStatementsListDetails)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GetPaymentsOrders"] != null)) {
                this.Tables.Add(new GetPaymentsOrdersDataTable(ds.Tables["GetPaymentsOrders"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGetPaymentsOrders = ((GetPaymentsOrdersDataTable)(this.Tables["GetPaymentsOrders"]));
            if ((this.tableGetPaymentsOrders != null)) {
                this.tableGetPaymentsOrders.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsAccStatementsListDetails";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsAccStatementsListDetails.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGetPaymentsOrders = new GetPaymentsOrdersDataTable();
            this.Tables.Add(this.tableGetPaymentsOrders);
        }
        
        private bool ShouldSerializeGetPaymentsOrders() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GetPaymentsOrdersRowChangeEventHandler(object sender, GetPaymentsOrdersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetPaymentsOrdersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPaymentOrderID;
            
            private DataColumn columnHeaderID;
            
            private DataColumn columnPaymentOrderDate;
            
            private DataColumn columnPaymentNo;
            
            private DataColumn columnPaymentOrderSum;
            
            private DataColumn columnDirection;
            
            private DataColumn columnPaymentOrderPurpose;
            
            private DataColumn columnBankName;
            
            private DataColumn columnKAccount;
            
            private DataColumn columnCityName;
            
            private DataColumn columnRAccount;
            
            private DataColumn columnOrgName;
            
            private DataColumn columnRequestTypeName;
            
            private DataColumn columnRequestDate;
            
            private DataColumn columnClientName;
            
            private DataColumn columnClientRequestRemarks;
            
            private DataColumn columnTransactionID;
            
            private DataColumn columnClientRequestID;
            
            private DataColumn columnClientID;
            
            private DataColumn columnRequestTypeID;
            
            private DataColumn columnOrgAccountIDCorr;
            
            private DataColumn columnOrgID;
            
            private DataColumn columnTransactionTypeID;
            
            private DataColumn columnTransactionTypeName;
            
            private DataColumn columnPaymOrderRemarks;
            
            private DataColumn columnPaymentOrderStatusID;
            
            private DataColumn columnPaymentOrderStatusName;
            
            private DataColumn columnPaymOrderLinked;
            
            private DataColumn columnServiceCharge;
            
            private DataColumn columnPurpose;
            
            private DataColumn columnCurrencyTo;
            
            private DataColumn columnRequestSum;
            
            internal GetPaymentsOrdersDataTable() : 
                    base("GetPaymentsOrders") {
                this.InitClass();
            }
            
            internal GetPaymentsOrdersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PaymentOrderIDColumn {
                get {
                    return this.columnPaymentOrderID;
                }
            }
            
            internal DataColumn HeaderIDColumn {
                get {
                    return this.columnHeaderID;
                }
            }
            
            internal DataColumn PaymentOrderDateColumn {
                get {
                    return this.columnPaymentOrderDate;
                }
            }
            
            internal DataColumn PaymentNoColumn {
                get {
                    return this.columnPaymentNo;
                }
            }
            
            internal DataColumn PaymentOrderSumColumn {
                get {
                    return this.columnPaymentOrderSum;
                }
            }
            
            internal DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            internal DataColumn PaymentOrderPurposeColumn {
                get {
                    return this.columnPaymentOrderPurpose;
                }
            }
            
            internal DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            internal DataColumn KAccountColumn {
                get {
                    return this.columnKAccount;
                }
            }
            
            internal DataColumn CityNameColumn {
                get {
                    return this.columnCityName;
                }
            }
            
            internal DataColumn RAccountColumn {
                get {
                    return this.columnRAccount;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            internal DataColumn RequestTypeNameColumn {
                get {
                    return this.columnRequestTypeName;
                }
            }
            
            internal DataColumn RequestDateColumn {
                get {
                    return this.columnRequestDate;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn ClientRequestRemarksColumn {
                get {
                    return this.columnClientRequestRemarks;
                }
            }
            
            internal DataColumn TransactionIDColumn {
                get {
                    return this.columnTransactionID;
                }
            }
            
            internal DataColumn ClientRequestIDColumn {
                get {
                    return this.columnClientRequestID;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn RequestTypeIDColumn {
                get {
                    return this.columnRequestTypeID;
                }
            }
            
            internal DataColumn OrgAccountIDCorrColumn {
                get {
                    return this.columnOrgAccountIDCorr;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            internal DataColumn TransactionTypeIDColumn {
                get {
                    return this.columnTransactionTypeID;
                }
            }
            
            internal DataColumn TransactionTypeNameColumn {
                get {
                    return this.columnTransactionTypeName;
                }
            }
            
            internal DataColumn PaymOrderRemarksColumn {
                get {
                    return this.columnPaymOrderRemarks;
                }
            }
            
            internal DataColumn PaymentOrderStatusIDColumn {
                get {
                    return this.columnPaymentOrderStatusID;
                }
            }
            
            internal DataColumn PaymentOrderStatusNameColumn {
                get {
                    return this.columnPaymentOrderStatusName;
                }
            }
            
            internal DataColumn PaymOrderLinkedColumn {
                get {
                    return this.columnPaymOrderLinked;
                }
            }
            
            internal DataColumn ServiceChargeColumn {
                get {
                    return this.columnServiceCharge;
                }
            }
            
            internal DataColumn PurposeColumn {
                get {
                    return this.columnPurpose;
                }
            }
            
            internal DataColumn CurrencyToColumn {
                get {
                    return this.columnCurrencyTo;
                }
            }
            
            internal DataColumn RequestSumColumn {
                get {
                    return this.columnRequestSum;
                }
            }
            
            public GetPaymentsOrdersRow this[int index] {
                get {
                    return ((GetPaymentsOrdersRow)(this.Rows[index]));
                }
            }
            
            public event GetPaymentsOrdersRowChangeEventHandler GetPaymentsOrdersRowChanged;
            
            public event GetPaymentsOrdersRowChangeEventHandler GetPaymentsOrdersRowChanging;
            
            public event GetPaymentsOrdersRowChangeEventHandler GetPaymentsOrdersRowDeleted;
            
            public event GetPaymentsOrdersRowChangeEventHandler GetPaymentsOrdersRowDeleting;
            
            public void AddGetPaymentsOrdersRow(GetPaymentsOrdersRow row) {
                this.Rows.Add(row);
            }
            
            public GetPaymentsOrdersRow AddGetPaymentsOrdersRow(
                        int HeaderID, 
                        System.DateTime PaymentOrderDate, 
                        string PaymentNo, 
                        System.Double PaymentOrderSum, 
                        bool Direction, 
                        string PaymentOrderPurpose, 
                        string BankName, 
                        string KAccount, 
                        string CityName, 
                        string RAccount, 
                        string OrgName, 
                        string RequestTypeName, 
                        System.DateTime RequestDate, 
                        string ClientName, 
                        string ClientRequestRemarks, 
                        int ClientRequestID, 
                        int ClientID, 
                        int RequestTypeID, 
                        int OrgAccountIDCorr, 
                        int OrgID, 
                        int TransactionTypeID, 
                        string TransactionTypeName, 
                        string PaymOrderRemarks, 
                        int PaymentOrderStatusID, 
                        string PaymentOrderStatusName, 
                        bool PaymOrderLinked, 
                        System.Double ServiceCharge, 
                        string Purpose, 
                        string CurrencyTo, 
                        System.Double RequestSum) {
                GetPaymentsOrdersRow rowGetPaymentsOrdersRow = ((GetPaymentsOrdersRow)(this.NewRow()));
                rowGetPaymentsOrdersRow.ItemArray = new object[] {
                        null,
                        HeaderID,
                        PaymentOrderDate,
                        PaymentNo,
                        PaymentOrderSum,
                        Direction,
                        PaymentOrderPurpose,
                        BankName,
                        KAccount,
                        CityName,
                        RAccount,
                        OrgName,
                        RequestTypeName,
                        RequestDate,
                        ClientName,
                        ClientRequestRemarks,
                        null,
                        ClientRequestID,
                        ClientID,
                        RequestTypeID,
                        OrgAccountIDCorr,
                        OrgID,
                        TransactionTypeID,
                        TransactionTypeName,
                        PaymOrderRemarks,
                        PaymentOrderStatusID,
                        PaymentOrderStatusName,
                        PaymOrderLinked,
                        ServiceCharge,
                        Purpose,
                        CurrencyTo,
                        RequestSum};
                this.Rows.Add(rowGetPaymentsOrdersRow);
                return rowGetPaymentsOrdersRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GetPaymentsOrdersDataTable cln = ((GetPaymentsOrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GetPaymentsOrdersDataTable();
            }
            
            internal void InitVars() {
                this.columnPaymentOrderID = this.Columns["PaymentOrderID"];
                this.columnHeaderID = this.Columns["HeaderID"];
                this.columnPaymentOrderDate = this.Columns["PaymentOrderDate"];
                this.columnPaymentNo = this.Columns["PaymentNo"];
                this.columnPaymentOrderSum = this.Columns["PaymentOrderSum"];
                this.columnDirection = this.Columns["Direction"];
                this.columnPaymentOrderPurpose = this.Columns["PaymentOrderPurpose"];
                this.columnBankName = this.Columns["BankName"];
                this.columnKAccount = this.Columns["KAccount"];
                this.columnCityName = this.Columns["CityName"];
                this.columnRAccount = this.Columns["RAccount"];
                this.columnOrgName = this.Columns["OrgName"];
                this.columnRequestTypeName = this.Columns["RequestTypeName"];
                this.columnRequestDate = this.Columns["RequestDate"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnClientRequestRemarks = this.Columns["ClientRequestRemarks"];
                this.columnTransactionID = this.Columns["TransactionID"];
                this.columnClientRequestID = this.Columns["ClientRequestID"];
                this.columnClientID = this.Columns["ClientID"];
                this.columnRequestTypeID = this.Columns["RequestTypeID"];
                this.columnOrgAccountIDCorr = this.Columns["OrgAccountIDCorr"];
                this.columnOrgID = this.Columns["OrgID"];
                this.columnTransactionTypeID = this.Columns["TransactionTypeID"];
                this.columnTransactionTypeName = this.Columns["TransactionTypeName"];
                this.columnPaymOrderRemarks = this.Columns["PaymOrderRemarks"];
                this.columnPaymentOrderStatusID = this.Columns["PaymentOrderStatusID"];
                this.columnPaymentOrderStatusName = this.Columns["PaymentOrderStatusName"];
                this.columnPaymOrderLinked = this.Columns["PaymOrderLinked"];
                this.columnServiceCharge = this.Columns["ServiceCharge"];
                this.columnPurpose = this.Columns["Purpose"];
                this.columnCurrencyTo = this.Columns["CurrencyTo"];
                this.columnRequestSum = this.Columns["RequestSum"];
            }
            
            private void InitClass() {
                this.columnPaymentOrderID = new DataColumn("PaymentOrderID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderID);
                this.columnHeaderID = new DataColumn("HeaderID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderID);
                this.columnPaymentOrderDate = new DataColumn("PaymentOrderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderDate);
                this.columnPaymentNo = new DataColumn("PaymentNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentNo);
                this.columnPaymentOrderSum = new DataColumn("PaymentOrderSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderSum);
                this.columnDirection = new DataColumn("Direction", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDirection);
                this.columnPaymentOrderPurpose = new DataColumn("PaymentOrderPurpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderPurpose);
                this.columnBankName = new DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankName);
                this.columnKAccount = new DataColumn("KAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnKAccount);
                this.columnCityName = new DataColumn("CityName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCityName);
                this.columnRAccount = new DataColumn("RAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccount);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnRequestTypeName = new DataColumn("RequestTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestTypeName);
                this.columnRequestDate = new DataColumn("RequestDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestDate);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnClientRequestRemarks = new DataColumn("ClientRequestRemarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientRequestRemarks);
                this.columnTransactionID = new DataColumn("TransactionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionID);
                this.columnClientRequestID = new DataColumn("ClientRequestID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientRequestID);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnRequestTypeID = new DataColumn("RequestTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestTypeID);
                this.columnOrgAccountIDCorr = new DataColumn("OrgAccountIDCorr", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgAccountIDCorr);
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.columnTransactionTypeID = new DataColumn("TransactionTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeID);
                this.columnTransactionTypeName = new DataColumn("TransactionTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeName);
                this.columnPaymOrderRemarks = new DataColumn("PaymOrderRemarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymOrderRemarks);
                this.columnPaymentOrderStatusID = new DataColumn("PaymentOrderStatusID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderStatusID);
                this.columnPaymentOrderStatusName = new DataColumn("PaymentOrderStatusName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderStatusName);
                this.columnPaymOrderLinked = new DataColumn("PaymOrderLinked", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymOrderLinked);
                this.columnServiceCharge = new DataColumn("ServiceCharge", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServiceCharge);
                this.columnPurpose = new DataColumn("Purpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPurpose);
                this.columnCurrencyTo = new DataColumn("CurrencyTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyTo);
                this.columnRequestSum = new DataColumn("RequestSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestSum);
                this.columnPaymentOrderID.AutoIncrement = true;
                this.columnPaymentOrderID.AllowDBNull = false;
                this.columnPaymentOrderID.ReadOnly = true;
                this.columnPaymentOrderDate.AllowDBNull = false;
                this.columnPaymentNo.AllowDBNull = false;
                this.columnPaymentOrderSum.AllowDBNull = false;
                this.columnDirection.AllowDBNull = false;
                this.columnBankName.AllowDBNull = false;
                this.columnRAccount.AllowDBNull = false;
                this.columnOrgName.AllowDBNull = false;
                this.columnTransactionID.AutoIncrement = true;
                this.columnTransactionID.AllowDBNull = false;
                this.columnTransactionID.ReadOnly = true;
                this.columnOrgAccountIDCorr.AllowDBNull = false;
                this.columnOrgID.AllowDBNull = false;
                this.columnTransactionTypeID.AllowDBNull = false;
                this.columnTransactionTypeName.AllowDBNull = false;
                this.columnPaymentOrderStatusID.AllowDBNull = false;
                this.columnPaymentOrderStatusName.AllowDBNull = false;
                this.columnPaymOrderLinked.ReadOnly = true;
                this.columnServiceCharge.AllowDBNull = false;
            }
            
            public GetPaymentsOrdersRow NewGetPaymentsOrdersRow() {
                return ((GetPaymentsOrdersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GetPaymentsOrdersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GetPaymentsOrdersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetPaymentsOrdersRowChanged != null)) {
                    this.GetPaymentsOrdersRowChanged(this, new GetPaymentsOrdersRowChangeEvent(((GetPaymentsOrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetPaymentsOrdersRowChanging != null)) {
                    this.GetPaymentsOrdersRowChanging(this, new GetPaymentsOrdersRowChangeEvent(((GetPaymentsOrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetPaymentsOrdersRowDeleted != null)) {
                    this.GetPaymentsOrdersRowDeleted(this, new GetPaymentsOrdersRowChangeEvent(((GetPaymentsOrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetPaymentsOrdersRowDeleting != null)) {
                    this.GetPaymentsOrdersRowDeleting(this, new GetPaymentsOrdersRowChangeEvent(((GetPaymentsOrdersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGetPaymentsOrdersRow(GetPaymentsOrdersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetPaymentsOrdersRow : DataRow {
            
            private GetPaymentsOrdersDataTable tableGetPaymentsOrders;
            
            internal GetPaymentsOrdersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetPaymentsOrders = ((GetPaymentsOrdersDataTable)(this.Table));
            }
            
            public int PaymentOrderID {
                get {
                    return ((int)(this[this.tableGetPaymentsOrders.PaymentOrderIDColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.PaymentOrderIDColumn] = value;
                }
            }
            
            public int HeaderID {
                get {
                    try {
                        return ((int)(this[this.tableGetPaymentsOrders.HeaderIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.HeaderIDColumn] = value;
                }
            }
            
            public System.DateTime PaymentOrderDate {
                get {
                    return ((System.DateTime)(this[this.tableGetPaymentsOrders.PaymentOrderDateColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.PaymentOrderDateColumn] = value;
                }
            }
            
            public string PaymentNo {
                get {
                    return ((string)(this[this.tableGetPaymentsOrders.PaymentNoColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.PaymentNoColumn] = value;
                }
            }
            
            public System.Double PaymentOrderSum {
                get {
                    return ((System.Double)(this[this.tableGetPaymentsOrders.PaymentOrderSumColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.PaymentOrderSumColumn] = value;
                }
            }
            
            public bool Direction {
                get {
                    return ((bool)(this[this.tableGetPaymentsOrders.DirectionColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.DirectionColumn] = value;
                }
            }
            
            public string PaymentOrderPurpose {
                get {
                    try {
                        return ((string)(this[this.tableGetPaymentsOrders.PaymentOrderPurposeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.PaymentOrderPurposeColumn] = value;
                }
            }
            
            public string BankName {
                get {
                    return ((string)(this[this.tableGetPaymentsOrders.BankNameColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.BankNameColumn] = value;
                }
            }
            
            public string KAccount {
                get {
                    try {
                        return ((string)(this[this.tableGetPaymentsOrders.KAccountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.KAccountColumn] = value;
                }
            }
            
            public string CityName {
                get {
                    try {
                        return ((string)(this[this.tableGetPaymentsOrders.CityNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.CityNameColumn] = value;
                }
            }
            
            public string RAccount {
                get {
                    return ((string)(this[this.tableGetPaymentsOrders.RAccountColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.RAccountColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    return ((string)(this[this.tableGetPaymentsOrders.OrgNameColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.OrgNameColumn] = value;
                }
            }
            
            public string RequestTypeName {
                get {
                    try {
                        return ((string)(this[this.tableGetPaymentsOrders.RequestTypeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.RequestTypeNameColumn] = value;
                }
            }
            
            public System.DateTime RequestDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGetPaymentsOrders.RequestDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.RequestDateColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableGetPaymentsOrders.ClientNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.ClientNameColumn] = value;
                }
            }
            
            public string ClientRequestRemarks {
                get {
                    try {
                        return ((string)(this[this.tableGetPaymentsOrders.ClientRequestRemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.ClientRequestRemarksColumn] = value;
                }
            }
            
            public int TransactionID {
                get {
                    return ((int)(this[this.tableGetPaymentsOrders.TransactionIDColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.TransactionIDColumn] = value;
                }
            }
            
            public int ClientRequestID {
                get {
                    try {
                        return ((int)(this[this.tableGetPaymentsOrders.ClientRequestIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.ClientRequestIDColumn] = value;
                }
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableGetPaymentsOrders.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.ClientIDColumn] = value;
                }
            }
            
            public int RequestTypeID {
                get {
                    try {
                        return ((int)(this[this.tableGetPaymentsOrders.RequestTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.RequestTypeIDColumn] = value;
                }
            }
            
            public int OrgAccountIDCorr {
                get {
                    return ((int)(this[this.tableGetPaymentsOrders.OrgAccountIDCorrColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.OrgAccountIDCorrColumn] = value;
                }
            }
            
            public int OrgID {
                get {
                    return ((int)(this[this.tableGetPaymentsOrders.OrgIDColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.OrgIDColumn] = value;
                }
            }
            
            public int TransactionTypeID {
                get {
                    return ((int)(this[this.tableGetPaymentsOrders.TransactionTypeIDColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.TransactionTypeIDColumn] = value;
                }
            }
            
            public string TransactionTypeName {
                get {
                    return ((string)(this[this.tableGetPaymentsOrders.TransactionTypeNameColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.TransactionTypeNameColumn] = value;
                }
            }
            
            public string PaymOrderRemarks {
                get {
                    try {
                        return ((string)(this[this.tableGetPaymentsOrders.PaymOrderRemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.PaymOrderRemarksColumn] = value;
                }
            }
            
            public int PaymentOrderStatusID {
                get {
                    return ((int)(this[this.tableGetPaymentsOrders.PaymentOrderStatusIDColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.PaymentOrderStatusIDColumn] = value;
                }
            }
            
            public string PaymentOrderStatusName {
                get {
                    return ((string)(this[this.tableGetPaymentsOrders.PaymentOrderStatusNameColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.PaymentOrderStatusNameColumn] = value;
                }
            }
            
            public bool PaymOrderLinked {
                get {
                    try {
                        return ((bool)(this[this.tableGetPaymentsOrders.PaymOrderLinkedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.PaymOrderLinkedColumn] = value;
                }
            }
            
            public System.Double ServiceCharge {
                get {
                    return ((System.Double)(this[this.tableGetPaymentsOrders.ServiceChargeColumn]));
                }
                set {
                    this[this.tableGetPaymentsOrders.ServiceChargeColumn] = value;
                }
            }
            
            public string Purpose {
                get {
                    try {
                        return ((string)(this[this.tableGetPaymentsOrders.PurposeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.PurposeColumn] = value;
                }
            }
            
            public string CurrencyTo {
                get {
                    try {
                        return ((string)(this[this.tableGetPaymentsOrders.CurrencyToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.CurrencyToColumn] = value;
                }
            }
            
            public System.Double RequestSum {
                get {
                    try {
                        return ((System.Double)(this[this.tableGetPaymentsOrders.RequestSumColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetPaymentsOrders.RequestSumColumn] = value;
                }
            }
            
            public bool IsHeaderIDNull() {
                return this.IsNull(this.tableGetPaymentsOrders.HeaderIDColumn);
            }
            
            public void SetHeaderIDNull() {
                this[this.tableGetPaymentsOrders.HeaderIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentOrderPurposeNull() {
                return this.IsNull(this.tableGetPaymentsOrders.PaymentOrderPurposeColumn);
            }
            
            public void SetPaymentOrderPurposeNull() {
                this[this.tableGetPaymentsOrders.PaymentOrderPurposeColumn] = System.Convert.DBNull;
            }
            
            public bool IsKAccountNull() {
                return this.IsNull(this.tableGetPaymentsOrders.KAccountColumn);
            }
            
            public void SetKAccountNull() {
                this[this.tableGetPaymentsOrders.KAccountColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNameNull() {
                return this.IsNull(this.tableGetPaymentsOrders.CityNameColumn);
            }
            
            public void SetCityNameNull() {
                this[this.tableGetPaymentsOrders.CityNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsRequestTypeNameNull() {
                return this.IsNull(this.tableGetPaymentsOrders.RequestTypeNameColumn);
            }
            
            public void SetRequestTypeNameNull() {
                this[this.tableGetPaymentsOrders.RequestTypeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsRequestDateNull() {
                return this.IsNull(this.tableGetPaymentsOrders.RequestDateColumn);
            }
            
            public void SetRequestDateNull() {
                this[this.tableGetPaymentsOrders.RequestDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientNameNull() {
                return this.IsNull(this.tableGetPaymentsOrders.ClientNameColumn);
            }
            
            public void SetClientNameNull() {
                this[this.tableGetPaymentsOrders.ClientNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientRequestRemarksNull() {
                return this.IsNull(this.tableGetPaymentsOrders.ClientRequestRemarksColumn);
            }
            
            public void SetClientRequestRemarksNull() {
                this[this.tableGetPaymentsOrders.ClientRequestRemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientRequestIDNull() {
                return this.IsNull(this.tableGetPaymentsOrders.ClientRequestIDColumn);
            }
            
            public void SetClientRequestIDNull() {
                this[this.tableGetPaymentsOrders.ClientRequestIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableGetPaymentsOrders.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableGetPaymentsOrders.ClientIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRequestTypeIDNull() {
                return this.IsNull(this.tableGetPaymentsOrders.RequestTypeIDColumn);
            }
            
            public void SetRequestTypeIDNull() {
                this[this.tableGetPaymentsOrders.RequestTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymOrderRemarksNull() {
                return this.IsNull(this.tableGetPaymentsOrders.PaymOrderRemarksColumn);
            }
            
            public void SetPaymOrderRemarksNull() {
                this[this.tableGetPaymentsOrders.PaymOrderRemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymOrderLinkedNull() {
                return this.IsNull(this.tableGetPaymentsOrders.PaymOrderLinkedColumn);
            }
            
            public void SetPaymOrderLinkedNull() {
                this[this.tableGetPaymentsOrders.PaymOrderLinkedColumn] = System.Convert.DBNull;
            }
            
            public bool IsPurposeNull() {
                return this.IsNull(this.tableGetPaymentsOrders.PurposeColumn);
            }
            
            public void SetPurposeNull() {
                this[this.tableGetPaymentsOrders.PurposeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrencyToNull() {
                return this.IsNull(this.tableGetPaymentsOrders.CurrencyToColumn);
            }
            
            public void SetCurrencyToNull() {
                this[this.tableGetPaymentsOrders.CurrencyToColumn] = System.Convert.DBNull;
            }
            
            public bool IsRequestSumNull() {
                return this.IsNull(this.tableGetPaymentsOrders.RequestSumColumn);
            }
            
            public void SetRequestSumNull() {
                this[this.tableGetPaymentsOrders.RequestSumColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetPaymentsOrdersRowChangeEvent : EventArgs {
            
            private GetPaymentsOrdersRow eventRow;
            
            private DataRowAction eventAction;
            
            public GetPaymentsOrdersRowChangeEvent(GetPaymentsOrdersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GetPaymentsOrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
