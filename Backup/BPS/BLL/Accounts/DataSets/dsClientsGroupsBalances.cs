//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS._Forms {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsClientsGroupsBalances : DataSet {
        
        private AccountsDataTable tableAccounts;
        
        public dsClientsGroupsBalances() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsClientsGroupsBalances(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Accounts"] != null)) {
                    this.Tables.Add(new AccountsDataTable(ds.Tables["Accounts"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountsDataTable Accounts {
            get {
                return this.tableAccounts;
            }
        }
        
        public override DataSet Clone() {
            dsClientsGroupsBalances cln = ((dsClientsGroupsBalances)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Accounts"] != null)) {
                this.Tables.Add(new AccountsDataTable(ds.Tables["Accounts"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAccounts = ((AccountsDataTable)(this.Tables["Accounts"]));
            if ((this.tableAccounts != null)) {
                this.tableAccounts.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsClientsGroupsBalances";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsClientsGroupsBalances.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAccounts = new AccountsDataTable();
            this.Tables.Add(this.tableAccounts);
        }
        
        private bool ShouldSerializeAccounts() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AccountsRowChangeEventHandler(object sender, AccountsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClientGroupID;
            
            private DataColumn columnClientGroupName;
            
            private DataColumn columnCurrencyID;
            
            private DataColumn columnSumSaldo;
            
            private DataColumn columnSumSumReserved;
            
            private DataColumn columnSumSumWaited;
            
            private DataColumn columnSumSumFree;
            
            internal AccountsDataTable() : 
                    base("Accounts") {
                this.InitClass();
            }
            
            internal AccountsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClientGroupIDColumn {
                get {
                    return this.columnClientGroupID;
                }
            }
            
            internal DataColumn ClientGroupNameColumn {
                get {
                    return this.columnClientGroupName;
                }
            }
            
            internal DataColumn CurrencyIDColumn {
                get {
                    return this.columnCurrencyID;
                }
            }
            
            internal DataColumn SumSaldoColumn {
                get {
                    return this.columnSumSaldo;
                }
            }
            
            internal DataColumn SumSumReservedColumn {
                get {
                    return this.columnSumSumReserved;
                }
            }
            
            internal DataColumn SumSumWaitedColumn {
                get {
                    return this.columnSumSumWaited;
                }
            }
            
            internal DataColumn SumSumFreeColumn {
                get {
                    return this.columnSumSumFree;
                }
            }
            
            public AccountsRow this[int index] {
                get {
                    return ((AccountsRow)(this.Rows[index]));
                }
            }
            
            public event AccountsRowChangeEventHandler AccountsRowChanged;
            
            public event AccountsRowChangeEventHandler AccountsRowChanging;
            
            public event AccountsRowChangeEventHandler AccountsRowDeleted;
            
            public event AccountsRowChangeEventHandler AccountsRowDeleting;
            
            public void AddAccountsRow(AccountsRow row) {
                this.Rows.Add(row);
            }
            
            public AccountsRow AddAccountsRow(string ClientGroupName, string CurrencyID, System.Double SumSaldo, System.Double SumSumReserved, System.Double SumSumWaited, System.Double SumSumFree) {
                AccountsRow rowAccountsRow = ((AccountsRow)(this.NewRow()));
                rowAccountsRow.ItemArray = new object[] {
                        null,
                        ClientGroupName,
                        CurrencyID,
                        SumSaldo,
                        SumSumReserved,
                        SumSumWaited,
                        SumSumFree};
                this.Rows.Add(rowAccountsRow);
                return rowAccountsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AccountsDataTable cln = ((AccountsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AccountsDataTable();
            }
            
            internal void InitVars() {
                this.columnClientGroupID = this.Columns["ClientGroupID"];
                this.columnClientGroupName = this.Columns["ClientGroupName"];
                this.columnCurrencyID = this.Columns["CurrencyID"];
                this.columnSumSaldo = this.Columns["SumSaldo"];
                this.columnSumSumReserved = this.Columns["SumSumReserved"];
                this.columnSumSumWaited = this.Columns["SumSumWaited"];
                this.columnSumSumFree = this.Columns["SumSumFree"];
            }
            
            private void InitClass() {
                this.columnClientGroupID = new DataColumn("ClientGroupID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupID);
                this.columnClientGroupName = new DataColumn("ClientGroupName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupName);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyID);
                this.columnSumSaldo = new DataColumn("SumSaldo", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSumSaldo);
                this.columnSumSumReserved = new DataColumn("SumSumReserved", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSumSumReserved);
                this.columnSumSumWaited = new DataColumn("SumSumWaited", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSumSumWaited);
                this.columnSumSumFree = new DataColumn("SumSumFree", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSumSumFree);
                this.columnClientGroupID.AutoIncrement = true;
                this.columnClientGroupID.AllowDBNull = false;
                this.columnClientGroupID.ReadOnly = true;
                this.columnClientGroupName.AllowDBNull = false;
                this.columnCurrencyID.AllowDBNull = false;
                this.columnSumSaldo.ReadOnly = true;
                this.columnSumSumReserved.ReadOnly = true;
                this.columnSumSumWaited.ReadOnly = true;
                this.columnSumSumFree.ReadOnly = true;
            }
            
            public AccountsRow NewAccountsRow() {
                return ((AccountsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AccountsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AccountsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountsRowChanged != null)) {
                    this.AccountsRowChanged(this, new AccountsRowChangeEvent(((AccountsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountsRowChanging != null)) {
                    this.AccountsRowChanging(this, new AccountsRowChangeEvent(((AccountsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountsRowDeleted != null)) {
                    this.AccountsRowDeleted(this, new AccountsRowChangeEvent(((AccountsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountsRowDeleting != null)) {
                    this.AccountsRowDeleting(this, new AccountsRowChangeEvent(((AccountsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAccountsRow(AccountsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsRow : DataRow {
            
            private AccountsDataTable tableAccounts;
            
            internal AccountsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccounts = ((AccountsDataTable)(this.Table));
            }
            
            public int ClientGroupID {
                get {
                    return ((int)(this[this.tableAccounts.ClientGroupIDColumn]));
                }
                set {
                    this[this.tableAccounts.ClientGroupIDColumn] = value;
                }
            }
            
            public string ClientGroupName {
                get {
                    return ((string)(this[this.tableAccounts.ClientGroupNameColumn]));
                }
                set {
                    this[this.tableAccounts.ClientGroupNameColumn] = value;
                }
            }
            
            public string CurrencyID {
                get {
                    return ((string)(this[this.tableAccounts.CurrencyIDColumn]));
                }
                set {
                    this[this.tableAccounts.CurrencyIDColumn] = value;
                }
            }
            
            public System.Double SumSaldo {
                get {
                    try {
                        return ((System.Double)(this[this.tableAccounts.SumSaldoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccounts.SumSaldoColumn] = value;
                }
            }
            
            public System.Double SumSumReserved {
                get {
                    try {
                        return ((System.Double)(this[this.tableAccounts.SumSumReservedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccounts.SumSumReservedColumn] = value;
                }
            }
            
            public System.Double SumSumWaited {
                get {
                    try {
                        return ((System.Double)(this[this.tableAccounts.SumSumWaitedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccounts.SumSumWaitedColumn] = value;
                }
            }
            
            public System.Double SumSumFree {
                get {
                    try {
                        return ((System.Double)(this[this.tableAccounts.SumSumFreeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccounts.SumSumFreeColumn] = value;
                }
            }
            
            public bool IsSumSaldoNull() {
                return this.IsNull(this.tableAccounts.SumSaldoColumn);
            }
            
            public void SetSumSaldoNull() {
                this[this.tableAccounts.SumSaldoColumn] = System.Convert.DBNull;
            }
            
            public bool IsSumSumReservedNull() {
                return this.IsNull(this.tableAccounts.SumSumReservedColumn);
            }
            
            public void SetSumSumReservedNull() {
                this[this.tableAccounts.SumSumReservedColumn] = System.Convert.DBNull;
            }
            
            public bool IsSumSumWaitedNull() {
                return this.IsNull(this.tableAccounts.SumSumWaitedColumn);
            }
            
            public void SetSumSumWaitedNull() {
                this[this.tableAccounts.SumSumWaitedColumn] = System.Convert.DBNull;
            }
            
            public bool IsSumSumFreeNull() {
                return this.IsNull(this.tableAccounts.SumSumFreeColumn);
            }
            
            public void SetSumSumFreeNull() {
                this[this.tableAccounts.SumSumFreeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsRowChangeEvent : EventArgs {
            
            private AccountsRow eventRow;
            
            private DataRowAction eventAction;
            
            public AccountsRowChangeEvent(AccountsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AccountsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
