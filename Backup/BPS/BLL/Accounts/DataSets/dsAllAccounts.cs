//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.Accounts.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsAllAccounts : DataSet {
        
        private SelectAllAccountsDataTable tableSelectAllAccounts;
        
        private SelectAccountsOperationsDataTable tableSelectAccountsOperations;
        
        public dsAllAccounts() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsAllAccounts(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SelectAllAccounts"] != null)) {
                    this.Tables.Add(new SelectAllAccountsDataTable(ds.Tables["SelectAllAccounts"]));
                }
                if ((ds.Tables["SelectAccountsOperations"] != null)) {
                    this.Tables.Add(new SelectAccountsOperationsDataTable(ds.Tables["SelectAccountsOperations"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SelectAllAccountsDataTable SelectAllAccounts {
            get {
                return this.tableSelectAllAccounts;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SelectAccountsOperationsDataTable SelectAccountsOperations {
            get {
                return this.tableSelectAccountsOperations;
            }
        }
        
        public override DataSet Clone() {
            dsAllAccounts cln = ((dsAllAccounts)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["SelectAllAccounts"] != null)) {
                this.Tables.Add(new SelectAllAccountsDataTable(ds.Tables["SelectAllAccounts"]));
            }
            if ((ds.Tables["SelectAccountsOperations"] != null)) {
                this.Tables.Add(new SelectAccountsOperationsDataTable(ds.Tables["SelectAccountsOperations"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableSelectAllAccounts = ((SelectAllAccountsDataTable)(this.Tables["SelectAllAccounts"]));
            if ((this.tableSelectAllAccounts != null)) {
                this.tableSelectAllAccounts.InitVars();
            }
            this.tableSelectAccountsOperations = ((SelectAccountsOperationsDataTable)(this.Tables["SelectAccountsOperations"]));
            if ((this.tableSelectAccountsOperations != null)) {
                this.tableSelectAccountsOperations.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsAllAccounts";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsAllAccounts.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableSelectAllAccounts = new SelectAllAccountsDataTable();
            this.Tables.Add(this.tableSelectAllAccounts);
            this.tableSelectAccountsOperations = new SelectAccountsOperationsDataTable();
            this.Tables.Add(this.tableSelectAccountsOperations);
            this.InitExpressions();
        }
        
        private bool ShouldSerializeSelectAllAccounts() {
            return false;
        }
        
        private bool ShouldSerializeSelectAccountsOperations() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        private void InitExpressions() {
            this.tableSelectAllAccounts.DisposableSum_Column.Expression = "Saldo-SumReserved";
            this.tableSelectAccountsOperations.Приход_Column.Expression = "IIF(OperationDir,OperationSum, null)";
            this.tableSelectAccountsOperations.Расход_Column.Expression = "IIF(OperationDir, null,OperationSum)";
            this.tableSelectAccountsOperations.TransactionTypeNameX_Column.Expression = "iif(OperationTypeID=1,\'%%\',TransactiontypeName)";
            this.tableSelectAccountsOperations.ПлательщикColumn.Expression = "iif(PaymentsOrdersDirection,OrgNameCorr,OrgName)";
            this.tableSelectAccountsOperations.ПолучательColumn.Expression = "iif(PaymentsOrdersDirection,OrgName,OrgNameCorr)";
        }
        
        public delegate void SelectAllAccountsRowChangeEventHandler(object sender, SelectAllAccountsRowChangeEvent e);
        
        public delegate void SelectAccountsOperationsRowChangeEventHandler(object sender, SelectAccountsOperationsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SelectAllAccountsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClientID;
            
            private DataColumn columnSaldo;
            
            private DataColumn columnSumSent;
            
            private DataColumn columnSumReserved;
            
            private DataColumn columnSumWaited;
            
            private DataColumn columnIsDebit;
            
            private DataColumn columnCurrencyID;
            
            private DataColumn columnIsInner;
            
            private DataColumn columnAccountID;
            
            private DataColumn columnRAccount;
            
            private DataColumn columnOrgName;
            
            private DataColumn columnCodeINN;
            
            private DataColumn columnClientGroupID;
            
            private DataColumn columnClientName;
            
            private DataColumn columnClientsIsInner;
            
            private DataColumn columnIsSpecial;
            
            private DataColumn columnTypeName;
            
            private DataColumn columnForInnerOnly;
            
            private DataColumn columnAccountTypeID;
            
            private DataColumn columnOrgID;
            
            private DataColumn columnOrgsIsSpecial;
            
            private DataColumn columnClientGroupName;
            
            private DataColumn columnBankID;
            
            private DataColumn columnBankName;
            
            private DataColumn columnCityID;
            
            private DataColumn columnCityName;
            
            private DataColumn columnCodeBIK;
            
            private DataColumn columnKAccount;
            
            private DataColumn columnCurrencyRate;
            
            private DataColumn columnIsBase;
            
            private DataColumn columnIsNormal;
            
            private DataColumn columnDisposableSum_;
            
            internal SelectAllAccountsDataTable() : 
                    base("SelectAllAccounts") {
                this.InitClass();
            }
            
            internal SelectAllAccountsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn SaldoColumn {
                get {
                    return this.columnSaldo;
                }
            }
            
            internal DataColumn SumSentColumn {
                get {
                    return this.columnSumSent;
                }
            }
            
            internal DataColumn SumReservedColumn {
                get {
                    return this.columnSumReserved;
                }
            }
            
            internal DataColumn SumWaitedColumn {
                get {
                    return this.columnSumWaited;
                }
            }
            
            internal DataColumn IsDebitColumn {
                get {
                    return this.columnIsDebit;
                }
            }
            
            internal DataColumn CurrencyIDColumn {
                get {
                    return this.columnCurrencyID;
                }
            }
            
            internal DataColumn IsInnerColumn {
                get {
                    return this.columnIsInner;
                }
            }
            
            internal DataColumn AccountIDColumn {
                get {
                    return this.columnAccountID;
                }
            }
            
            internal DataColumn RAccountColumn {
                get {
                    return this.columnRAccount;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            internal DataColumn CodeINNColumn {
                get {
                    return this.columnCodeINN;
                }
            }
            
            internal DataColumn ClientGroupIDColumn {
                get {
                    return this.columnClientGroupID;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn ClientsIsInnerColumn {
                get {
                    return this.columnClientsIsInner;
                }
            }
            
            internal DataColumn IsSpecialColumn {
                get {
                    return this.columnIsSpecial;
                }
            }
            
            internal DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            internal DataColumn ForInnerOnlyColumn {
                get {
                    return this.columnForInnerOnly;
                }
            }
            
            internal DataColumn AccountTypeIDColumn {
                get {
                    return this.columnAccountTypeID;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            internal DataColumn OrgsIsSpecialColumn {
                get {
                    return this.columnOrgsIsSpecial;
                }
            }
            
            internal DataColumn ClientGroupNameColumn {
                get {
                    return this.columnClientGroupName;
                }
            }
            
            internal DataColumn BankIDColumn {
                get {
                    return this.columnBankID;
                }
            }
            
            internal DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            internal DataColumn CityIDColumn {
                get {
                    return this.columnCityID;
                }
            }
            
            internal DataColumn CityNameColumn {
                get {
                    return this.columnCityName;
                }
            }
            
            internal DataColumn CodeBIKColumn {
                get {
                    return this.columnCodeBIK;
                }
            }
            
            internal DataColumn KAccountColumn {
                get {
                    return this.columnKAccount;
                }
            }
            
            internal DataColumn CurrencyRateColumn {
                get {
                    return this.columnCurrencyRate;
                }
            }
            
            internal DataColumn IsBaseColumn {
                get {
                    return this.columnIsBase;
                }
            }
            
            internal DataColumn IsNormalColumn {
                get {
                    return this.columnIsNormal;
                }
            }
            
            internal DataColumn DisposableSum_Column {
                get {
                    return this.columnDisposableSum_;
                }
            }
            
            public SelectAllAccountsRow this[int index] {
                get {
                    return ((SelectAllAccountsRow)(this.Rows[index]));
                }
            }
            
            public event SelectAllAccountsRowChangeEventHandler SelectAllAccountsRowChanged;
            
            public event SelectAllAccountsRowChangeEventHandler SelectAllAccountsRowChanging;
            
            public event SelectAllAccountsRowChangeEventHandler SelectAllAccountsRowDeleted;
            
            public event SelectAllAccountsRowChangeEventHandler SelectAllAccountsRowDeleting;
            
            public void AddSelectAllAccountsRow(SelectAllAccountsRow row) {
                this.Rows.Add(row);
            }
            
            public SelectAllAccountsRow AddSelectAllAccountsRow(
                        int ClientID, 
                        System.Double Saldo, 
                        System.Double SumSent, 
                        System.Double SumReserved, 
                        System.Double SumWaited, 
                        bool IsDebit, 
                        string CurrencyID, 
                        bool IsInner, 
                        string RAccount, 
                        string OrgName, 
                        string CodeINN, 
                        int ClientGroupID, 
                        string ClientName, 
                        bool ClientsIsInner, 
                        bool IsSpecial, 
                        string TypeName, 
                        bool ForInnerOnly, 
                        int AccountTypeID, 
                        int OrgID, 
                        bool OrgsIsSpecial, 
                        string ClientGroupName, 
                        int BankID, 
                        string BankName, 
                        int CityID, 
                        string CityName, 
                        string CodeBIK, 
                        string KAccount, 
                        System.Double CurrencyRate, 
                        bool IsBase, 
                        bool IsNormal, 
                        System.Double DisposableSum_) {
                SelectAllAccountsRow rowSelectAllAccountsRow = ((SelectAllAccountsRow)(this.NewRow()));
                rowSelectAllAccountsRow.ItemArray = new object[] {
                        ClientID,
                        Saldo,
                        SumSent,
                        SumReserved,
                        SumWaited,
                        IsDebit,
                        CurrencyID,
                        IsInner,
                        null,
                        RAccount,
                        OrgName,
                        CodeINN,
                        ClientGroupID,
                        ClientName,
                        ClientsIsInner,
                        IsSpecial,
                        TypeName,
                        ForInnerOnly,
                        AccountTypeID,
                        OrgID,
                        OrgsIsSpecial,
                        ClientGroupName,
                        BankID,
                        BankName,
                        CityID,
                        CityName,
                        CodeBIK,
                        KAccount,
                        CurrencyRate,
                        IsBase,
                        IsNormal,
                        DisposableSum_};
                this.Rows.Add(rowSelectAllAccountsRow);
                return rowSelectAllAccountsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SelectAllAccountsDataTable cln = ((SelectAllAccountsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SelectAllAccountsDataTable();
            }
            
            internal void InitVars() {
                this.columnClientID = this.Columns["ClientID"];
                this.columnSaldo = this.Columns["Saldo"];
                this.columnSumSent = this.Columns["SumSent"];
                this.columnSumReserved = this.Columns["SumReserved"];
                this.columnSumWaited = this.Columns["SumWaited"];
                this.columnIsDebit = this.Columns["IsDebit"];
                this.columnCurrencyID = this.Columns["CurrencyID"];
                this.columnIsInner = this.Columns["IsInner"];
                this.columnAccountID = this.Columns["AccountID"];
                this.columnRAccount = this.Columns["RAccount"];
                this.columnOrgName = this.Columns["OrgName"];
                this.columnCodeINN = this.Columns["CodeINN"];
                this.columnClientGroupID = this.Columns["ClientGroupID"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnClientsIsInner = this.Columns["ClientsIsInner"];
                this.columnIsSpecial = this.Columns["IsSpecial"];
                this.columnTypeName = this.Columns["TypeName"];
                this.columnForInnerOnly = this.Columns["ForInnerOnly"];
                this.columnAccountTypeID = this.Columns["AccountTypeID"];
                this.columnOrgID = this.Columns["OrgID"];
                this.columnOrgsIsSpecial = this.Columns["OrgsIsSpecial"];
                this.columnClientGroupName = this.Columns["ClientGroupName"];
                this.columnBankID = this.Columns["BankID"];
                this.columnBankName = this.Columns["BankName"];
                this.columnCityID = this.Columns["CityID"];
                this.columnCityName = this.Columns["CityName"];
                this.columnCodeBIK = this.Columns["CodeBIK"];
                this.columnKAccount = this.Columns["KAccount"];
                this.columnCurrencyRate = this.Columns["CurrencyRate"];
                this.columnIsBase = this.Columns["IsBase"];
                this.columnIsNormal = this.Columns["IsNormal"];
                this.columnDisposableSum_ = this.Columns["DisposableSum "];
            }
            
            private void InitClass() {
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnSaldo = new DataColumn("Saldo", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSaldo);
                this.columnSumSent = new DataColumn("SumSent", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSumSent);
                this.columnSumReserved = new DataColumn("SumReserved", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSumReserved);
                this.columnSumWaited = new DataColumn("SumWaited", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSumWaited);
                this.columnIsDebit = new DataColumn("IsDebit", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDebit);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyID);
                this.columnIsInner = new DataColumn("IsInner", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInner);
                this.columnAccountID = new DataColumn("AccountID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountID);
                this.columnRAccount = new DataColumn("RAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccount);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnCodeINN = new DataColumn("CodeINN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeINN);
                this.columnClientGroupID = new DataColumn("ClientGroupID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupID);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnClientsIsInner = new DataColumn("ClientsIsInner", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientsIsInner);
                this.columnIsSpecial = new DataColumn("IsSpecial", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsSpecial);
                this.columnTypeName = new DataColumn("TypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTypeName);
                this.columnForInnerOnly = new DataColumn("ForInnerOnly", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnForInnerOnly);
                this.columnAccountTypeID = new DataColumn("AccountTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountTypeID);
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.columnOrgsIsSpecial = new DataColumn("OrgsIsSpecial", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgsIsSpecial);
                this.columnClientGroupName = new DataColumn("ClientGroupName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupName);
                this.columnBankID = new DataColumn("BankID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankID);
                this.columnBankName = new DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankName);
                this.columnCityID = new DataColumn("CityID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCityID);
                this.columnCityName = new DataColumn("CityName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCityName);
                this.columnCodeBIK = new DataColumn("CodeBIK", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeBIK);
                this.columnKAccount = new DataColumn("KAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnKAccount);
                this.columnCurrencyRate = new DataColumn("CurrencyRate", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyRate);
                this.columnIsBase = new DataColumn("IsBase", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsBase);
                this.columnIsNormal = new DataColumn("IsNormal", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsNormal);
                this.columnDisposableSum_ = new DataColumn("DisposableSum ", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDisposableSum_);
                this.columnSaldo.AllowDBNull = false;
                this.columnSumSent.AllowDBNull = false;
                this.columnSumReserved.AllowDBNull = false;
                this.columnSumWaited.AllowDBNull = false;
                this.columnIsDebit.AllowDBNull = false;
                this.columnCurrencyID.AllowDBNull = false;
                this.columnAccountID.AutoIncrement = true;
                this.columnAccountID.AllowDBNull = false;
                this.columnAccountID.ReadOnly = true;
                this.columnTypeName.AllowDBNull = false;
                this.columnForInnerOnly.AllowDBNull = false;
                this.columnAccountTypeID.AllowDBNull = false;
                this.columnCurrencyRate.AllowDBNull = false;
                this.columnIsBase.AllowDBNull = false;
                this.columnDisposableSum_.ReadOnly = true;
            }
            
            public SelectAllAccountsRow NewSelectAllAccountsRow() {
                return ((SelectAllAccountsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SelectAllAccountsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SelectAllAccountsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SelectAllAccountsRowChanged != null)) {
                    this.SelectAllAccountsRowChanged(this, new SelectAllAccountsRowChangeEvent(((SelectAllAccountsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SelectAllAccountsRowChanging != null)) {
                    this.SelectAllAccountsRowChanging(this, new SelectAllAccountsRowChangeEvent(((SelectAllAccountsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SelectAllAccountsRowDeleted != null)) {
                    this.SelectAllAccountsRowDeleted(this, new SelectAllAccountsRowChangeEvent(((SelectAllAccountsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SelectAllAccountsRowDeleting != null)) {
                    this.SelectAllAccountsRowDeleting(this, new SelectAllAccountsRowChangeEvent(((SelectAllAccountsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSelectAllAccountsRow(SelectAllAccountsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SelectAllAccountsRow : DataRow {
            
            private SelectAllAccountsDataTable tableSelectAllAccounts;
            
            internal SelectAllAccountsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelectAllAccounts = ((SelectAllAccountsDataTable)(this.Table));
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableSelectAllAccounts.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.ClientIDColumn] = value;
                }
            }
            
            public System.Double Saldo {
                get {
                    return ((System.Double)(this[this.tableSelectAllAccounts.SaldoColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.SaldoColumn] = value;
                }
            }
            
            public System.Double SumSent {
                get {
                    return ((System.Double)(this[this.tableSelectAllAccounts.SumSentColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.SumSentColumn] = value;
                }
            }
            
            public System.Double SumReserved {
                get {
                    return ((System.Double)(this[this.tableSelectAllAccounts.SumReservedColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.SumReservedColumn] = value;
                }
            }
            
            public System.Double SumWaited {
                get {
                    return ((System.Double)(this[this.tableSelectAllAccounts.SumWaitedColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.SumWaitedColumn] = value;
                }
            }
            
            public bool IsDebit {
                get {
                    return ((bool)(this[this.tableSelectAllAccounts.IsDebitColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.IsDebitColumn] = value;
                }
            }
            
            public string CurrencyID {
                get {
                    return ((string)(this[this.tableSelectAllAccounts.CurrencyIDColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.CurrencyIDColumn] = value;
                }
            }
            
            public bool IsInner {
                get {
                    try {
                        return ((bool)(this[this.tableSelectAllAccounts.IsInnerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.IsInnerColumn] = value;
                }
            }
            
            public int AccountID {
                get {
                    return ((int)(this[this.tableSelectAllAccounts.AccountIDColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.AccountIDColumn] = value;
                }
            }
            
            public string RAccount {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllAccounts.RAccountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.RAccountColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllAccounts.OrgNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.OrgNameColumn] = value;
                }
            }
            
            public string CodeINN {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllAccounts.CodeINNColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.CodeINNColumn] = value;
                }
            }
            
            public int ClientGroupID {
                get {
                    try {
                        return ((int)(this[this.tableSelectAllAccounts.ClientGroupIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.ClientGroupIDColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllAccounts.ClientNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.ClientNameColumn] = value;
                }
            }
            
            public bool ClientsIsInner {
                get {
                    try {
                        return ((bool)(this[this.tableSelectAllAccounts.ClientsIsInnerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.ClientsIsInnerColumn] = value;
                }
            }
            
            public bool IsSpecial {
                get {
                    try {
                        return ((bool)(this[this.tableSelectAllAccounts.IsSpecialColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.IsSpecialColumn] = value;
                }
            }
            
            public string TypeName {
                get {
                    return ((string)(this[this.tableSelectAllAccounts.TypeNameColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.TypeNameColumn] = value;
                }
            }
            
            public bool ForInnerOnly {
                get {
                    return ((bool)(this[this.tableSelectAllAccounts.ForInnerOnlyColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.ForInnerOnlyColumn] = value;
                }
            }
            
            public int AccountTypeID {
                get {
                    return ((int)(this[this.tableSelectAllAccounts.AccountTypeIDColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.AccountTypeIDColumn] = value;
                }
            }
            
            public int OrgID {
                get {
                    try {
                        return ((int)(this[this.tableSelectAllAccounts.OrgIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.OrgIDColumn] = value;
                }
            }
            
            public bool OrgsIsSpecial {
                get {
                    try {
                        return ((bool)(this[this.tableSelectAllAccounts.OrgsIsSpecialColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.OrgsIsSpecialColumn] = value;
                }
            }
            
            public string ClientGroupName {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllAccounts.ClientGroupNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.ClientGroupNameColumn] = value;
                }
            }
            
            public int BankID {
                get {
                    try {
                        return ((int)(this[this.tableSelectAllAccounts.BankIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.BankIDColumn] = value;
                }
            }
            
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllAccounts.BankNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.BankNameColumn] = value;
                }
            }
            
            public int CityID {
                get {
                    try {
                        return ((int)(this[this.tableSelectAllAccounts.CityIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.CityIDColumn] = value;
                }
            }
            
            public string CityName {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllAccounts.CityNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.CityNameColumn] = value;
                }
            }
            
            public string CodeBIK {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllAccounts.CodeBIKColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.CodeBIKColumn] = value;
                }
            }
            
            public string KAccount {
                get {
                    try {
                        return ((string)(this[this.tableSelectAllAccounts.KAccountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.KAccountColumn] = value;
                }
            }
            
            public System.Double CurrencyRate {
                get {
                    return ((System.Double)(this[this.tableSelectAllAccounts.CurrencyRateColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.CurrencyRateColumn] = value;
                }
            }
            
            public bool IsBase {
                get {
                    return ((bool)(this[this.tableSelectAllAccounts.IsBaseColumn]));
                }
                set {
                    this[this.tableSelectAllAccounts.IsBaseColumn] = value;
                }
            }
            
            public bool IsNormal {
                get {
                    try {
                        return ((bool)(this[this.tableSelectAllAccounts.IsNormalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.IsNormalColumn] = value;
                }
            }
            
            public System.Double DisposableSum_ {
                get {
                    try {
                        return ((System.Double)(this[this.tableSelectAllAccounts.DisposableSum_Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAllAccounts.DisposableSum_Column] = value;
                }
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableSelectAllAccounts.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableSelectAllAccounts.ClientIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsInnerNull() {
                return this.IsNull(this.tableSelectAllAccounts.IsInnerColumn);
            }
            
            public void SetIsInnerNull() {
                this[this.tableSelectAllAccounts.IsInnerColumn] = System.Convert.DBNull;
            }
            
            public bool IsRAccountNull() {
                return this.IsNull(this.tableSelectAllAccounts.RAccountColumn);
            }
            
            public void SetRAccountNull() {
                this[this.tableSelectAllAccounts.RAccountColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgNameNull() {
                return this.IsNull(this.tableSelectAllAccounts.OrgNameColumn);
            }
            
            public void SetOrgNameNull() {
                this[this.tableSelectAllAccounts.OrgNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeINNNull() {
                return this.IsNull(this.tableSelectAllAccounts.CodeINNColumn);
            }
            
            public void SetCodeINNNull() {
                this[this.tableSelectAllAccounts.CodeINNColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientGroupIDNull() {
                return this.IsNull(this.tableSelectAllAccounts.ClientGroupIDColumn);
            }
            
            public void SetClientGroupIDNull() {
                this[this.tableSelectAllAccounts.ClientGroupIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientNameNull() {
                return this.IsNull(this.tableSelectAllAccounts.ClientNameColumn);
            }
            
            public void SetClientNameNull() {
                this[this.tableSelectAllAccounts.ClientNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientsIsInnerNull() {
                return this.IsNull(this.tableSelectAllAccounts.ClientsIsInnerColumn);
            }
            
            public void SetClientsIsInnerNull() {
                this[this.tableSelectAllAccounts.ClientsIsInnerColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsSpecialNull() {
                return this.IsNull(this.tableSelectAllAccounts.IsSpecialColumn);
            }
            
            public void SetIsSpecialNull() {
                this[this.tableSelectAllAccounts.IsSpecialColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgIDNull() {
                return this.IsNull(this.tableSelectAllAccounts.OrgIDColumn);
            }
            
            public void SetOrgIDNull() {
                this[this.tableSelectAllAccounts.OrgIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgsIsSpecialNull() {
                return this.IsNull(this.tableSelectAllAccounts.OrgsIsSpecialColumn);
            }
            
            public void SetOrgsIsSpecialNull() {
                this[this.tableSelectAllAccounts.OrgsIsSpecialColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientGroupNameNull() {
                return this.IsNull(this.tableSelectAllAccounts.ClientGroupNameColumn);
            }
            
            public void SetClientGroupNameNull() {
                this[this.tableSelectAllAccounts.ClientGroupNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsBankIDNull() {
                return this.IsNull(this.tableSelectAllAccounts.BankIDColumn);
            }
            
            public void SetBankIDNull() {
                this[this.tableSelectAllAccounts.BankIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsBankNameNull() {
                return this.IsNull(this.tableSelectAllAccounts.BankNameColumn);
            }
            
            public void SetBankNameNull() {
                this[this.tableSelectAllAccounts.BankNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityIDNull() {
                return this.IsNull(this.tableSelectAllAccounts.CityIDColumn);
            }
            
            public void SetCityIDNull() {
                this[this.tableSelectAllAccounts.CityIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNameNull() {
                return this.IsNull(this.tableSelectAllAccounts.CityNameColumn);
            }
            
            public void SetCityNameNull() {
                this[this.tableSelectAllAccounts.CityNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeBIKNull() {
                return this.IsNull(this.tableSelectAllAccounts.CodeBIKColumn);
            }
            
            public void SetCodeBIKNull() {
                this[this.tableSelectAllAccounts.CodeBIKColumn] = System.Convert.DBNull;
            }
            
            public bool IsKAccountNull() {
                return this.IsNull(this.tableSelectAllAccounts.KAccountColumn);
            }
            
            public void SetKAccountNull() {
                this[this.tableSelectAllAccounts.KAccountColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsNormalNull() {
                return this.IsNull(this.tableSelectAllAccounts.IsNormalColumn);
            }
            
            public void SetIsNormalNull() {
                this[this.tableSelectAllAccounts.IsNormalColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisposableSum_Null() {
                return this.IsNull(this.tableSelectAllAccounts.DisposableSum_Column);
            }
            
            public void SetDisposableSum_Null() {
                this[this.tableSelectAllAccounts.DisposableSum_Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SelectAllAccountsRowChangeEvent : EventArgs {
            
            private SelectAllAccountsRow eventRow;
            
            private DataRowAction eventAction;
            
            public SelectAllAccountsRowChangeEvent(SelectAllAccountsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SelectAllAccountsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SelectAccountsOperationsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnInitDate;
            
            private DataColumn columnCompleteDate;
            
            private DataColumn columnOperationID;
            
            private DataColumn columnTransactionOperationID;
            
            private DataColumn columnOperationIsPrimary;
            
            private DataColumn columnOperationSum;
            
            private DataColumn columnOperationDir;
            
            private DataColumn columnAccountID;
            
            private DataColumn columnTransactionTypeName;
            
            private DataColumn columnPostedDate;
            
            private DataColumn columnCommitedDate;
            
            private DataColumn columnOperationTypeID;
            
            private DataColumn columnPaymentNo;
            
            private DataColumn columnPaymentOrderDate;
            
            private DataColumn columnPaymentsOrdersDirection;
            
            private DataColumn columnOrgName;
            
            private DataColumn columnOrgNameCorr;
            
            private DataColumn columnOrgID;
            
            private DataColumn columnOrgIDCorr;
            
            private DataColumn columnAccountTypeID;
            
            private DataColumn columnClientID;
            
            private DataColumn columnClientGroupID;
            
            private DataColumn columnClientName;
            
            private DataColumn columnClientGroupName;
            
            private DataColumn columnПриход_;
            
            private DataColumn columnРасход_;
            
            private DataColumn columnTransactionTypeNameX_;
            
            private DataColumn columnПлательщик;
            
            private DataColumn columnПолучатель;
            
            private DataColumn columnCurrencyID;
            
            private DataColumn columnRAccount;
            
            private DataColumn columnCurrencyRate;
            
            private DataColumn columnTransactionCompleted;
            
            private DataColumn columnHeaderDate;
            
            private DataColumn columnFinishDate;
            
            private DataColumn columnPaymentOrderPurpose;
            
            internal SelectAccountsOperationsDataTable() : 
                    base("SelectAccountsOperations") {
                this.InitClass();
            }
            
            internal SelectAccountsOperationsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn InitDateColumn {
                get {
                    return this.columnInitDate;
                }
            }
            
            internal DataColumn CompleteDateColumn {
                get {
                    return this.columnCompleteDate;
                }
            }
            
            internal DataColumn OperationIDColumn {
                get {
                    return this.columnOperationID;
                }
            }
            
            internal DataColumn TransactionOperationIDColumn {
                get {
                    return this.columnTransactionOperationID;
                }
            }
            
            internal DataColumn OperationIsPrimaryColumn {
                get {
                    return this.columnOperationIsPrimary;
                }
            }
            
            internal DataColumn OperationSumColumn {
                get {
                    return this.columnOperationSum;
                }
            }
            
            internal DataColumn OperationDirColumn {
                get {
                    return this.columnOperationDir;
                }
            }
            
            internal DataColumn AccountIDColumn {
                get {
                    return this.columnAccountID;
                }
            }
            
            internal DataColumn TransactionTypeNameColumn {
                get {
                    return this.columnTransactionTypeName;
                }
            }
            
            internal DataColumn PostedDateColumn {
                get {
                    return this.columnPostedDate;
                }
            }
            
            internal DataColumn CommitedDateColumn {
                get {
                    return this.columnCommitedDate;
                }
            }
            
            internal DataColumn OperationTypeIDColumn {
                get {
                    return this.columnOperationTypeID;
                }
            }
            
            internal DataColumn PaymentNoColumn {
                get {
                    return this.columnPaymentNo;
                }
            }
            
            internal DataColumn PaymentOrderDateColumn {
                get {
                    return this.columnPaymentOrderDate;
                }
            }
            
            internal DataColumn PaymentsOrdersDirectionColumn {
                get {
                    return this.columnPaymentsOrdersDirection;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            internal DataColumn OrgNameCorrColumn {
                get {
                    return this.columnOrgNameCorr;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            internal DataColumn OrgIDCorrColumn {
                get {
                    return this.columnOrgIDCorr;
                }
            }
            
            internal DataColumn AccountTypeIDColumn {
                get {
                    return this.columnAccountTypeID;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn ClientGroupIDColumn {
                get {
                    return this.columnClientGroupID;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn ClientGroupNameColumn {
                get {
                    return this.columnClientGroupName;
                }
            }
            
            internal DataColumn Приход_Column {
                get {
                    return this.columnПриход_;
                }
            }
            
            internal DataColumn Расход_Column {
                get {
                    return this.columnРасход_;
                }
            }
            
            internal DataColumn TransactionTypeNameX_Column {
                get {
                    return this.columnTransactionTypeNameX_;
                }
            }
            
            internal DataColumn ПлательщикColumn {
                get {
                    return this.columnПлательщик;
                }
            }
            
            internal DataColumn ПолучательColumn {
                get {
                    return this.columnПолучатель;
                }
            }
            
            internal DataColumn CurrencyIDColumn {
                get {
                    return this.columnCurrencyID;
                }
            }
            
            internal DataColumn RAccountColumn {
                get {
                    return this.columnRAccount;
                }
            }
            
            internal DataColumn CurrencyRateColumn {
                get {
                    return this.columnCurrencyRate;
                }
            }
            
            internal DataColumn TransactionCompletedColumn {
                get {
                    return this.columnTransactionCompleted;
                }
            }
            
            internal DataColumn HeaderDateColumn {
                get {
                    return this.columnHeaderDate;
                }
            }
            
            internal DataColumn FinishDateColumn {
                get {
                    return this.columnFinishDate;
                }
            }
            
            internal DataColumn PaymentOrderPurposeColumn {
                get {
                    return this.columnPaymentOrderPurpose;
                }
            }
            
            public SelectAccountsOperationsRow this[int index] {
                get {
                    return ((SelectAccountsOperationsRow)(this.Rows[index]));
                }
            }
            
            public event SelectAccountsOperationsRowChangeEventHandler SelectAccountsOperationsRowChanged;
            
            public event SelectAccountsOperationsRowChangeEventHandler SelectAccountsOperationsRowChanging;
            
            public event SelectAccountsOperationsRowChangeEventHandler SelectAccountsOperationsRowDeleted;
            
            public event SelectAccountsOperationsRowChangeEventHandler SelectAccountsOperationsRowDeleting;
            
            public void AddSelectAccountsOperationsRow(SelectAccountsOperationsRow row) {
                this.Rows.Add(row);
            }
            
            public SelectAccountsOperationsRow AddSelectAccountsOperationsRow(
                        System.DateTime InitDate, 
                        System.DateTime CompleteDate, 
                        int TransactionOperationID, 
                        bool OperationIsPrimary, 
                        System.Double OperationSum, 
                        bool OperationDir, 
                        int AccountID, 
                        string TransactionTypeName, 
                        System.DateTime PostedDate, 
                        System.DateTime CommitedDate, 
                        int OperationTypeID, 
                        string PaymentNo, 
                        System.DateTime PaymentOrderDate, 
                        bool PaymentsOrdersDirection, 
                        string OrgName, 
                        string OrgNameCorr, 
                        int AccountTypeID, 
                        int ClientGroupID, 
                        string ClientName, 
                        string ClientGroupName, 
                        System.Double Приход_, 
                        System.Double Расход_, 
                        string TransactionTypeNameX_, 
                        string Плательщик, 
                        string Получатель, 
                        string CurrencyID, 
                        string RAccount, 
                        System.Double CurrencyRate, 
                        bool TransactionCompleted, 
                        System.DateTime HeaderDate, 
                        System.DateTime FinishDate, 
                        string PaymentOrderPurpose) {
                SelectAccountsOperationsRow rowSelectAccountsOperationsRow = ((SelectAccountsOperationsRow)(this.NewRow()));
                rowSelectAccountsOperationsRow.ItemArray = new object[] {
                        InitDate,
                        CompleteDate,
                        null,
                        TransactionOperationID,
                        OperationIsPrimary,
                        OperationSum,
                        OperationDir,
                        AccountID,
                        TransactionTypeName,
                        PostedDate,
                        CommitedDate,
                        OperationTypeID,
                        PaymentNo,
                        PaymentOrderDate,
                        PaymentsOrdersDirection,
                        OrgName,
                        OrgNameCorr,
                        null,
                        null,
                        AccountTypeID,
                        null,
                        ClientGroupID,
                        ClientName,
                        ClientGroupName,
                        Приход_,
                        Расход_,
                        TransactionTypeNameX_,
                        Плательщик,
                        Получатель,
                        CurrencyID,
                        RAccount,
                        CurrencyRate,
                        TransactionCompleted,
                        HeaderDate,
                        FinishDate,
                        PaymentOrderPurpose};
                this.Rows.Add(rowSelectAccountsOperationsRow);
                return rowSelectAccountsOperationsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SelectAccountsOperationsDataTable cln = ((SelectAccountsOperationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SelectAccountsOperationsDataTable();
            }
            
            internal void InitVars() {
                this.columnInitDate = this.Columns["InitDate"];
                this.columnCompleteDate = this.Columns["CompleteDate"];
                this.columnOperationID = this.Columns["OperationID"];
                this.columnTransactionOperationID = this.Columns["TransactionOperationID"];
                this.columnOperationIsPrimary = this.Columns["OperationIsPrimary"];
                this.columnOperationSum = this.Columns["OperationSum"];
                this.columnOperationDir = this.Columns["OperationDir"];
                this.columnAccountID = this.Columns["AccountID"];
                this.columnTransactionTypeName = this.Columns["TransactionTypeName"];
                this.columnPostedDate = this.Columns["PostedDate"];
                this.columnCommitedDate = this.Columns["CommitedDate"];
                this.columnOperationTypeID = this.Columns["OperationTypeID"];
                this.columnPaymentNo = this.Columns["PaymentNo"];
                this.columnPaymentOrderDate = this.Columns["PaymentOrderDate"];
                this.columnPaymentsOrdersDirection = this.Columns["PaymentsOrdersDirection"];
                this.columnOrgName = this.Columns["OrgName"];
                this.columnOrgNameCorr = this.Columns["OrgNameCorr"];
                this.columnOrgID = this.Columns["OrgID"];
                this.columnOrgIDCorr = this.Columns["OrgIDCorr"];
                this.columnAccountTypeID = this.Columns["AccountTypeID"];
                this.columnClientID = this.Columns["ClientID"];
                this.columnClientGroupID = this.Columns["ClientGroupID"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnClientGroupName = this.Columns["ClientGroupName"];
                this.columnПриход_ = this.Columns["Приход "];
                this.columnРасход_ = this.Columns["Расход "];
                this.columnTransactionTypeNameX_ = this.Columns["TransactionTypeNameX "];
                this.columnПлательщик = this.Columns["Плательщик"];
                this.columnПолучатель = this.Columns["Получатель"];
                this.columnCurrencyID = this.Columns["CurrencyID"];
                this.columnRAccount = this.Columns["RAccount"];
                this.columnCurrencyRate = this.Columns["CurrencyRate"];
                this.columnTransactionCompleted = this.Columns["TransactionCompleted"];
                this.columnHeaderDate = this.Columns["HeaderDate"];
                this.columnFinishDate = this.Columns["FinishDate"];
                this.columnPaymentOrderPurpose = this.Columns["PaymentOrderPurpose"];
            }
            
            private void InitClass() {
                this.columnInitDate = new DataColumn("InitDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInitDate);
                this.columnCompleteDate = new DataColumn("CompleteDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompleteDate);
                this.columnOperationID = new DataColumn("OperationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOperationID);
                this.columnTransactionOperationID = new DataColumn("TransactionOperationID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionOperationID);
                this.columnOperationIsPrimary = new DataColumn("OperationIsPrimary", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOperationIsPrimary);
                this.columnOperationSum = new DataColumn("OperationSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOperationSum);
                this.columnOperationDir = new DataColumn("OperationDir", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOperationDir);
                this.columnAccountID = new DataColumn("AccountID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountID);
                this.columnTransactionTypeName = new DataColumn("TransactionTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeName);
                this.columnPostedDate = new DataColumn("PostedDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostedDate);
                this.columnCommitedDate = new DataColumn("CommitedDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommitedDate);
                this.columnOperationTypeID = new DataColumn("OperationTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOperationTypeID);
                this.columnPaymentNo = new DataColumn("PaymentNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentNo);
                this.columnPaymentOrderDate = new DataColumn("PaymentOrderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderDate);
                this.columnPaymentsOrdersDirection = new DataColumn("PaymentsOrdersDirection", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentsOrdersDirection);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnOrgNameCorr = new DataColumn("OrgNameCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgNameCorr);
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.columnOrgIDCorr = new DataColumn("OrgIDCorr", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgIDCorr);
                this.columnAccountTypeID = new DataColumn("AccountTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountTypeID);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnClientGroupID = new DataColumn("ClientGroupID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupID);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnClientGroupName = new DataColumn("ClientGroupName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupName);
                this.columnПриход_ = new DataColumn("Приход ", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnПриход_);
                this.columnРасход_ = new DataColumn("Расход ", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnРасход_);
                this.columnTransactionTypeNameX_ = new DataColumn("TransactionTypeNameX ", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeNameX_);
                this.columnПлательщик = new DataColumn("Плательщик", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnПлательщик);
                this.columnПолучатель = new DataColumn("Получатель", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnПолучатель);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyID);
                this.columnRAccount = new DataColumn("RAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccount);
                this.columnCurrencyRate = new DataColumn("CurrencyRate", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyRate);
                this.columnTransactionCompleted = new DataColumn("TransactionCompleted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionCompleted);
                this.columnHeaderDate = new DataColumn("HeaderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderDate);
                this.columnFinishDate = new DataColumn("FinishDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFinishDate);
                this.columnPaymentOrderPurpose = new DataColumn("PaymentOrderPurpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderPurpose);
                this.columnInitDate.ReadOnly = true;
                this.columnCompleteDate.ReadOnly = true;
                this.columnOperationID.AutoIncrement = true;
                this.columnOperationID.AllowDBNull = false;
                this.columnOperationID.ReadOnly = true;
                this.columnTransactionOperationID.AllowDBNull = false;
                this.columnOperationIsPrimary.AllowDBNull = false;
                this.columnOperationSum.AllowDBNull = false;
                this.columnOperationDir.AllowDBNull = false;
                this.columnAccountID.AllowDBNull = false;
                this.columnOperationTypeID.AllowDBNull = false;
                this.columnOrgID.AutoIncrement = true;
                this.columnOrgID.ReadOnly = true;
                this.columnOrgIDCorr.AutoIncrement = true;
                this.columnOrgIDCorr.ReadOnly = true;
                this.columnClientID.AutoIncrement = true;
                this.columnClientID.ReadOnly = true;
                this.columnПриход_.ReadOnly = true;
                this.columnРасход_.ReadOnly = true;
                this.columnTransactionTypeNameX_.ReadOnly = true;
                this.columnПлательщик.ReadOnly = true;
                this.columnПолучатель.ReadOnly = true;
            }
            
            public SelectAccountsOperationsRow NewSelectAccountsOperationsRow() {
                return ((SelectAccountsOperationsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SelectAccountsOperationsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SelectAccountsOperationsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SelectAccountsOperationsRowChanged != null)) {
                    this.SelectAccountsOperationsRowChanged(this, new SelectAccountsOperationsRowChangeEvent(((SelectAccountsOperationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SelectAccountsOperationsRowChanging != null)) {
                    this.SelectAccountsOperationsRowChanging(this, new SelectAccountsOperationsRowChangeEvent(((SelectAccountsOperationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SelectAccountsOperationsRowDeleted != null)) {
                    this.SelectAccountsOperationsRowDeleted(this, new SelectAccountsOperationsRowChangeEvent(((SelectAccountsOperationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SelectAccountsOperationsRowDeleting != null)) {
                    this.SelectAccountsOperationsRowDeleting(this, new SelectAccountsOperationsRowChangeEvent(((SelectAccountsOperationsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSelectAccountsOperationsRow(SelectAccountsOperationsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SelectAccountsOperationsRow : DataRow {
            
            private SelectAccountsOperationsDataTable tableSelectAccountsOperations;
            
            internal SelectAccountsOperationsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelectAccountsOperations = ((SelectAccountsOperationsDataTable)(this.Table));
            }
            
            public System.DateTime InitDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSelectAccountsOperations.InitDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.InitDateColumn] = value;
                }
            }
            
            public System.DateTime CompleteDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSelectAccountsOperations.CompleteDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.CompleteDateColumn] = value;
                }
            }
            
            public int OperationID {
                get {
                    return ((int)(this[this.tableSelectAccountsOperations.OperationIDColumn]));
                }
                set {
                    this[this.tableSelectAccountsOperations.OperationIDColumn] = value;
                }
            }
            
            public int TransactionOperationID {
                get {
                    return ((int)(this[this.tableSelectAccountsOperations.TransactionOperationIDColumn]));
                }
                set {
                    this[this.tableSelectAccountsOperations.TransactionOperationIDColumn] = value;
                }
            }
            
            public bool OperationIsPrimary {
                get {
                    return ((bool)(this[this.tableSelectAccountsOperations.OperationIsPrimaryColumn]));
                }
                set {
                    this[this.tableSelectAccountsOperations.OperationIsPrimaryColumn] = value;
                }
            }
            
            public System.Double OperationSum {
                get {
                    return ((System.Double)(this[this.tableSelectAccountsOperations.OperationSumColumn]));
                }
                set {
                    this[this.tableSelectAccountsOperations.OperationSumColumn] = value;
                }
            }
            
            public bool OperationDir {
                get {
                    return ((bool)(this[this.tableSelectAccountsOperations.OperationDirColumn]));
                }
                set {
                    this[this.tableSelectAccountsOperations.OperationDirColumn] = value;
                }
            }
            
            public int AccountID {
                get {
                    return ((int)(this[this.tableSelectAccountsOperations.AccountIDColumn]));
                }
                set {
                    this[this.tableSelectAccountsOperations.AccountIDColumn] = value;
                }
            }
            
            public string TransactionTypeName {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.TransactionTypeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.TransactionTypeNameColumn] = value;
                }
            }
            
            public System.DateTime PostedDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSelectAccountsOperations.PostedDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.PostedDateColumn] = value;
                }
            }
            
            public System.DateTime CommitedDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSelectAccountsOperations.CommitedDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.CommitedDateColumn] = value;
                }
            }
            
            public int OperationTypeID {
                get {
                    return ((int)(this[this.tableSelectAccountsOperations.OperationTypeIDColumn]));
                }
                set {
                    this[this.tableSelectAccountsOperations.OperationTypeIDColumn] = value;
                }
            }
            
            public string PaymentNo {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.PaymentNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.PaymentNoColumn] = value;
                }
            }
            
            public System.DateTime PaymentOrderDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSelectAccountsOperations.PaymentOrderDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.PaymentOrderDateColumn] = value;
                }
            }
            
            public bool PaymentsOrdersDirection {
                get {
                    try {
                        return ((bool)(this[this.tableSelectAccountsOperations.PaymentsOrdersDirectionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.PaymentsOrdersDirectionColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.OrgNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.OrgNameColumn] = value;
                }
            }
            
            public string OrgNameCorr {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.OrgNameCorrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.OrgNameCorrColumn] = value;
                }
            }
            
            public int OrgID {
                get {
                    try {
                        return ((int)(this[this.tableSelectAccountsOperations.OrgIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.OrgIDColumn] = value;
                }
            }
            
            public int OrgIDCorr {
                get {
                    try {
                        return ((int)(this[this.tableSelectAccountsOperations.OrgIDCorrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.OrgIDCorrColumn] = value;
                }
            }
            
            public int AccountTypeID {
                get {
                    try {
                        return ((int)(this[this.tableSelectAccountsOperations.AccountTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.AccountTypeIDColumn] = value;
                }
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableSelectAccountsOperations.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.ClientIDColumn] = value;
                }
            }
            
            public int ClientGroupID {
                get {
                    try {
                        return ((int)(this[this.tableSelectAccountsOperations.ClientGroupIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.ClientGroupIDColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.ClientNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.ClientNameColumn] = value;
                }
            }
            
            public string ClientGroupName {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.ClientGroupNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.ClientGroupNameColumn] = value;
                }
            }
            
            public System.Double Приход_ {
                get {
                    try {
                        return ((System.Double)(this[this.tableSelectAccountsOperations.Приход_Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.Приход_Column] = value;
                }
            }
            
            public System.Double Расход_ {
                get {
                    try {
                        return ((System.Double)(this[this.tableSelectAccountsOperations.Расход_Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.Расход_Column] = value;
                }
            }
            
            public string TransactionTypeNameX_ {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.TransactionTypeNameX_Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.TransactionTypeNameX_Column] = value;
                }
            }
            
            public string Плательщик {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.ПлательщикColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.ПлательщикColumn] = value;
                }
            }
            
            public string Получатель {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.ПолучательColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.ПолучательColumn] = value;
                }
            }
            
            public string CurrencyID {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.CurrencyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.CurrencyIDColumn] = value;
                }
            }
            
            public string RAccount {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.RAccountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.RAccountColumn] = value;
                }
            }
            
            public System.Double CurrencyRate {
                get {
                    try {
                        return ((System.Double)(this[this.tableSelectAccountsOperations.CurrencyRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.CurrencyRateColumn] = value;
                }
            }
            
            public bool TransactionCompleted {
                get {
                    try {
                        return ((bool)(this[this.tableSelectAccountsOperations.TransactionCompletedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.TransactionCompletedColumn] = value;
                }
            }
            
            public System.DateTime HeaderDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSelectAccountsOperations.HeaderDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.HeaderDateColumn] = value;
                }
            }
            
            public System.DateTime FinishDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSelectAccountsOperations.FinishDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.FinishDateColumn] = value;
                }
            }
            
            public string PaymentOrderPurpose {
                get {
                    try {
                        return ((string)(this[this.tableSelectAccountsOperations.PaymentOrderPurposeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSelectAccountsOperations.PaymentOrderPurposeColumn] = value;
                }
            }
            
            public bool IsInitDateNull() {
                return this.IsNull(this.tableSelectAccountsOperations.InitDateColumn);
            }
            
            public void SetInitDateNull() {
                this[this.tableSelectAccountsOperations.InitDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompleteDateNull() {
                return this.IsNull(this.tableSelectAccountsOperations.CompleteDateColumn);
            }
            
            public void SetCompleteDateNull() {
                this[this.tableSelectAccountsOperations.CompleteDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionTypeNameNull() {
                return this.IsNull(this.tableSelectAccountsOperations.TransactionTypeNameColumn);
            }
            
            public void SetTransactionTypeNameNull() {
                this[this.tableSelectAccountsOperations.TransactionTypeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostedDateNull() {
                return this.IsNull(this.tableSelectAccountsOperations.PostedDateColumn);
            }
            
            public void SetPostedDateNull() {
                this[this.tableSelectAccountsOperations.PostedDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommitedDateNull() {
                return this.IsNull(this.tableSelectAccountsOperations.CommitedDateColumn);
            }
            
            public void SetCommitedDateNull() {
                this[this.tableSelectAccountsOperations.CommitedDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentNoNull() {
                return this.IsNull(this.tableSelectAccountsOperations.PaymentNoColumn);
            }
            
            public void SetPaymentNoNull() {
                this[this.tableSelectAccountsOperations.PaymentNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentOrderDateNull() {
                return this.IsNull(this.tableSelectAccountsOperations.PaymentOrderDateColumn);
            }
            
            public void SetPaymentOrderDateNull() {
                this[this.tableSelectAccountsOperations.PaymentOrderDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentsOrdersDirectionNull() {
                return this.IsNull(this.tableSelectAccountsOperations.PaymentsOrdersDirectionColumn);
            }
            
            public void SetPaymentsOrdersDirectionNull() {
                this[this.tableSelectAccountsOperations.PaymentsOrdersDirectionColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgNameNull() {
                return this.IsNull(this.tableSelectAccountsOperations.OrgNameColumn);
            }
            
            public void SetOrgNameNull() {
                this[this.tableSelectAccountsOperations.OrgNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgNameCorrNull() {
                return this.IsNull(this.tableSelectAccountsOperations.OrgNameCorrColumn);
            }
            
            public void SetOrgNameCorrNull() {
                this[this.tableSelectAccountsOperations.OrgNameCorrColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgIDNull() {
                return this.IsNull(this.tableSelectAccountsOperations.OrgIDColumn);
            }
            
            public void SetOrgIDNull() {
                this[this.tableSelectAccountsOperations.OrgIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgIDCorrNull() {
                return this.IsNull(this.tableSelectAccountsOperations.OrgIDCorrColumn);
            }
            
            public void SetOrgIDCorrNull() {
                this[this.tableSelectAccountsOperations.OrgIDCorrColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountTypeIDNull() {
                return this.IsNull(this.tableSelectAccountsOperations.AccountTypeIDColumn);
            }
            
            public void SetAccountTypeIDNull() {
                this[this.tableSelectAccountsOperations.AccountTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableSelectAccountsOperations.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableSelectAccountsOperations.ClientIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientGroupIDNull() {
                return this.IsNull(this.tableSelectAccountsOperations.ClientGroupIDColumn);
            }
            
            public void SetClientGroupIDNull() {
                this[this.tableSelectAccountsOperations.ClientGroupIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientNameNull() {
                return this.IsNull(this.tableSelectAccountsOperations.ClientNameColumn);
            }
            
            public void SetClientNameNull() {
                this[this.tableSelectAccountsOperations.ClientNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientGroupNameNull() {
                return this.IsNull(this.tableSelectAccountsOperations.ClientGroupNameColumn);
            }
            
            public void SetClientGroupNameNull() {
                this[this.tableSelectAccountsOperations.ClientGroupNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsПриход_Null() {
                return this.IsNull(this.tableSelectAccountsOperations.Приход_Column);
            }
            
            public void SetПриход_Null() {
                this[this.tableSelectAccountsOperations.Приход_Column] = System.Convert.DBNull;
            }
            
            public bool IsРасход_Null() {
                return this.IsNull(this.tableSelectAccountsOperations.Расход_Column);
            }
            
            public void SetРасход_Null() {
                this[this.tableSelectAccountsOperations.Расход_Column] = System.Convert.DBNull;
            }
            
            public bool IsTransactionTypeNameX_Null() {
                return this.IsNull(this.tableSelectAccountsOperations.TransactionTypeNameX_Column);
            }
            
            public void SetTransactionTypeNameX_Null() {
                this[this.tableSelectAccountsOperations.TransactionTypeNameX_Column] = System.Convert.DBNull;
            }
            
            public bool IsПлательщикNull() {
                return this.IsNull(this.tableSelectAccountsOperations.ПлательщикColumn);
            }
            
            public void SetПлательщикNull() {
                this[this.tableSelectAccountsOperations.ПлательщикColumn] = System.Convert.DBNull;
            }
            
            public bool IsПолучательNull() {
                return this.IsNull(this.tableSelectAccountsOperations.ПолучательColumn);
            }
            
            public void SetПолучательNull() {
                this[this.tableSelectAccountsOperations.ПолучательColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrencyIDNull() {
                return this.IsNull(this.tableSelectAccountsOperations.CurrencyIDColumn);
            }
            
            public void SetCurrencyIDNull() {
                this[this.tableSelectAccountsOperations.CurrencyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsRAccountNull() {
                return this.IsNull(this.tableSelectAccountsOperations.RAccountColumn);
            }
            
            public void SetRAccountNull() {
                this[this.tableSelectAccountsOperations.RAccountColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrencyRateNull() {
                return this.IsNull(this.tableSelectAccountsOperations.CurrencyRateColumn);
            }
            
            public void SetCurrencyRateNull() {
                this[this.tableSelectAccountsOperations.CurrencyRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionCompletedNull() {
                return this.IsNull(this.tableSelectAccountsOperations.TransactionCompletedColumn);
            }
            
            public void SetTransactionCompletedNull() {
                this[this.tableSelectAccountsOperations.TransactionCompletedColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeaderDateNull() {
                return this.IsNull(this.tableSelectAccountsOperations.HeaderDateColumn);
            }
            
            public void SetHeaderDateNull() {
                this[this.tableSelectAccountsOperations.HeaderDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsFinishDateNull() {
                return this.IsNull(this.tableSelectAccountsOperations.FinishDateColumn);
            }
            
            public void SetFinishDateNull() {
                this[this.tableSelectAccountsOperations.FinishDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentOrderPurposeNull() {
                return this.IsNull(this.tableSelectAccountsOperations.PaymentOrderPurposeColumn);
            }
            
            public void SetPaymentOrderPurposeNull() {
                this[this.tableSelectAccountsOperations.PaymentOrderPurposeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SelectAccountsOperationsRowChangeEvent : EventArgs {
            
            private SelectAccountsOperationsRow eventRow;
            
            private DataRowAction eventAction;
            
            public SelectAccountsOperationsRowChangeEvent(SelectAccountsOperationsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SelectAccountsOperationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
