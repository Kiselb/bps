//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS._Forms {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsTransSumList : DataSet {
        
        private TransSumListDataTable tableTransSumList;
        
        public dsTransSumList() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsTransSumList(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TransSumList"] != null)) {
                    this.Tables.Add(new TransSumListDataTable(ds.Tables["TransSumList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransSumListDataTable TransSumList {
            get {
                return this.tableTransSumList;
            }
        }
        
        public override DataSet Clone() {
            dsTransSumList cln = ((dsTransSumList)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TransSumList"] != null)) {
                this.Tables.Add(new TransSumListDataTable(ds.Tables["TransSumList"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTransSumList = ((TransSumListDataTable)(this.Tables["TransSumList"]));
            if ((this.tableTransSumList != null)) {
                this.tableTransSumList.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsTransSumList";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsTransSumList.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTransSumList = new TransSumListDataTable();
            this.Tables.Add(this.tableTransSumList);
        }
        
        private bool ShouldSerializeTransSumList() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TransSumListRowChangeEventHandler(object sender, TransSumListRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransSumListDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCurrencyID;
            
            private DataColumn columnSum;
            
            internal TransSumListDataTable() : 
                    base("TransSumList") {
                this.InitClass();
            }
            
            internal TransSumListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CurrencyIDColumn {
                get {
                    return this.columnCurrencyID;
                }
            }
            
            internal DataColumn SumColumn {
                get {
                    return this.columnSum;
                }
            }
            
            public TransSumListRow this[int index] {
                get {
                    return ((TransSumListRow)(this.Rows[index]));
                }
            }
            
            public event TransSumListRowChangeEventHandler TransSumListRowChanged;
            
            public event TransSumListRowChangeEventHandler TransSumListRowChanging;
            
            public event TransSumListRowChangeEventHandler TransSumListRowDeleted;
            
            public event TransSumListRowChangeEventHandler TransSumListRowDeleting;
            
            public void AddTransSumListRow(TransSumListRow row) {
                this.Rows.Add(row);
            }
            
            public TransSumListRow AddTransSumListRow(string CurrencyID, System.Double Sum) {
                TransSumListRow rowTransSumListRow = ((TransSumListRow)(this.NewRow()));
                rowTransSumListRow.ItemArray = new object[] {
                        CurrencyID,
                        Sum};
                this.Rows.Add(rowTransSumListRow);
                return rowTransSumListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TransSumListDataTable cln = ((TransSumListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TransSumListDataTable();
            }
            
            internal void InitVars() {
                this.columnCurrencyID = this.Columns["CurrencyID"];
                this.columnSum = this.Columns["Sum"];
            }
            
            private void InitClass() {
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyID);
                this.columnSum = new DataColumn("Sum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSum);
            }
            
            public TransSumListRow NewTransSumListRow() {
                return ((TransSumListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TransSumListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TransSumListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransSumListRowChanged != null)) {
                    this.TransSumListRowChanged(this, new TransSumListRowChangeEvent(((TransSumListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransSumListRowChanging != null)) {
                    this.TransSumListRowChanging(this, new TransSumListRowChangeEvent(((TransSumListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransSumListRowDeleted != null)) {
                    this.TransSumListRowDeleted(this, new TransSumListRowChangeEvent(((TransSumListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransSumListRowDeleting != null)) {
                    this.TransSumListRowDeleting(this, new TransSumListRowChangeEvent(((TransSumListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTransSumListRow(TransSumListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransSumListRow : DataRow {
            
            private TransSumListDataTable tableTransSumList;
            
            internal TransSumListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransSumList = ((TransSumListDataTable)(this.Table));
            }
            
            public string CurrencyID {
                get {
                    try {
                        return ((string)(this[this.tableTransSumList.CurrencyIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransSumList.CurrencyIDColumn] = value;
                }
            }
            
            public System.Double Sum {
                get {
                    try {
                        return ((System.Double)(this[this.tableTransSumList.SumColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransSumList.SumColumn] = value;
                }
            }
            
            public bool IsCurrencyIDNull() {
                return this.IsNull(this.tableTransSumList.CurrencyIDColumn);
            }
            
            public void SetCurrencyIDNull() {
                this[this.tableTransSumList.CurrencyIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSumNull() {
                return this.IsNull(this.tableTransSumList.SumColumn);
            }
            
            public void SetSumNull() {
                this[this.tableTransSumList.SumColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransSumListRowChangeEvent : EventArgs {
            
            private TransSumListRow eventRow;
            
            private DataRowAction eventAction;
            
            public TransSumListRowChangeEvent(TransSumListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TransSumListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
