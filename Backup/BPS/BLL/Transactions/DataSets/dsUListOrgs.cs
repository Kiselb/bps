//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS._Forms {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsUListOrgs : DataSet {
        
        private UListOrgsDataTable tableUListOrgs;
        
        public dsUListOrgs() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsUListOrgs(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UListOrgs"] != null)) {
                    this.Tables.Add(new UListOrgsDataTable(ds.Tables["UListOrgs"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UListOrgsDataTable UListOrgs {
            get {
                return this.tableUListOrgs;
            }
        }
        
        public override DataSet Clone() {
            dsUListOrgs cln = ((dsUListOrgs)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["UListOrgs"] != null)) {
                this.Tables.Add(new UListOrgsDataTable(ds.Tables["UListOrgs"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableUListOrgs = ((UListOrgsDataTable)(this.Tables["UListOrgs"]));
            if ((this.tableUListOrgs != null)) {
                this.tableUListOrgs.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsUListOrgs";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsUListOrgs.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableUListOrgs = new UListOrgsDataTable();
            this.Tables.Add(this.tableUListOrgs);
        }
        
        private bool ShouldSerializeUListOrgs() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void UListOrgsRowChangeEventHandler(object sender, UListOrgsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UListOrgsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOrgID;
            
            private DataColumn columnOrgName;
            
            internal UListOrgsDataTable() : 
                    base("UListOrgs") {
                this.InitClass();
            }
            
            internal UListOrgsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            public UListOrgsRow this[int index] {
                get {
                    return ((UListOrgsRow)(this.Rows[index]));
                }
            }
            
            public event UListOrgsRowChangeEventHandler UListOrgsRowChanged;
            
            public event UListOrgsRowChangeEventHandler UListOrgsRowChanging;
            
            public event UListOrgsRowChangeEventHandler UListOrgsRowDeleted;
            
            public event UListOrgsRowChangeEventHandler UListOrgsRowDeleting;
            
            public void AddUListOrgsRow(UListOrgsRow row) {
                this.Rows.Add(row);
            }
            
            public UListOrgsRow AddUListOrgsRow(int OrgID, string OrgName) {
                UListOrgsRow rowUListOrgsRow = ((UListOrgsRow)(this.NewRow()));
                rowUListOrgsRow.ItemArray = new object[] {
                        OrgID,
                        OrgName};
                this.Rows.Add(rowUListOrgsRow);
                return rowUListOrgsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UListOrgsDataTable cln = ((UListOrgsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UListOrgsDataTable();
            }
            
            internal void InitVars() {
                this.columnOrgID = this.Columns["OrgID"];
                this.columnOrgName = this.Columns["OrgName"];
            }
            
            private void InitClass() {
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnOrgID.ReadOnly = true;
                this.columnOrgName.ReadOnly = true;
            }
            
            public UListOrgsRow NewUListOrgsRow() {
                return ((UListOrgsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UListOrgsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UListOrgsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UListOrgsRowChanged != null)) {
                    this.UListOrgsRowChanged(this, new UListOrgsRowChangeEvent(((UListOrgsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UListOrgsRowChanging != null)) {
                    this.UListOrgsRowChanging(this, new UListOrgsRowChangeEvent(((UListOrgsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UListOrgsRowDeleted != null)) {
                    this.UListOrgsRowDeleted(this, new UListOrgsRowChangeEvent(((UListOrgsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UListOrgsRowDeleting != null)) {
                    this.UListOrgsRowDeleting(this, new UListOrgsRowChangeEvent(((UListOrgsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUListOrgsRow(UListOrgsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UListOrgsRow : DataRow {
            
            private UListOrgsDataTable tableUListOrgs;
            
            internal UListOrgsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUListOrgs = ((UListOrgsDataTable)(this.Table));
            }
            
            public int OrgID {
                get {
                    try {
                        return ((int)(this[this.tableUListOrgs.OrgIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUListOrgs.OrgIDColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    try {
                        return ((string)(this[this.tableUListOrgs.OrgNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUListOrgs.OrgNameColumn] = value;
                }
            }
            
            public bool IsOrgIDNull() {
                return this.IsNull(this.tableUListOrgs.OrgIDColumn);
            }
            
            public void SetOrgIDNull() {
                this[this.tableUListOrgs.OrgIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgNameNull() {
                return this.IsNull(this.tableUListOrgs.OrgNameColumn);
            }
            
            public void SetOrgNameNull() {
                this[this.tableUListOrgs.OrgNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UListOrgsRowChangeEvent : EventArgs {
            
            private UListOrgsRow eventRow;
            
            private DataRowAction eventAction;
            
            public UListOrgsRowChangeEvent(UListOrgsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UListOrgsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
