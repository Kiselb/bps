//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.Transactions.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsTransactionList : DataSet {
        
        private TransactionsTypesDataTable tableTransactionsTypes;
        
        private TransactionsDataTable tableTransactions;
        
        public dsTransactionList() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsTransactionList(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TransactionsTypes"] != null)) {
                    this.Tables.Add(new TransactionsTypesDataTable(ds.Tables["TransactionsTypes"]));
                }
                if ((ds.Tables["Transactions"] != null)) {
                    this.Tables.Add(new TransactionsDataTable(ds.Tables["Transactions"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransactionsTypesDataTable TransactionsTypes {
            get {
                return this.tableTransactionsTypes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransactionsDataTable Transactions {
            get {
                return this.tableTransactions;
            }
        }
        
        public override DataSet Clone() {
            dsTransactionList cln = ((dsTransactionList)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TransactionsTypes"] != null)) {
                this.Tables.Add(new TransactionsTypesDataTable(ds.Tables["TransactionsTypes"]));
            }
            if ((ds.Tables["Transactions"] != null)) {
                this.Tables.Add(new TransactionsDataTable(ds.Tables["Transactions"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTransactionsTypes = ((TransactionsTypesDataTable)(this.Tables["TransactionsTypes"]));
            if ((this.tableTransactionsTypes != null)) {
                this.tableTransactionsTypes.InitVars();
            }
            this.tableTransactions = ((TransactionsDataTable)(this.Tables["Transactions"]));
            if ((this.tableTransactions != null)) {
                this.tableTransactions.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsTransactionList";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsTransactionList.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTransactionsTypes = new TransactionsTypesDataTable();
            this.Tables.Add(this.tableTransactionsTypes);
            this.tableTransactions = new TransactionsDataTable();
            this.Tables.Add(this.tableTransactions);
        }
        
        private bool ShouldSerializeTransactionsTypes() {
            return false;
        }
        
        private bool ShouldSerializeTransactions() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TransactionsTypesRowChangeEventHandler(object sender, TransactionsTypesRowChangeEvent e);
        
        public delegate void TransactionsRowChangeEventHandler(object sender, TransactionsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionsTypesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTransactionTypeID;
            
            private DataColumn columnTransactionTypeName;
            
            private DataColumn columnIsInner;
            
            private DataColumn columnUseOrgAcc;
            
            internal TransactionsTypesDataTable() : 
                    base("TransactionsTypes") {
                this.InitClass();
            }
            
            internal TransactionsTypesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TransactionTypeIDColumn {
                get {
                    return this.columnTransactionTypeID;
                }
            }
            
            internal DataColumn TransactionTypeNameColumn {
                get {
                    return this.columnTransactionTypeName;
                }
            }
            
            internal DataColumn IsInnerColumn {
                get {
                    return this.columnIsInner;
                }
            }
            
            internal DataColumn UseOrgAccColumn {
                get {
                    return this.columnUseOrgAcc;
                }
            }
            
            public TransactionsTypesRow this[int index] {
                get {
                    return ((TransactionsTypesRow)(this.Rows[index]));
                }
            }
            
            public event TransactionsTypesRowChangeEventHandler TransactionsTypesRowChanged;
            
            public event TransactionsTypesRowChangeEventHandler TransactionsTypesRowChanging;
            
            public event TransactionsTypesRowChangeEventHandler TransactionsTypesRowDeleted;
            
            public event TransactionsTypesRowChangeEventHandler TransactionsTypesRowDeleting;
            
            public void AddTransactionsTypesRow(TransactionsTypesRow row) {
                this.Rows.Add(row);
            }
            
            public TransactionsTypesRow AddTransactionsTypesRow(string TransactionTypeName, bool IsInner, bool UseOrgAcc) {
                TransactionsTypesRow rowTransactionsTypesRow = ((TransactionsTypesRow)(this.NewRow()));
                rowTransactionsTypesRow.ItemArray = new object[] {
                        null,
                        TransactionTypeName,
                        IsInner,
                        UseOrgAcc};
                this.Rows.Add(rowTransactionsTypesRow);
                return rowTransactionsTypesRow;
            }
            
            public TransactionsTypesRow FindByTransactionTypeID(int TransactionTypeID) {
                return ((TransactionsTypesRow)(this.Rows.Find(new object[] {
                            TransactionTypeID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TransactionsTypesDataTable cln = ((TransactionsTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TransactionsTypesDataTable();
            }
            
            internal void InitVars() {
                this.columnTransactionTypeID = this.Columns["TransactionTypeID"];
                this.columnTransactionTypeName = this.Columns["TransactionTypeName"];
                this.columnIsInner = this.Columns["IsInner"];
                this.columnUseOrgAcc = this.Columns["UseOrgAcc"];
            }
            
            private void InitClass() {
                this.columnTransactionTypeID = new DataColumn("TransactionTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeID);
                this.columnTransactionTypeName = new DataColumn("TransactionTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeName);
                this.columnIsInner = new DataColumn("IsInner", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInner);
                this.columnUseOrgAcc = new DataColumn("UseOrgAcc", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUseOrgAcc);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTransactionTypeID}, true));
                this.columnTransactionTypeID.AutoIncrement = true;
                this.columnTransactionTypeID.AllowDBNull = false;
                this.columnTransactionTypeID.ReadOnly = true;
                this.columnTransactionTypeID.Unique = true;
                this.columnTransactionTypeName.AllowDBNull = false;
                this.columnIsInner.AllowDBNull = false;
                this.columnUseOrgAcc.AllowDBNull = false;
            }
            
            public TransactionsTypesRow NewTransactionsTypesRow() {
                return ((TransactionsTypesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TransactionsTypesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TransactionsTypesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransactionsTypesRowChanged != null)) {
                    this.TransactionsTypesRowChanged(this, new TransactionsTypesRowChangeEvent(((TransactionsTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransactionsTypesRowChanging != null)) {
                    this.TransactionsTypesRowChanging(this, new TransactionsTypesRowChangeEvent(((TransactionsTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransactionsTypesRowDeleted != null)) {
                    this.TransactionsTypesRowDeleted(this, new TransactionsTypesRowChangeEvent(((TransactionsTypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransactionsTypesRowDeleting != null)) {
                    this.TransactionsTypesRowDeleting(this, new TransactionsTypesRowChangeEvent(((TransactionsTypesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTransactionsTypesRow(TransactionsTypesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionsTypesRow : DataRow {
            
            private TransactionsTypesDataTable tableTransactionsTypes;
            
            internal TransactionsTypesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransactionsTypes = ((TransactionsTypesDataTable)(this.Table));
            }
            
            public int TransactionTypeID {
                get {
                    return ((int)(this[this.tableTransactionsTypes.TransactionTypeIDColumn]));
                }
                set {
                    this[this.tableTransactionsTypes.TransactionTypeIDColumn] = value;
                }
            }
            
            public string TransactionTypeName {
                get {
                    return ((string)(this[this.tableTransactionsTypes.TransactionTypeNameColumn]));
                }
                set {
                    this[this.tableTransactionsTypes.TransactionTypeNameColumn] = value;
                }
            }
            
            public bool IsInner {
                get {
                    return ((bool)(this[this.tableTransactionsTypes.IsInnerColumn]));
                }
                set {
                    this[this.tableTransactionsTypes.IsInnerColumn] = value;
                }
            }
            
            public bool UseOrgAcc {
                get {
                    return ((bool)(this[this.tableTransactionsTypes.UseOrgAccColumn]));
                }
                set {
                    this[this.tableTransactionsTypes.UseOrgAccColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionsTypesRowChangeEvent : EventArgs {
            
            private TransactionsTypesRow eventRow;
            
            private DataRowAction eventAction;
            
            public TransactionsTypesRowChangeEvent(TransactionsTypesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TransactionsTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTransactionTypeName;
            
            private DataColumn columnTransactionIsInner;
            
            private DataColumn columnClientName;
            
            private DataColumn columnClientIsInner;
            
            private DataColumn columnRAccountFrom;
            
            private DataColumn columnRAccountTo;
            
            private DataColumn columnOrgNameFrom;
            
            private DataColumn columnOrgIDFrom;
            
            private DataColumn columnOrgIDTo;
            
            private DataColumn columnOrgNameTo;
            
            private DataColumn columnPaymentOrderStatusName;
            
            private DataColumn columnTransactionID;
            
            private DataColumn columnTransactionTypeID;
            
            private DataColumn columnTransactionCommited;
            
            private DataColumn columnTransactionPosted;
            
            private DataColumn columnClientID;
            
            private DataColumn columnSumFrom;
            
            private DataColumn columnSumTo;
            
            private DataColumn columnCurrencyRate;
            
            private DataColumn columnAccountIDFrom;
            
            private DataColumn columnAccountIDTo;
            
            private DataColumn columnServiceCharge;
            
            private DataColumn columnServiceChargeTo;
            
            private DataColumn columnDocumentID;
            
            private DataColumn columnPurpose;
            
            private DataColumn columnRemarks;
            
            private DataColumn columnCreateDate;
            
            private DataColumn columnInitDate;
            
            private DataColumn columnCompleteDate;
            
            private DataColumn columnTransactionIDParent;
            
            private DataColumn columnClientRequestID;
            
            private DataColumn columnPaymentOrderStatusID;
            
            private DataColumn columnCurrencyFrom;
            
            private DataColumn columnCurrencyTo;
            
            private DataColumn columnTrClientName;
            
            internal TransactionsDataTable() : 
                    base("Transactions") {
                this.InitClass();
            }
            
            internal TransactionsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TransactionTypeNameColumn {
                get {
                    return this.columnTransactionTypeName;
                }
            }
            
            internal DataColumn TransactionIsInnerColumn {
                get {
                    return this.columnTransactionIsInner;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn ClientIsInnerColumn {
                get {
                    return this.columnClientIsInner;
                }
            }
            
            internal DataColumn RAccountFromColumn {
                get {
                    return this.columnRAccountFrom;
                }
            }
            
            internal DataColumn RAccountToColumn {
                get {
                    return this.columnRAccountTo;
                }
            }
            
            internal DataColumn OrgNameFromColumn {
                get {
                    return this.columnOrgNameFrom;
                }
            }
            
            internal DataColumn OrgIDFromColumn {
                get {
                    return this.columnOrgIDFrom;
                }
            }
            
            internal DataColumn OrgIDToColumn {
                get {
                    return this.columnOrgIDTo;
                }
            }
            
            internal DataColumn OrgNameToColumn {
                get {
                    return this.columnOrgNameTo;
                }
            }
            
            internal DataColumn PaymentOrderStatusNameColumn {
                get {
                    return this.columnPaymentOrderStatusName;
                }
            }
            
            internal DataColumn TransactionIDColumn {
                get {
                    return this.columnTransactionID;
                }
            }
            
            internal DataColumn TransactionTypeIDColumn {
                get {
                    return this.columnTransactionTypeID;
                }
            }
            
            internal DataColumn TransactionCommitedColumn {
                get {
                    return this.columnTransactionCommited;
                }
            }
            
            internal DataColumn TransactionPostedColumn {
                get {
                    return this.columnTransactionPosted;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn SumFromColumn {
                get {
                    return this.columnSumFrom;
                }
            }
            
            internal DataColumn SumToColumn {
                get {
                    return this.columnSumTo;
                }
            }
            
            internal DataColumn CurrencyRateColumn {
                get {
                    return this.columnCurrencyRate;
                }
            }
            
            internal DataColumn AccountIDFromColumn {
                get {
                    return this.columnAccountIDFrom;
                }
            }
            
            internal DataColumn AccountIDToColumn {
                get {
                    return this.columnAccountIDTo;
                }
            }
            
            internal DataColumn ServiceChargeColumn {
                get {
                    return this.columnServiceCharge;
                }
            }
            
            internal DataColumn ServiceChargeToColumn {
                get {
                    return this.columnServiceChargeTo;
                }
            }
            
            internal DataColumn DocumentIDColumn {
                get {
                    return this.columnDocumentID;
                }
            }
            
            internal DataColumn PurposeColumn {
                get {
                    return this.columnPurpose;
                }
            }
            
            internal DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            internal DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            internal DataColumn InitDateColumn {
                get {
                    return this.columnInitDate;
                }
            }
            
            internal DataColumn CompleteDateColumn {
                get {
                    return this.columnCompleteDate;
                }
            }
            
            internal DataColumn TransactionIDParentColumn {
                get {
                    return this.columnTransactionIDParent;
                }
            }
            
            internal DataColumn ClientRequestIDColumn {
                get {
                    return this.columnClientRequestID;
                }
            }
            
            internal DataColumn PaymentOrderStatusIDColumn {
                get {
                    return this.columnPaymentOrderStatusID;
                }
            }
            
            internal DataColumn CurrencyFromColumn {
                get {
                    return this.columnCurrencyFrom;
                }
            }
            
            internal DataColumn CurrencyToColumn {
                get {
                    return this.columnCurrencyTo;
                }
            }
            
            internal DataColumn TrClientNameColumn {
                get {
                    return this.columnTrClientName;
                }
            }
            
            public TransactionsRow this[int index] {
                get {
                    return ((TransactionsRow)(this.Rows[index]));
                }
            }
            
            public event TransactionsRowChangeEventHandler TransactionsRowChanged;
            
            public event TransactionsRowChangeEventHandler TransactionsRowChanging;
            
            public event TransactionsRowChangeEventHandler TransactionsRowDeleted;
            
            public event TransactionsRowChangeEventHandler TransactionsRowDeleting;
            
            public void AddTransactionsRow(TransactionsRow row) {
                this.Rows.Add(row);
            }
            
            public TransactionsRow AddTransactionsRow(
                        string TransactionTypeName, 
                        bool TransactionIsInner, 
                        string ClientName, 
                        bool ClientIsInner, 
                        string RAccountFrom, 
                        string RAccountTo, 
                        string OrgNameFrom, 
                        string OrgNameTo, 
                        string PaymentOrderStatusName, 
                        int TransactionTypeID, 
                        bool TransactionCommited, 
                        bool TransactionPosted, 
                        int ClientID, 
                        System.Double SumFrom, 
                        System.Double SumTo, 
                        System.Double CurrencyRate, 
                        int AccountIDFrom, 
                        int AccountIDTo, 
                        System.Double ServiceCharge, 
                        System.Double ServiceChargeTo, 
                        int DocumentID, 
                        string Purpose, 
                        string Remarks, 
                        System.DateTime CreateDate, 
                        System.DateTime InitDate, 
                        System.DateTime CompleteDate, 
                        int TransactionIDParent, 
                        int ClientRequestID, 
                        string CurrencyFrom, 
                        string CurrencyTo, 
                        string TrClientName) {
                TransactionsRow rowTransactionsRow = ((TransactionsRow)(this.NewRow()));
                rowTransactionsRow.ItemArray = new object[] {
                        TransactionTypeName,
                        TransactionIsInner,
                        ClientName,
                        ClientIsInner,
                        RAccountFrom,
                        RAccountTo,
                        OrgNameFrom,
                        null,
                        null,
                        OrgNameTo,
                        PaymentOrderStatusName,
                        null,
                        TransactionTypeID,
                        TransactionCommited,
                        TransactionPosted,
                        ClientID,
                        SumFrom,
                        SumTo,
                        CurrencyRate,
                        AccountIDFrom,
                        AccountIDTo,
                        ServiceCharge,
                        ServiceChargeTo,
                        DocumentID,
                        Purpose,
                        Remarks,
                        CreateDate,
                        InitDate,
                        CompleteDate,
                        TransactionIDParent,
                        ClientRequestID,
                        null,
                        CurrencyFrom,
                        CurrencyTo,
                        TrClientName};
                this.Rows.Add(rowTransactionsRow);
                return rowTransactionsRow;
            }
            
            public TransactionsRow FindByTransactionID(int TransactionID) {
                return ((TransactionsRow)(this.Rows.Find(new object[] {
                            TransactionID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TransactionsDataTable cln = ((TransactionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TransactionsDataTable();
            }
            
            internal void InitVars() {
                this.columnTransactionTypeName = this.Columns["TransactionTypeName"];
                this.columnTransactionIsInner = this.Columns["TransactionIsInner"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnClientIsInner = this.Columns["ClientIsInner"];
                this.columnRAccountFrom = this.Columns["RAccountFrom"];
                this.columnRAccountTo = this.Columns["RAccountTo"];
                this.columnOrgNameFrom = this.Columns["OrgNameFrom"];
                this.columnOrgIDFrom = this.Columns["OrgIDFrom"];
                this.columnOrgIDTo = this.Columns["OrgIDTo"];
                this.columnOrgNameTo = this.Columns["OrgNameTo"];
                this.columnPaymentOrderStatusName = this.Columns["PaymentOrderStatusName"];
                this.columnTransactionID = this.Columns["TransactionID"];
                this.columnTransactionTypeID = this.Columns["TransactionTypeID"];
                this.columnTransactionCommited = this.Columns["TransactionCommited"];
                this.columnTransactionPosted = this.Columns["TransactionPosted"];
                this.columnClientID = this.Columns["ClientID"];
                this.columnSumFrom = this.Columns["SumFrom"];
                this.columnSumTo = this.Columns["SumTo"];
                this.columnCurrencyRate = this.Columns["CurrencyRate"];
                this.columnAccountIDFrom = this.Columns["AccountIDFrom"];
                this.columnAccountIDTo = this.Columns["AccountIDTo"];
                this.columnServiceCharge = this.Columns["ServiceCharge"];
                this.columnServiceChargeTo = this.Columns["ServiceChargeTo"];
                this.columnDocumentID = this.Columns["DocumentID"];
                this.columnPurpose = this.Columns["Purpose"];
                this.columnRemarks = this.Columns["Remarks"];
                this.columnCreateDate = this.Columns["CreateDate"];
                this.columnInitDate = this.Columns["InitDate"];
                this.columnCompleteDate = this.Columns["CompleteDate"];
                this.columnTransactionIDParent = this.Columns["TransactionIDParent"];
                this.columnClientRequestID = this.Columns["ClientRequestID"];
                this.columnPaymentOrderStatusID = this.Columns["PaymentOrderStatusID"];
                this.columnCurrencyFrom = this.Columns["CurrencyFrom"];
                this.columnCurrencyTo = this.Columns["CurrencyTo"];
                this.columnTrClientName = this.Columns["TrClientName"];
            }
            
            private void InitClass() {
                this.columnTransactionTypeName = new DataColumn("TransactionTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeName);
                this.columnTransactionIsInner = new DataColumn("TransactionIsInner", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionIsInner);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnClientIsInner = new DataColumn("ClientIsInner", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientIsInner);
                this.columnRAccountFrom = new DataColumn("RAccountFrom", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccountFrom);
                this.columnRAccountTo = new DataColumn("RAccountTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccountTo);
                this.columnOrgNameFrom = new DataColumn("OrgNameFrom", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgNameFrom);
                this.columnOrgIDFrom = new DataColumn("OrgIDFrom", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgIDFrom);
                this.columnOrgIDTo = new DataColumn("OrgIDTo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgIDTo);
                this.columnOrgNameTo = new DataColumn("OrgNameTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgNameTo);
                this.columnPaymentOrderStatusName = new DataColumn("PaymentOrderStatusName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderStatusName);
                this.columnTransactionID = new DataColumn("TransactionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionID);
                this.columnTransactionTypeID = new DataColumn("TransactionTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeID);
                this.columnTransactionCommited = new DataColumn("TransactionCommited", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionCommited);
                this.columnTransactionPosted = new DataColumn("TransactionPosted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionPosted);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnSumFrom = new DataColumn("SumFrom", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSumFrom);
                this.columnSumTo = new DataColumn("SumTo", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSumTo);
                this.columnCurrencyRate = new DataColumn("CurrencyRate", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyRate);
                this.columnAccountIDFrom = new DataColumn("AccountIDFrom", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountIDFrom);
                this.columnAccountIDTo = new DataColumn("AccountIDTo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountIDTo);
                this.columnServiceCharge = new DataColumn("ServiceCharge", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServiceCharge);
                this.columnServiceChargeTo = new DataColumn("ServiceChargeTo", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServiceChargeTo);
                this.columnDocumentID = new DataColumn("DocumentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDocumentID);
                this.columnPurpose = new DataColumn("Purpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPurpose);
                this.columnRemarks = new DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRemarks);
                this.columnCreateDate = new DataColumn("CreateDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreateDate);
                this.columnInitDate = new DataColumn("InitDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInitDate);
                this.columnCompleteDate = new DataColumn("CompleteDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompleteDate);
                this.columnTransactionIDParent = new DataColumn("TransactionIDParent", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionIDParent);
                this.columnClientRequestID = new DataColumn("ClientRequestID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientRequestID);
                this.columnPaymentOrderStatusID = new DataColumn("PaymentOrderStatusID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderStatusID);
                this.columnCurrencyFrom = new DataColumn("CurrencyFrom", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyFrom);
                this.columnCurrencyTo = new DataColumn("CurrencyTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyTo);
                this.columnTrClientName = new DataColumn("TrClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTrClientName);
                this.Constraints.Add(new UniqueConstraint("dsTransactionListKey1", new DataColumn[] {
                                this.columnTransactionID}, true));
                this.columnTransactionTypeName.AllowDBNull = false;
                this.columnTransactionIsInner.AllowDBNull = false;
                this.columnOrgIDFrom.AutoIncrement = true;
                this.columnOrgIDFrom.ReadOnly = true;
                this.columnOrgIDTo.AutoIncrement = true;
                this.columnOrgIDTo.ReadOnly = true;
                this.columnTransactionID.AutoIncrement = true;
                this.columnTransactionID.AllowDBNull = false;
                this.columnTransactionID.ReadOnly = true;
                this.columnTransactionID.Unique = true;
                this.columnTransactionTypeID.AllowDBNull = false;
                this.columnTransactionCommited.AllowDBNull = false;
                this.columnTransactionPosted.AllowDBNull = false;
                this.columnSumFrom.AllowDBNull = false;
                this.columnSumTo.AllowDBNull = false;
                this.columnCurrencyRate.AllowDBNull = false;
                this.columnServiceCharge.AllowDBNull = false;
                this.columnInitDate.ReadOnly = true;
                this.columnCompleteDate.ReadOnly = true;
                this.columnPaymentOrderStatusID.AutoIncrement = true;
                this.columnPaymentOrderStatusID.ReadOnly = true;
                this.columnCurrencyFrom.AllowDBNull = false;
                this.columnCurrencyTo.AllowDBNull = false;
                this.columnTrClientName.ReadOnly = true;
            }
            
            public TransactionsRow NewTransactionsRow() {
                return ((TransactionsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TransactionsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TransactionsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransactionsRowChanged != null)) {
                    this.TransactionsRowChanged(this, new TransactionsRowChangeEvent(((TransactionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransactionsRowChanging != null)) {
                    this.TransactionsRowChanging(this, new TransactionsRowChangeEvent(((TransactionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransactionsRowDeleted != null)) {
                    this.TransactionsRowDeleted(this, new TransactionsRowChangeEvent(((TransactionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransactionsRowDeleting != null)) {
                    this.TransactionsRowDeleting(this, new TransactionsRowChangeEvent(((TransactionsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTransactionsRow(TransactionsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionsRow : DataRow {
            
            private TransactionsDataTable tableTransactions;
            
            internal TransactionsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransactions = ((TransactionsDataTable)(this.Table));
            }
            
            public string TransactionTypeName {
                get {
                    return ((string)(this[this.tableTransactions.TransactionTypeNameColumn]));
                }
                set {
                    this[this.tableTransactions.TransactionTypeNameColumn] = value;
                }
            }
            
            public bool TransactionIsInner {
                get {
                    return ((bool)(this[this.tableTransactions.TransactionIsInnerColumn]));
                }
                set {
                    this[this.tableTransactions.TransactionIsInnerColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableTransactions.ClientNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.ClientNameColumn] = value;
                }
            }
            
            public bool ClientIsInner {
                get {
                    try {
                        return ((bool)(this[this.tableTransactions.ClientIsInnerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.ClientIsInnerColumn] = value;
                }
            }
            
            public string RAccountFrom {
                get {
                    try {
                        return ((string)(this[this.tableTransactions.RAccountFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.RAccountFromColumn] = value;
                }
            }
            
            public string RAccountTo {
                get {
                    try {
                        return ((string)(this[this.tableTransactions.RAccountToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.RAccountToColumn] = value;
                }
            }
            
            public string OrgNameFrom {
                get {
                    try {
                        return ((string)(this[this.tableTransactions.OrgNameFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.OrgNameFromColumn] = value;
                }
            }
            
            public int OrgIDFrom {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.OrgIDFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.OrgIDFromColumn] = value;
                }
            }
            
            public int OrgIDTo {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.OrgIDToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.OrgIDToColumn] = value;
                }
            }
            
            public string OrgNameTo {
                get {
                    try {
                        return ((string)(this[this.tableTransactions.OrgNameToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.OrgNameToColumn] = value;
                }
            }
            
            public string PaymentOrderStatusName {
                get {
                    try {
                        return ((string)(this[this.tableTransactions.PaymentOrderStatusNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.PaymentOrderStatusNameColumn] = value;
                }
            }
            
            public int TransactionID {
                get {
                    return ((int)(this[this.tableTransactions.TransactionIDColumn]));
                }
                set {
                    this[this.tableTransactions.TransactionIDColumn] = value;
                }
            }
            
            public int TransactionTypeID {
                get {
                    return ((int)(this[this.tableTransactions.TransactionTypeIDColumn]));
                }
                set {
                    this[this.tableTransactions.TransactionTypeIDColumn] = value;
                }
            }
            
            public bool TransactionCommited {
                get {
                    return ((bool)(this[this.tableTransactions.TransactionCommitedColumn]));
                }
                set {
                    this[this.tableTransactions.TransactionCommitedColumn] = value;
                }
            }
            
            public bool TransactionPosted {
                get {
                    return ((bool)(this[this.tableTransactions.TransactionPostedColumn]));
                }
                set {
                    this[this.tableTransactions.TransactionPostedColumn] = value;
                }
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.ClientIDColumn] = value;
                }
            }
            
            public System.Double SumFrom {
                get {
                    return ((System.Double)(this[this.tableTransactions.SumFromColumn]));
                }
                set {
                    this[this.tableTransactions.SumFromColumn] = value;
                }
            }
            
            public System.Double SumTo {
                get {
                    return ((System.Double)(this[this.tableTransactions.SumToColumn]));
                }
                set {
                    this[this.tableTransactions.SumToColumn] = value;
                }
            }
            
            public System.Double CurrencyRate {
                get {
                    return ((System.Double)(this[this.tableTransactions.CurrencyRateColumn]));
                }
                set {
                    this[this.tableTransactions.CurrencyRateColumn] = value;
                }
            }
            
            public int AccountIDFrom {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.AccountIDFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.AccountIDFromColumn] = value;
                }
            }
            
            public int AccountIDTo {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.AccountIDToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.AccountIDToColumn] = value;
                }
            }
            
            public System.Double ServiceCharge {
                get {
                    return ((System.Double)(this[this.tableTransactions.ServiceChargeColumn]));
                }
                set {
                    this[this.tableTransactions.ServiceChargeColumn] = value;
                }
            }
            
            public System.Double ServiceChargeTo {
                get {
                    try {
                        return ((System.Double)(this[this.tableTransactions.ServiceChargeToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.ServiceChargeToColumn] = value;
                }
            }
            
            public int DocumentID {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.DocumentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.DocumentIDColumn] = value;
                }
            }
            
            public string Purpose {
                get {
                    try {
                        return ((string)(this[this.tableTransactions.PurposeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.PurposeColumn] = value;
                }
            }
            
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableTransactions.RemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.RemarksColumn] = value;
                }
            }
            
            public System.DateTime CreateDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTransactions.CreateDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.CreateDateColumn] = value;
                }
            }
            
            public System.DateTime InitDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTransactions.InitDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.InitDateColumn] = value;
                }
            }
            
            public System.DateTime CompleteDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableTransactions.CompleteDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.CompleteDateColumn] = value;
                }
            }
            
            public int TransactionIDParent {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.TransactionIDParentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.TransactionIDParentColumn] = value;
                }
            }
            
            public int ClientRequestID {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.ClientRequestIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.ClientRequestIDColumn] = value;
                }
            }
            
            public int PaymentOrderStatusID {
                get {
                    try {
                        return ((int)(this[this.tableTransactions.PaymentOrderStatusIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.PaymentOrderStatusIDColumn] = value;
                }
            }
            
            public string CurrencyFrom {
                get {
                    return ((string)(this[this.tableTransactions.CurrencyFromColumn]));
                }
                set {
                    this[this.tableTransactions.CurrencyFromColumn] = value;
                }
            }
            
            public string CurrencyTo {
                get {
                    return ((string)(this[this.tableTransactions.CurrencyToColumn]));
                }
                set {
                    this[this.tableTransactions.CurrencyToColumn] = value;
                }
            }
            
            public string TrClientName {
                get {
                    try {
                        return ((string)(this[this.tableTransactions.TrClientNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransactions.TrClientNameColumn] = value;
                }
            }
            
            public bool IsClientNameNull() {
                return this.IsNull(this.tableTransactions.ClientNameColumn);
            }
            
            public void SetClientNameNull() {
                this[this.tableTransactions.ClientNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientIsInnerNull() {
                return this.IsNull(this.tableTransactions.ClientIsInnerColumn);
            }
            
            public void SetClientIsInnerNull() {
                this[this.tableTransactions.ClientIsInnerColumn] = System.Convert.DBNull;
            }
            
            public bool IsRAccountFromNull() {
                return this.IsNull(this.tableTransactions.RAccountFromColumn);
            }
            
            public void SetRAccountFromNull() {
                this[this.tableTransactions.RAccountFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsRAccountToNull() {
                return this.IsNull(this.tableTransactions.RAccountToColumn);
            }
            
            public void SetRAccountToNull() {
                this[this.tableTransactions.RAccountToColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgNameFromNull() {
                return this.IsNull(this.tableTransactions.OrgNameFromColumn);
            }
            
            public void SetOrgNameFromNull() {
                this[this.tableTransactions.OrgNameFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgIDFromNull() {
                return this.IsNull(this.tableTransactions.OrgIDFromColumn);
            }
            
            public void SetOrgIDFromNull() {
                this[this.tableTransactions.OrgIDFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgIDToNull() {
                return this.IsNull(this.tableTransactions.OrgIDToColumn);
            }
            
            public void SetOrgIDToNull() {
                this[this.tableTransactions.OrgIDToColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgNameToNull() {
                return this.IsNull(this.tableTransactions.OrgNameToColumn);
            }
            
            public void SetOrgNameToNull() {
                this[this.tableTransactions.OrgNameToColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentOrderStatusNameNull() {
                return this.IsNull(this.tableTransactions.PaymentOrderStatusNameColumn);
            }
            
            public void SetPaymentOrderStatusNameNull() {
                this[this.tableTransactions.PaymentOrderStatusNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableTransactions.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableTransactions.ClientIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountIDFromNull() {
                return this.IsNull(this.tableTransactions.AccountIDFromColumn);
            }
            
            public void SetAccountIDFromNull() {
                this[this.tableTransactions.AccountIDFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountIDToNull() {
                return this.IsNull(this.tableTransactions.AccountIDToColumn);
            }
            
            public void SetAccountIDToNull() {
                this[this.tableTransactions.AccountIDToColumn] = System.Convert.DBNull;
            }
            
            public bool IsServiceChargeToNull() {
                return this.IsNull(this.tableTransactions.ServiceChargeToColumn);
            }
            
            public void SetServiceChargeToNull() {
                this[this.tableTransactions.ServiceChargeToColumn] = System.Convert.DBNull;
            }
            
            public bool IsDocumentIDNull() {
                return this.IsNull(this.tableTransactions.DocumentIDColumn);
            }
            
            public void SetDocumentIDNull() {
                this[this.tableTransactions.DocumentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPurposeNull() {
                return this.IsNull(this.tableTransactions.PurposeColumn);
            }
            
            public void SetPurposeNull() {
                this[this.tableTransactions.PurposeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRemarksNull() {
                return this.IsNull(this.tableTransactions.RemarksColumn);
            }
            
            public void SetRemarksNull() {
                this[this.tableTransactions.RemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreateDateNull() {
                return this.IsNull(this.tableTransactions.CreateDateColumn);
            }
            
            public void SetCreateDateNull() {
                this[this.tableTransactions.CreateDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsInitDateNull() {
                return this.IsNull(this.tableTransactions.InitDateColumn);
            }
            
            public void SetInitDateNull() {
                this[this.tableTransactions.InitDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompleteDateNull() {
                return this.IsNull(this.tableTransactions.CompleteDateColumn);
            }
            
            public void SetCompleteDateNull() {
                this[this.tableTransactions.CompleteDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionIDParentNull() {
                return this.IsNull(this.tableTransactions.TransactionIDParentColumn);
            }
            
            public void SetTransactionIDParentNull() {
                this[this.tableTransactions.TransactionIDParentColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientRequestIDNull() {
                return this.IsNull(this.tableTransactions.ClientRequestIDColumn);
            }
            
            public void SetClientRequestIDNull() {
                this[this.tableTransactions.ClientRequestIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentOrderStatusIDNull() {
                return this.IsNull(this.tableTransactions.PaymentOrderStatusIDColumn);
            }
            
            public void SetPaymentOrderStatusIDNull() {
                this[this.tableTransactions.PaymentOrderStatusIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTrClientNameNull() {
                return this.IsNull(this.tableTransactions.TrClientNameColumn);
            }
            
            public void SetTrClientNameNull() {
                this[this.tableTransactions.TrClientNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionsRowChangeEvent : EventArgs {
            
            private TransactionsRow eventRow;
            
            private DataRowAction eventAction;
            
            public TransactionsRowChangeEvent(TransactionsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TransactionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
