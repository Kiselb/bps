//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.Clients.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsClients : DataSet {
        
        private ClientsDataTable tableClients;
        
        public dsClients() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsClients(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Clients"] != null)) {
                    this.Tables.Add(new ClientsDataTable(ds.Tables["Clients"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientsDataTable Clients {
            get {
                return this.tableClients;
            }
        }
        
        public override DataSet Clone() {
            dsClients cln = ((dsClients)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Clients"] != null)) {
                this.Tables.Add(new ClientsDataTable(ds.Tables["Clients"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableClients = ((ClientsDataTable)(this.Tables["Clients"]));
            if ((this.tableClients != null)) {
                this.tableClients.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsClients";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsClients.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableClients = new ClientsDataTable();
            this.Tables.Add(this.tableClients);
        }
        
        private bool ShouldSerializeClients() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ClientsRowChangeEventHandler(object sender, ClientsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClientID;
            
            private DataColumn columnClientGroupID;
            
            private DataColumn columnClientName;
            
            private DataColumn columnClientRemarks;
            
            private DataColumn columnClientGroupName;
            
            private DataColumn columnIsInner;
            
            private DataColumn columnIsSpecial;
            
            private DataColumn columnPassword;
            
            internal ClientsDataTable() : 
                    base("Clients") {
                this.InitClass();
            }
            
            internal ClientsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn ClientGroupIDColumn {
                get {
                    return this.columnClientGroupID;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn ClientRemarksColumn {
                get {
                    return this.columnClientRemarks;
                }
            }
            
            internal DataColumn ClientGroupNameColumn {
                get {
                    return this.columnClientGroupName;
                }
            }
            
            internal DataColumn IsInnerColumn {
                get {
                    return this.columnIsInner;
                }
            }
            
            internal DataColumn IsSpecialColumn {
                get {
                    return this.columnIsSpecial;
                }
            }
            
            internal DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            public ClientsRow this[int index] {
                get {
                    return ((ClientsRow)(this.Rows[index]));
                }
            }
            
            public event ClientsRowChangeEventHandler ClientsRowChanged;
            
            public event ClientsRowChangeEventHandler ClientsRowChanging;
            
            public event ClientsRowChangeEventHandler ClientsRowDeleted;
            
            public event ClientsRowChangeEventHandler ClientsRowDeleting;
            
            public void AddClientsRow(ClientsRow row) {
                this.Rows.Add(row);
            }
            
            public ClientsRow AddClientsRow(int ClientGroupID, string ClientName, string ClientRemarks, string ClientGroupName, bool IsInner, bool IsSpecial, string Password) {
                ClientsRow rowClientsRow = ((ClientsRow)(this.NewRow()));
                rowClientsRow.ItemArray = new object[] {
                        null,
                        ClientGroupID,
                        ClientName,
                        ClientRemarks,
                        ClientGroupName,
                        IsInner,
                        IsSpecial,
                        Password};
                this.Rows.Add(rowClientsRow);
                return rowClientsRow;
            }
            
            public ClientsRow FindByClientID(int ClientID) {
                return ((ClientsRow)(this.Rows.Find(new object[] {
                            ClientID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClientsDataTable cln = ((ClientsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClientsDataTable();
            }
            
            internal void InitVars() {
                this.columnClientID = this.Columns["ClientID"];
                this.columnClientGroupID = this.Columns["ClientGroupID"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnClientRemarks = this.Columns["ClientRemarks"];
                this.columnClientGroupName = this.Columns["ClientGroupName"];
                this.columnIsInner = this.Columns["IsInner"];
                this.columnIsSpecial = this.Columns["IsSpecial"];
                this.columnPassword = this.Columns["Password"];
            }
            
            private void InitClass() {
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnClientGroupID = new DataColumn("ClientGroupID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupID);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnClientRemarks = new DataColumn("ClientRemarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientRemarks);
                this.columnClientGroupName = new DataColumn("ClientGroupName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupName);
                this.columnIsInner = new DataColumn("IsInner", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInner);
                this.columnIsSpecial = new DataColumn("IsSpecial", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsSpecial);
                this.columnPassword = new DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPassword);
                this.Constraints.Add(new UniqueConstraint("dsClientsKey1", new DataColumn[] {
                                this.columnClientID}, true));
                this.columnClientID.AutoIncrement = true;
                this.columnClientID.AllowDBNull = false;
                this.columnClientID.Unique = true;
                this.columnClientGroupID.AllowDBNull = false;
                this.columnClientName.AllowDBNull = false;
                this.columnClientRemarks.AllowDBNull = false;
                this.columnClientGroupName.AllowDBNull = false;
                this.columnClientGroupName.DefaultValue = "-";
                this.columnIsInner.AllowDBNull = false;
                this.columnIsInner.DefaultValue = false;
                this.columnIsSpecial.DefaultValue = false;
            }
            
            public ClientsRow NewClientsRow() {
                return ((ClientsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClientsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClientsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientsRowChanged != null)) {
                    this.ClientsRowChanged(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientsRowChanging != null)) {
                    this.ClientsRowChanging(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientsRowDeleted != null)) {
                    this.ClientsRowDeleted(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientsRowDeleting != null)) {
                    this.ClientsRowDeleting(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClientsRow(ClientsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsRow : DataRow {
            
            private ClientsDataTable tableClients;
            
            internal ClientsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClients = ((ClientsDataTable)(this.Table));
            }
            
            public int ClientID {
                get {
                    return ((int)(this[this.tableClients.ClientIDColumn]));
                }
                set {
                    this[this.tableClients.ClientIDColumn] = value;
                }
            }
            
            public int ClientGroupID {
                get {
                    return ((int)(this[this.tableClients.ClientGroupIDColumn]));
                }
                set {
                    this[this.tableClients.ClientGroupIDColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    return ((string)(this[this.tableClients.ClientNameColumn]));
                }
                set {
                    this[this.tableClients.ClientNameColumn] = value;
                }
            }
            
            public string ClientRemarks {
                get {
                    return ((string)(this[this.tableClients.ClientRemarksColumn]));
                }
                set {
                    this[this.tableClients.ClientRemarksColumn] = value;
                }
            }
            
            public string ClientGroupName {
                get {
                    return ((string)(this[this.tableClients.ClientGroupNameColumn]));
                }
                set {
                    this[this.tableClients.ClientGroupNameColumn] = value;
                }
            }
            
            public bool IsInner {
                get {
                    return ((bool)(this[this.tableClients.IsInnerColumn]));
                }
                set {
                    this[this.tableClients.IsInnerColumn] = value;
                }
            }
            
            public bool IsSpecial {
                get {
                    try {
                        return ((bool)(this[this.tableClients.IsSpecialColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.IsSpecialColumn] = value;
                }
            }
            
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableClients.PasswordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClients.PasswordColumn] = value;
                }
            }
            
            public bool IsIsSpecialNull() {
                return this.IsNull(this.tableClients.IsSpecialColumn);
            }
            
            public void SetIsSpecialNull() {
                this[this.tableClients.IsSpecialColumn] = System.Convert.DBNull;
            }
            
            public bool IsPasswordNull() {
                return this.IsNull(this.tableClients.PasswordColumn);
            }
            
            public void SetPasswordNull() {
                this[this.tableClients.PasswordColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsRowChangeEvent : EventArgs {
            
            private ClientsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClientsRowChangeEvent(ClientsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClientsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
