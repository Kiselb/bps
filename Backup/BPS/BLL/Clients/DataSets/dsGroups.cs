//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.Clients.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsGroups : DataSet {
        
        private ClientsGroupsDataTable tableClientsGroups;
        
        public dsGroups() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsGroups(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ClientsGroups"] != null)) {
                    this.Tables.Add(new ClientsGroupsDataTable(ds.Tables["ClientsGroups"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientsGroupsDataTable ClientsGroups {
            get {
                return this.tableClientsGroups;
            }
        }
        
        public override DataSet Clone() {
            dsGroups cln = ((dsGroups)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ClientsGroups"] != null)) {
                this.Tables.Add(new ClientsGroupsDataTable(ds.Tables["ClientsGroups"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableClientsGroups = ((ClientsGroupsDataTable)(this.Tables["ClientsGroups"]));
            if ((this.tableClientsGroups != null)) {
                this.tableClientsGroups.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsGroups";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsGroups.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableClientsGroups = new ClientsGroupsDataTable();
            this.Tables.Add(this.tableClientsGroups);
        }
        
        private bool ShouldSerializeClientsGroups() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ClientsGroupsRowChangeEventHandler(object sender, ClientsGroupsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsGroupsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClientGroupID;
            
            private DataColumn columnClientGroupName;
            
            private DataColumn columnClientGroupRemarks;
            
            private DataColumn columnIsInner;
            
            private DataColumn columnIsSpecial;
            
            internal ClientsGroupsDataTable() : 
                    base("ClientsGroups") {
                this.InitClass();
            }
            
            internal ClientsGroupsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClientGroupIDColumn {
                get {
                    return this.columnClientGroupID;
                }
            }
            
            internal DataColumn ClientGroupNameColumn {
                get {
                    return this.columnClientGroupName;
                }
            }
            
            internal DataColumn ClientGroupRemarksColumn {
                get {
                    return this.columnClientGroupRemarks;
                }
            }
            
            internal DataColumn IsInnerColumn {
                get {
                    return this.columnIsInner;
                }
            }
            
            internal DataColumn IsSpecialColumn {
                get {
                    return this.columnIsSpecial;
                }
            }
            
            public ClientsGroupsRow this[int index] {
                get {
                    return ((ClientsGroupsRow)(this.Rows[index]));
                }
            }
            
            public event ClientsGroupsRowChangeEventHandler ClientsGroupsRowChanged;
            
            public event ClientsGroupsRowChangeEventHandler ClientsGroupsRowChanging;
            
            public event ClientsGroupsRowChangeEventHandler ClientsGroupsRowDeleted;
            
            public event ClientsGroupsRowChangeEventHandler ClientsGroupsRowDeleting;
            
            public void AddClientsGroupsRow(ClientsGroupsRow row) {
                this.Rows.Add(row);
            }
            
            public ClientsGroupsRow AddClientsGroupsRow(string ClientGroupName, string ClientGroupRemarks, bool IsInner, bool IsSpecial) {
                ClientsGroupsRow rowClientsGroupsRow = ((ClientsGroupsRow)(this.NewRow()));
                rowClientsGroupsRow.ItemArray = new object[] {
                        null,
                        ClientGroupName,
                        ClientGroupRemarks,
                        IsInner,
                        IsSpecial};
                this.Rows.Add(rowClientsGroupsRow);
                return rowClientsGroupsRow;
            }
            
            public ClientsGroupsRow FindByClientGroupID(int ClientGroupID) {
                return ((ClientsGroupsRow)(this.Rows.Find(new object[] {
                            ClientGroupID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClientsGroupsDataTable cln = ((ClientsGroupsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClientsGroupsDataTable();
            }
            
            internal void InitVars() {
                this.columnClientGroupID = this.Columns["ClientGroupID"];
                this.columnClientGroupName = this.Columns["ClientGroupName"];
                this.columnClientGroupRemarks = this.Columns["ClientGroupRemarks"];
                this.columnIsInner = this.Columns["IsInner"];
                this.columnIsSpecial = this.Columns["IsSpecial"];
            }
            
            private void InitClass() {
                this.columnClientGroupID = new DataColumn("ClientGroupID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupID);
                this.columnClientGroupName = new DataColumn("ClientGroupName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupName);
                this.columnClientGroupRemarks = new DataColumn("ClientGroupRemarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupRemarks);
                this.columnIsInner = new DataColumn("IsInner", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInner);
                this.columnIsSpecial = new DataColumn("IsSpecial", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsSpecial);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnClientGroupID}, true));
                this.columnClientGroupID.AutoIncrement = true;
                this.columnClientGroupID.AllowDBNull = false;
                this.columnClientGroupID.Unique = true;
                this.columnClientGroupName.AllowDBNull = false;
                this.columnClientGroupRemarks.AllowDBNull = false;
                this.columnIsInner.AllowDBNull = false;
                this.columnIsSpecial.AllowDBNull = false;
            }
            
            public ClientsGroupsRow NewClientsGroupsRow() {
                return ((ClientsGroupsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClientsGroupsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClientsGroupsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientsGroupsRowChanged != null)) {
                    this.ClientsGroupsRowChanged(this, new ClientsGroupsRowChangeEvent(((ClientsGroupsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientsGroupsRowChanging != null)) {
                    this.ClientsGroupsRowChanging(this, new ClientsGroupsRowChangeEvent(((ClientsGroupsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientsGroupsRowDeleted != null)) {
                    this.ClientsGroupsRowDeleted(this, new ClientsGroupsRowChangeEvent(((ClientsGroupsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientsGroupsRowDeleting != null)) {
                    this.ClientsGroupsRowDeleting(this, new ClientsGroupsRowChangeEvent(((ClientsGroupsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClientsGroupsRow(ClientsGroupsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsGroupsRow : DataRow {
            
            private ClientsGroupsDataTable tableClientsGroups;
            
            internal ClientsGroupsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientsGroups = ((ClientsGroupsDataTable)(this.Table));
            }
            
            public int ClientGroupID {
                get {
                    return ((int)(this[this.tableClientsGroups.ClientGroupIDColumn]));
                }
                set {
                    this[this.tableClientsGroups.ClientGroupIDColumn] = value;
                }
            }
            
            public string ClientGroupName {
                get {
                    return ((string)(this[this.tableClientsGroups.ClientGroupNameColumn]));
                }
                set {
                    this[this.tableClientsGroups.ClientGroupNameColumn] = value;
                }
            }
            
            public string ClientGroupRemarks {
                get {
                    return ((string)(this[this.tableClientsGroups.ClientGroupRemarksColumn]));
                }
                set {
                    this[this.tableClientsGroups.ClientGroupRemarksColumn] = value;
                }
            }
            
            public bool IsInner {
                get {
                    return ((bool)(this[this.tableClientsGroups.IsInnerColumn]));
                }
                set {
                    this[this.tableClientsGroups.IsInnerColumn] = value;
                }
            }
            
            public bool IsSpecial {
                get {
                    return ((bool)(this[this.tableClientsGroups.IsSpecialColumn]));
                }
                set {
                    this[this.tableClientsGroups.IsSpecialColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClientsGroupsRowChangeEvent : EventArgs {
            
            private ClientsGroupsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClientsGroupsRowChangeEvent(ClientsGroupsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClientsGroupsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
