//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.209
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.Clients.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsInterestRate : DataSet {
        
        private InterestRateDataTable tableInterestRate;
        
        public dsInterestRate() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsInterestRate(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["InterestRate"] != null)) {
                    this.Tables.Add(new InterestRateDataTable(ds.Tables["InterestRate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InterestRateDataTable InterestRate {
            get {
                return this.tableInterestRate;
            }
        }
        
        public override DataSet Clone() {
            dsInterestRate cln = ((dsInterestRate)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["InterestRate"] != null)) {
                this.Tables.Add(new InterestRateDataTable(ds.Tables["InterestRate"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableInterestRate = ((InterestRateDataTable)(this.Tables["InterestRate"]));
            if ((this.tableInterestRate != null)) {
                this.tableInterestRate.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsInterestRate";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsInterestRate.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableInterestRate = new InterestRateDataTable();
            this.Tables.Add(this.tableInterestRate);
        }
        
        private bool ShouldSerializeInterestRate() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void InterestRateRowChangeEventHandler(object sender, InterestRateRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterestRateDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnReqType;
            
            private DataColumn columnReqTypeName;
            
            private DataColumn columnRateNormal;
            
            private DataColumn columnRateBlack;
            
            internal InterestRateDataTable() : 
                    base("InterestRate") {
                this.InitClass();
            }
            
            internal InterestRateDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ReqTypeColumn {
                get {
                    return this.columnReqType;
                }
            }
            
            internal DataColumn ReqTypeNameColumn {
                get {
                    return this.columnReqTypeName;
                }
            }
            
            internal DataColumn RateNormalColumn {
                get {
                    return this.columnRateNormal;
                }
            }
            
            internal DataColumn RateBlackColumn {
                get {
                    return this.columnRateBlack;
                }
            }
            
            public InterestRateRow this[int index] {
                get {
                    return ((InterestRateRow)(this.Rows[index]));
                }
            }
            
            public event InterestRateRowChangeEventHandler InterestRateRowChanged;
            
            public event InterestRateRowChangeEventHandler InterestRateRowChanging;
            
            public event InterestRateRowChangeEventHandler InterestRateRowDeleted;
            
            public event InterestRateRowChangeEventHandler InterestRateRowDeleting;
            
            public void AddInterestRateRow(InterestRateRow row) {
                this.Rows.Add(row);
            }
            
            public InterestRateRow AddInterestRateRow(int ReqType, string ReqTypeName, System.Double RateNormal, System.Double RateBlack) {
                InterestRateRow rowInterestRateRow = ((InterestRateRow)(this.NewRow()));
                rowInterestRateRow.ItemArray = new object[] {
                        ReqType,
                        ReqTypeName,
                        RateNormal,
                        RateBlack};
                this.Rows.Add(rowInterestRateRow);
                return rowInterestRateRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InterestRateDataTable cln = ((InterestRateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InterestRateDataTable();
            }
            
            internal void InitVars() {
                this.columnReqType = this.Columns["ReqType"];
                this.columnReqTypeName = this.Columns["ReqTypeName"];
                this.columnRateNormal = this.Columns["RateNormal"];
                this.columnRateBlack = this.Columns["RateBlack"];
            }
            
            private void InitClass() {
                this.columnReqType = new DataColumn("ReqType", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReqType);
                this.columnReqTypeName = new DataColumn("ReqTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReqTypeName);
                this.columnRateNormal = new DataColumn("RateNormal", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRateNormal);
                this.columnRateBlack = new DataColumn("RateBlack", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRateBlack);
            }
            
            public InterestRateRow NewInterestRateRow() {
                return ((InterestRateRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InterestRateRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InterestRateRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InterestRateRowChanged != null)) {
                    this.InterestRateRowChanged(this, new InterestRateRowChangeEvent(((InterestRateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InterestRateRowChanging != null)) {
                    this.InterestRateRowChanging(this, new InterestRateRowChangeEvent(((InterestRateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InterestRateRowDeleted != null)) {
                    this.InterestRateRowDeleted(this, new InterestRateRowChangeEvent(((InterestRateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InterestRateRowDeleting != null)) {
                    this.InterestRateRowDeleting(this, new InterestRateRowChangeEvent(((InterestRateRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInterestRateRow(InterestRateRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterestRateRow : DataRow {
            
            private InterestRateDataTable tableInterestRate;
            
            internal InterestRateRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInterestRate = ((InterestRateDataTable)(this.Table));
            }
            
            public int ReqType {
                get {
                    try {
                        return ((int)(this[this.tableInterestRate.ReqTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInterestRate.ReqTypeColumn] = value;
                }
            }
            
            public string ReqTypeName {
                get {
                    try {
                        return ((string)(this[this.tableInterestRate.ReqTypeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInterestRate.ReqTypeNameColumn] = value;
                }
            }
            
            public System.Double RateNormal {
                get {
                    try {
                        return ((System.Double)(this[this.tableInterestRate.RateNormalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInterestRate.RateNormalColumn] = value;
                }
            }
            
            public System.Double RateBlack {
                get {
                    try {
                        return ((System.Double)(this[this.tableInterestRate.RateBlackColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInterestRate.RateBlackColumn] = value;
                }
            }
            
            public bool IsReqTypeNull() {
                return this.IsNull(this.tableInterestRate.ReqTypeColumn);
            }
            
            public void SetReqTypeNull() {
                this[this.tableInterestRate.ReqTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsReqTypeNameNull() {
                return this.IsNull(this.tableInterestRate.ReqTypeNameColumn);
            }
            
            public void SetReqTypeNameNull() {
                this[this.tableInterestRate.ReqTypeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsRateNormalNull() {
                return this.IsNull(this.tableInterestRate.RateNormalColumn);
            }
            
            public void SetRateNormalNull() {
                this[this.tableInterestRate.RateNormalColumn] = System.Convert.DBNull;
            }
            
            public bool IsRateBlackNull() {
                return this.IsNull(this.tableInterestRate.RateBlackColumn);
            }
            
            public void SetRateBlackNull() {
                this[this.tableInterestRate.RateBlackColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InterestRateRowChangeEvent : EventArgs {
            
            private InterestRateRow eventRow;
            
            private DataRowAction eventAction;
            
            public InterestRateRowChangeEvent(InterestRateRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InterestRateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
