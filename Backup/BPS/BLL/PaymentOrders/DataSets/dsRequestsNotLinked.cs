//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS._Forms {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsRequestsNotLinked : DataSet {
        
        private GetRequestsNotLinkedDataTable tableGetRequestsNotLinked;
        
        public dsRequestsNotLinked() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsRequestsNotLinked(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetRequestsNotLinked"] != null)) {
                    this.Tables.Add(new GetRequestsNotLinkedDataTable(ds.Tables["GetRequestsNotLinked"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetRequestsNotLinkedDataTable GetRequestsNotLinked {
            get {
                return this.tableGetRequestsNotLinked;
            }
        }
        
        public override DataSet Clone() {
            dsRequestsNotLinked cln = ((dsRequestsNotLinked)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GetRequestsNotLinked"] != null)) {
                this.Tables.Add(new GetRequestsNotLinkedDataTable(ds.Tables["GetRequestsNotLinked"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGetRequestsNotLinked = ((GetRequestsNotLinkedDataTable)(this.Tables["GetRequestsNotLinked"]));
            if ((this.tableGetRequestsNotLinked != null)) {
                this.tableGetRequestsNotLinked.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsRequestsNotLinked";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsRequestsNotLinked.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGetRequestsNotLinked = new GetRequestsNotLinkedDataTable();
            this.Tables.Add(this.tableGetRequestsNotLinked);
        }
        
        private bool ShouldSerializeGetRequestsNotLinked() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GetRequestsNotLinkedRowChangeEventHandler(object sender, GetRequestsNotLinkedRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetRequestsNotLinkedDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRequestID;
            
            private DataColumn columnRequestTypeID;
            
            private DataColumn columnRequestTypeName;
            
            private DataColumn columnClientID;
            
            private DataColumn columnClientName;
            
            private DataColumn columnRequestSum;
            
            private DataColumn columnRequestDate;
            
            private DataColumn columnRequestStateID;
            
            private DataColumn columnRequestStateName;
            
            private DataColumn columnRemarks;
            
            private DataColumn columnAccountFrom;
            
            private DataColumn columnAccountTo;
            
            private DataColumn columnOrgFrom;
            
            private DataColumn columnOrgTo;
            
            private DataColumn columnOrgFromINN;
            
            private DataColumn columnOrgToINN;
            
            private DataColumn columnIsIn;
            
            private DataColumn columnIsOut;
            
            private DataColumn columnCurrencyFrom;
            
            private DataColumn columnCurrencyTo;
            
            private DataColumn columnExecutedSum;
            
            private DataColumn columnRequiredSum;
            
            private DataColumn columnPurpose;
            
            internal GetRequestsNotLinkedDataTable() : 
                    base("GetRequestsNotLinked") {
                this.InitClass();
            }
            
            internal GetRequestsNotLinkedDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RequestIDColumn {
                get {
                    return this.columnRequestID;
                }
            }
            
            internal DataColumn RequestTypeIDColumn {
                get {
                    return this.columnRequestTypeID;
                }
            }
            
            internal DataColumn RequestTypeNameColumn {
                get {
                    return this.columnRequestTypeName;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn RequestSumColumn {
                get {
                    return this.columnRequestSum;
                }
            }
            
            internal DataColumn RequestDateColumn {
                get {
                    return this.columnRequestDate;
                }
            }
            
            internal DataColumn RequestStateIDColumn {
                get {
                    return this.columnRequestStateID;
                }
            }
            
            internal DataColumn RequestStateNameColumn {
                get {
                    return this.columnRequestStateName;
                }
            }
            
            internal DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            internal DataColumn AccountFromColumn {
                get {
                    return this.columnAccountFrom;
                }
            }
            
            internal DataColumn AccountToColumn {
                get {
                    return this.columnAccountTo;
                }
            }
            
            internal DataColumn OrgFromColumn {
                get {
                    return this.columnOrgFrom;
                }
            }
            
            internal DataColumn OrgToColumn {
                get {
                    return this.columnOrgTo;
                }
            }
            
            internal DataColumn OrgFromINNColumn {
                get {
                    return this.columnOrgFromINN;
                }
            }
            
            internal DataColumn OrgToINNColumn {
                get {
                    return this.columnOrgToINN;
                }
            }
            
            internal DataColumn IsInColumn {
                get {
                    return this.columnIsIn;
                }
            }
            
            internal DataColumn IsOutColumn {
                get {
                    return this.columnIsOut;
                }
            }
            
            internal DataColumn CurrencyFromColumn {
                get {
                    return this.columnCurrencyFrom;
                }
            }
            
            internal DataColumn CurrencyToColumn {
                get {
                    return this.columnCurrencyTo;
                }
            }
            
            internal DataColumn ExecutedSumColumn {
                get {
                    return this.columnExecutedSum;
                }
            }
            
            internal DataColumn RequiredSumColumn {
                get {
                    return this.columnRequiredSum;
                }
            }
            
            internal DataColumn PurposeColumn {
                get {
                    return this.columnPurpose;
                }
            }
            
            public GetRequestsNotLinkedRow this[int index] {
                get {
                    return ((GetRequestsNotLinkedRow)(this.Rows[index]));
                }
            }
            
            public event GetRequestsNotLinkedRowChangeEventHandler GetRequestsNotLinkedRowChanged;
            
            public event GetRequestsNotLinkedRowChangeEventHandler GetRequestsNotLinkedRowChanging;
            
            public event GetRequestsNotLinkedRowChangeEventHandler GetRequestsNotLinkedRowDeleted;
            
            public event GetRequestsNotLinkedRowChangeEventHandler GetRequestsNotLinkedRowDeleting;
            
            public void AddGetRequestsNotLinkedRow(GetRequestsNotLinkedRow row) {
                this.Rows.Add(row);
            }
            
            public GetRequestsNotLinkedRow AddGetRequestsNotLinkedRow(
                        int RequestTypeID, 
                        string RequestTypeName, 
                        int ClientID, 
                        string ClientName, 
                        System.Double RequestSum, 
                        System.DateTime RequestDate, 
                        int RequestStateID, 
                        string RequestStateName, 
                        string Remarks, 
                        string AccountFrom, 
                        string AccountTo, 
                        string OrgFrom, 
                        string OrgTo, 
                        string OrgFromINN, 
                        string OrgToINN, 
                        bool IsIn, 
                        bool IsOut, 
                        string CurrencyFrom, 
                        string CurrencyTo, 
                        System.Double ExecutedSum, 
                        System.Double RequiredSum, 
                        string Purpose) {
                GetRequestsNotLinkedRow rowGetRequestsNotLinkedRow = ((GetRequestsNotLinkedRow)(this.NewRow()));
                rowGetRequestsNotLinkedRow.ItemArray = new object[] {
                        null,
                        RequestTypeID,
                        RequestTypeName,
                        ClientID,
                        ClientName,
                        RequestSum,
                        RequestDate,
                        RequestStateID,
                        RequestStateName,
                        Remarks,
                        AccountFrom,
                        AccountTo,
                        OrgFrom,
                        OrgTo,
                        OrgFromINN,
                        OrgToINN,
                        IsIn,
                        IsOut,
                        CurrencyFrom,
                        CurrencyTo,
                        ExecutedSum,
                        RequiredSum,
                        Purpose};
                this.Rows.Add(rowGetRequestsNotLinkedRow);
                return rowGetRequestsNotLinkedRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GetRequestsNotLinkedDataTable cln = ((GetRequestsNotLinkedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GetRequestsNotLinkedDataTable();
            }
            
            internal void InitVars() {
                this.columnRequestID = this.Columns["RequestID"];
                this.columnRequestTypeID = this.Columns["RequestTypeID"];
                this.columnRequestTypeName = this.Columns["RequestTypeName"];
                this.columnClientID = this.Columns["ClientID"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnRequestSum = this.Columns["RequestSum"];
                this.columnRequestDate = this.Columns["RequestDate"];
                this.columnRequestStateID = this.Columns["RequestStateID"];
                this.columnRequestStateName = this.Columns["RequestStateName"];
                this.columnRemarks = this.Columns["Remarks"];
                this.columnAccountFrom = this.Columns["AccountFrom"];
                this.columnAccountTo = this.Columns["AccountTo"];
                this.columnOrgFrom = this.Columns["OrgFrom"];
                this.columnOrgTo = this.Columns["OrgTo"];
                this.columnOrgFromINN = this.Columns["OrgFromINN"];
                this.columnOrgToINN = this.Columns["OrgToINN"];
                this.columnIsIn = this.Columns["IsIn"];
                this.columnIsOut = this.Columns["IsOut"];
                this.columnCurrencyFrom = this.Columns["CurrencyFrom"];
                this.columnCurrencyTo = this.Columns["CurrencyTo"];
                this.columnExecutedSum = this.Columns["ExecutedSum"];
                this.columnRequiredSum = this.Columns["RequiredSum"];
                this.columnPurpose = this.Columns["Purpose"];
            }
            
            private void InitClass() {
                this.columnRequestID = new DataColumn("RequestID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestID);
                this.columnRequestTypeID = new DataColumn("RequestTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestTypeID);
                this.columnRequestTypeName = new DataColumn("RequestTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestTypeName);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnRequestSum = new DataColumn("RequestSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestSum);
                this.columnRequestDate = new DataColumn("RequestDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestDate);
                this.columnRequestStateID = new DataColumn("RequestStateID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestStateID);
                this.columnRequestStateName = new DataColumn("RequestStateName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestStateName);
                this.columnRemarks = new DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRemarks);
                this.columnAccountFrom = new DataColumn("AccountFrom", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountFrom);
                this.columnAccountTo = new DataColumn("AccountTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountTo);
                this.columnOrgFrom = new DataColumn("OrgFrom", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgFrom);
                this.columnOrgTo = new DataColumn("OrgTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgTo);
                this.columnOrgFromINN = new DataColumn("OrgFromINN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgFromINN);
                this.columnOrgToINN = new DataColumn("OrgToINN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgToINN);
                this.columnIsIn = new DataColumn("IsIn", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsIn);
                this.columnIsOut = new DataColumn("IsOut", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsOut);
                this.columnCurrencyFrom = new DataColumn("CurrencyFrom", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyFrom);
                this.columnCurrencyTo = new DataColumn("CurrencyTo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyTo);
                this.columnExecutedSum = new DataColumn("ExecutedSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutedSum);
                this.columnRequiredSum = new DataColumn("RequiredSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequiredSum);
                this.columnPurpose = new DataColumn("Purpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPurpose);
                this.columnRequestID.AutoIncrement = true;
                this.columnRequestID.AllowDBNull = false;
                this.columnRequestID.ReadOnly = true;
                this.columnRequestTypeID.AllowDBNull = false;
                this.columnRequestTypeName.AllowDBNull = false;
                this.columnClientID.AllowDBNull = false;
                this.columnClientName.AllowDBNull = false;
                this.columnRequestSum.AllowDBNull = false;
                this.columnRequestDate.AllowDBNull = false;
                this.columnRequestStateID.AllowDBNull = false;
                this.columnRequestStateName.AllowDBNull = false;
                this.columnExecutedSum.AllowDBNull = false;
                this.columnRequiredSum.ReadOnly = true;
            }
            
            public GetRequestsNotLinkedRow NewGetRequestsNotLinkedRow() {
                return ((GetRequestsNotLinkedRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GetRequestsNotLinkedRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GetRequestsNotLinkedRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetRequestsNotLinkedRowChanged != null)) {
                    this.GetRequestsNotLinkedRowChanged(this, new GetRequestsNotLinkedRowChangeEvent(((GetRequestsNotLinkedRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetRequestsNotLinkedRowChanging != null)) {
                    this.GetRequestsNotLinkedRowChanging(this, new GetRequestsNotLinkedRowChangeEvent(((GetRequestsNotLinkedRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetRequestsNotLinkedRowDeleted != null)) {
                    this.GetRequestsNotLinkedRowDeleted(this, new GetRequestsNotLinkedRowChangeEvent(((GetRequestsNotLinkedRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetRequestsNotLinkedRowDeleting != null)) {
                    this.GetRequestsNotLinkedRowDeleting(this, new GetRequestsNotLinkedRowChangeEvent(((GetRequestsNotLinkedRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGetRequestsNotLinkedRow(GetRequestsNotLinkedRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetRequestsNotLinkedRow : DataRow {
            
            private GetRequestsNotLinkedDataTable tableGetRequestsNotLinked;
            
            internal GetRequestsNotLinkedRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetRequestsNotLinked = ((GetRequestsNotLinkedDataTable)(this.Table));
            }
            
            public int RequestID {
                get {
                    return ((int)(this[this.tableGetRequestsNotLinked.RequestIDColumn]));
                }
                set {
                    this[this.tableGetRequestsNotLinked.RequestIDColumn] = value;
                }
            }
            
            public int RequestTypeID {
                get {
                    return ((int)(this[this.tableGetRequestsNotLinked.RequestTypeIDColumn]));
                }
                set {
                    this[this.tableGetRequestsNotLinked.RequestTypeIDColumn] = value;
                }
            }
            
            public string RequestTypeName {
                get {
                    return ((string)(this[this.tableGetRequestsNotLinked.RequestTypeNameColumn]));
                }
                set {
                    this[this.tableGetRequestsNotLinked.RequestTypeNameColumn] = value;
                }
            }
            
            public int ClientID {
                get {
                    return ((int)(this[this.tableGetRequestsNotLinked.ClientIDColumn]));
                }
                set {
                    this[this.tableGetRequestsNotLinked.ClientIDColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    return ((string)(this[this.tableGetRequestsNotLinked.ClientNameColumn]));
                }
                set {
                    this[this.tableGetRequestsNotLinked.ClientNameColumn] = value;
                }
            }
            
            public System.Double RequestSum {
                get {
                    return ((System.Double)(this[this.tableGetRequestsNotLinked.RequestSumColumn]));
                }
                set {
                    this[this.tableGetRequestsNotLinked.RequestSumColumn] = value;
                }
            }
            
            public System.DateTime RequestDate {
                get {
                    return ((System.DateTime)(this[this.tableGetRequestsNotLinked.RequestDateColumn]));
                }
                set {
                    this[this.tableGetRequestsNotLinked.RequestDateColumn] = value;
                }
            }
            
            public int RequestStateID {
                get {
                    return ((int)(this[this.tableGetRequestsNotLinked.RequestStateIDColumn]));
                }
                set {
                    this[this.tableGetRequestsNotLinked.RequestStateIDColumn] = value;
                }
            }
            
            public string RequestStateName {
                get {
                    return ((string)(this[this.tableGetRequestsNotLinked.RequestStateNameColumn]));
                }
                set {
                    this[this.tableGetRequestsNotLinked.RequestStateNameColumn] = value;
                }
            }
            
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableGetRequestsNotLinked.RemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.RemarksColumn] = value;
                }
            }
            
            public string AccountFrom {
                get {
                    try {
                        return ((string)(this[this.tableGetRequestsNotLinked.AccountFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.AccountFromColumn] = value;
                }
            }
            
            public string AccountTo {
                get {
                    try {
                        return ((string)(this[this.tableGetRequestsNotLinked.AccountToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.AccountToColumn] = value;
                }
            }
            
            public string OrgFrom {
                get {
                    try {
                        return ((string)(this[this.tableGetRequestsNotLinked.OrgFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.OrgFromColumn] = value;
                }
            }
            
            public string OrgTo {
                get {
                    try {
                        return ((string)(this[this.tableGetRequestsNotLinked.OrgToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.OrgToColumn] = value;
                }
            }
            
            public string OrgFromINN {
                get {
                    try {
                        return ((string)(this[this.tableGetRequestsNotLinked.OrgFromINNColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.OrgFromINNColumn] = value;
                }
            }
            
            public string OrgToINN {
                get {
                    try {
                        return ((string)(this[this.tableGetRequestsNotLinked.OrgToINNColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.OrgToINNColumn] = value;
                }
            }
            
            public bool IsIn {
                get {
                    try {
                        return ((bool)(this[this.tableGetRequestsNotLinked.IsInColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.IsInColumn] = value;
                }
            }
            
            public bool IsOut {
                get {
                    try {
                        return ((bool)(this[this.tableGetRequestsNotLinked.IsOutColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.IsOutColumn] = value;
                }
            }
            
            public string CurrencyFrom {
                get {
                    try {
                        return ((string)(this[this.tableGetRequestsNotLinked.CurrencyFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.CurrencyFromColumn] = value;
                }
            }
            
            public string CurrencyTo {
                get {
                    try {
                        return ((string)(this[this.tableGetRequestsNotLinked.CurrencyToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.CurrencyToColumn] = value;
                }
            }
            
            public System.Double ExecutedSum {
                get {
                    return ((System.Double)(this[this.tableGetRequestsNotLinked.ExecutedSumColumn]));
                }
                set {
                    this[this.tableGetRequestsNotLinked.ExecutedSumColumn] = value;
                }
            }
            
            public System.Double RequiredSum {
                get {
                    try {
                        return ((System.Double)(this[this.tableGetRequestsNotLinked.RequiredSumColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.RequiredSumColumn] = value;
                }
            }
            
            public string Purpose {
                get {
                    try {
                        return ((string)(this[this.tableGetRequestsNotLinked.PurposeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetRequestsNotLinked.PurposeColumn] = value;
                }
            }
            
            public bool IsRemarksNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.RemarksColumn);
            }
            
            public void SetRemarksNull() {
                this[this.tableGetRequestsNotLinked.RemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountFromNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.AccountFromColumn);
            }
            
            public void SetAccountFromNull() {
                this[this.tableGetRequestsNotLinked.AccountFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountToNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.AccountToColumn);
            }
            
            public void SetAccountToNull() {
                this[this.tableGetRequestsNotLinked.AccountToColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgFromNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.OrgFromColumn);
            }
            
            public void SetOrgFromNull() {
                this[this.tableGetRequestsNotLinked.OrgFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgToNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.OrgToColumn);
            }
            
            public void SetOrgToNull() {
                this[this.tableGetRequestsNotLinked.OrgToColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgFromINNNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.OrgFromINNColumn);
            }
            
            public void SetOrgFromINNNull() {
                this[this.tableGetRequestsNotLinked.OrgFromINNColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgToINNNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.OrgToINNColumn);
            }
            
            public void SetOrgToINNNull() {
                this[this.tableGetRequestsNotLinked.OrgToINNColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsInNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.IsInColumn);
            }
            
            public void SetIsInNull() {
                this[this.tableGetRequestsNotLinked.IsInColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsOutNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.IsOutColumn);
            }
            
            public void SetIsOutNull() {
                this[this.tableGetRequestsNotLinked.IsOutColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrencyFromNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.CurrencyFromColumn);
            }
            
            public void SetCurrencyFromNull() {
                this[this.tableGetRequestsNotLinked.CurrencyFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrencyToNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.CurrencyToColumn);
            }
            
            public void SetCurrencyToNull() {
                this[this.tableGetRequestsNotLinked.CurrencyToColumn] = System.Convert.DBNull;
            }
            
            public bool IsRequiredSumNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.RequiredSumColumn);
            }
            
            public void SetRequiredSumNull() {
                this[this.tableGetRequestsNotLinked.RequiredSumColumn] = System.Convert.DBNull;
            }
            
            public bool IsPurposeNull() {
                return this.IsNull(this.tableGetRequestsNotLinked.PurposeColumn);
            }
            
            public void SetPurposeNull() {
                this[this.tableGetRequestsNotLinked.PurposeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetRequestsNotLinkedRowChangeEvent : EventArgs {
            
            private GetRequestsNotLinkedRow eventRow;
            
            private DataRowAction eventAction;
            
            public GetRequestsNotLinkedRowChangeEvent(GetRequestsNotLinkedRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GetRequestsNotLinkedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
