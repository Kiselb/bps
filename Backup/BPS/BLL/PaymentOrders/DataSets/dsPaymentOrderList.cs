//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.PaymentOrders.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsPaymentOrderList : DataSet {
        
        private PaymentsOrdersListDataTable tablePaymentsOrdersList;
        
        public dsPaymentOrderList() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsPaymentOrderList(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PaymentsOrdersList"] != null)) {
                    this.Tables.Add(new PaymentsOrdersListDataTable(ds.Tables["PaymentsOrdersList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentsOrdersListDataTable PaymentsOrdersList {
            get {
                return this.tablePaymentsOrdersList;
            }
        }
        
        public override DataSet Clone() {
            dsPaymentOrderList cln = ((dsPaymentOrderList)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["PaymentsOrdersList"] != null)) {
                this.Tables.Add(new PaymentsOrdersListDataTable(ds.Tables["PaymentsOrdersList"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePaymentsOrdersList = ((PaymentsOrdersListDataTable)(this.Tables["PaymentsOrdersList"]));
            if ((this.tablePaymentsOrdersList != null)) {
                this.tablePaymentsOrdersList.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsPaymentOrderList";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsPaymentOrderList.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePaymentsOrdersList = new PaymentsOrdersListDataTable();
            this.Tables.Add(this.tablePaymentsOrdersList);
            this.InitExpressions();
        }
        
        private bool ShouldSerializePaymentsOrdersList() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        private void InitExpressions() {
            this.tablePaymentsOrdersList.Debit_Column.Expression = "iif(Direction,null,PaymentOrderSum)";
            this.tablePaymentsOrdersList.CreditColumn.Expression = "iif(Direction,PaymentOrderSum,null)";
            this.tablePaymentsOrdersList.POOrgNameColumn.Expression = "IIF(AccOrgName IS NOT NULL, AccOrgName, OrgName)";
            this.tablePaymentsOrdersList.POOrgNameCorrColumn.Expression = "IIF(AccOrgNameCorr IS NOT NULL, AccOrgNameCorr, OrgNameCorr)";
        }
        
        public delegate void PaymentsOrdersListRowChangeEventHandler(object sender, PaymentsOrdersListRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentsOrdersListDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPaymentOrderID;
            
            private DataColumn columnPaymentOrderDate;
            
            private DataColumn columnPaymentNo;
            
            private DataColumn columnOrgAccountID;
            
            private DataColumn columnOrgAccountIDCorr;
            
            private DataColumn columnDirection;
            
            private DataColumn columnPaymentOrderSum;
            
            private DataColumn columnPaymentOrderPurpose;
            
            private DataColumn columnRemarks;
            
            private DataColumn columnPaymentOrderStatusID;
            
            private DataColumn columnIsPrinted;
            
            private DataColumn columnHeaderDate;
            
            private DataColumn columnOrgID;
            
            private DataColumn columnRAccount;
            
            private DataColumn columnAccountID;
            
            private DataColumn columnCurrencyID;
            
            private DataColumn columnOrgName;
            
            private DataColumn columnIsInner;
            
            private DataColumn columnIsSpecial;
            
            private DataColumn columnIsNormal;
            
            private DataColumn columnRAccountCorr;
            
            private DataColumn columnOrgIDCorr;
            
            private DataColumn columnOrgNameCorr;
            
            private DataColumn columnIsNormalCorr;
            
            private DataColumn columnIsInnerCorr;
            
            private DataColumn columnIsSpecialCorr;
            
            private DataColumn columnCurrencyIDCorr;
            
            private DataColumn columnAccountIDCorr;
            
            private DataColumn columnHeaderID;
            
            private DataColumn columnPaymentOrderStatusName;
            
            private DataColumn columnClientName;
            
            private DataColumn columnIsInnerClient;
            
            private DataColumn columnAccountStatementID;
            
            private DataColumn columnDebit_;
            
            private DataColumn columnCredit;
            
            private DataColumn columnBankName;
            
            private DataColumn columnCodeBIK;
            
            private DataColumn columnKAccount;
            
            private DataColumn columnCityName;
            
            private DataColumn columnOrgName2;
            
            private DataColumn columnBankNameCorr;
            
            private DataColumn columnCodeBIKCorr;
            
            private DataColumn columnKAccountCorr;
            
            private DataColumn columnCityNameCorr;
            
            private DataColumn columnOrgName2Corr;
            
            private DataColumn columnCodeINN;
            
            private DataColumn columnCodeKPP;
            
            private DataColumn columnCodeINNCorr;
            
            private DataColumn columnCodeKPPCorr;
            
            private DataColumn columnAccOrgName;
            
            private DataColumn columnAccOrgNameCorr;
            
            private DataColumn columnPOOrgName;
            
            private DataColumn columnPOOrgNameCorr;
            
            private DataColumn columnRAccountCutted;
            
            internal PaymentsOrdersListDataTable() : 
                    base("PaymentsOrdersList") {
                this.InitClass();
            }
            
            internal PaymentsOrdersListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PaymentOrderIDColumn {
                get {
                    return this.columnPaymentOrderID;
                }
            }
            
            internal DataColumn PaymentOrderDateColumn {
                get {
                    return this.columnPaymentOrderDate;
                }
            }
            
            internal DataColumn PaymentNoColumn {
                get {
                    return this.columnPaymentNo;
                }
            }
            
            internal DataColumn OrgAccountIDColumn {
                get {
                    return this.columnOrgAccountID;
                }
            }
            
            internal DataColumn OrgAccountIDCorrColumn {
                get {
                    return this.columnOrgAccountIDCorr;
                }
            }
            
            internal DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            internal DataColumn PaymentOrderSumColumn {
                get {
                    return this.columnPaymentOrderSum;
                }
            }
            
            internal DataColumn PaymentOrderPurposeColumn {
                get {
                    return this.columnPaymentOrderPurpose;
                }
            }
            
            internal DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            internal DataColumn PaymentOrderStatusIDColumn {
                get {
                    return this.columnPaymentOrderStatusID;
                }
            }
            
            internal DataColumn IsPrintedColumn {
                get {
                    return this.columnIsPrinted;
                }
            }
            
            internal DataColumn HeaderDateColumn {
                get {
                    return this.columnHeaderDate;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            internal DataColumn RAccountColumn {
                get {
                    return this.columnRAccount;
                }
            }
            
            internal DataColumn AccountIDColumn {
                get {
                    return this.columnAccountID;
                }
            }
            
            internal DataColumn CurrencyIDColumn {
                get {
                    return this.columnCurrencyID;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            internal DataColumn IsInnerColumn {
                get {
                    return this.columnIsInner;
                }
            }
            
            internal DataColumn IsSpecialColumn {
                get {
                    return this.columnIsSpecial;
                }
            }
            
            internal DataColumn IsNormalColumn {
                get {
                    return this.columnIsNormal;
                }
            }
            
            internal DataColumn RAccountCorrColumn {
                get {
                    return this.columnRAccountCorr;
                }
            }
            
            internal DataColumn OrgIDCorrColumn {
                get {
                    return this.columnOrgIDCorr;
                }
            }
            
            internal DataColumn OrgNameCorrColumn {
                get {
                    return this.columnOrgNameCorr;
                }
            }
            
            internal DataColumn IsNormalCorrColumn {
                get {
                    return this.columnIsNormalCorr;
                }
            }
            
            internal DataColumn IsInnerCorrColumn {
                get {
                    return this.columnIsInnerCorr;
                }
            }
            
            internal DataColumn IsSpecialCorrColumn {
                get {
                    return this.columnIsSpecialCorr;
                }
            }
            
            internal DataColumn CurrencyIDCorrColumn {
                get {
                    return this.columnCurrencyIDCorr;
                }
            }
            
            internal DataColumn AccountIDCorrColumn {
                get {
                    return this.columnAccountIDCorr;
                }
            }
            
            internal DataColumn HeaderIDColumn {
                get {
                    return this.columnHeaderID;
                }
            }
            
            internal DataColumn PaymentOrderStatusNameColumn {
                get {
                    return this.columnPaymentOrderStatusName;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn IsInnerClientColumn {
                get {
                    return this.columnIsInnerClient;
                }
            }
            
            internal DataColumn AccountStatementIDColumn {
                get {
                    return this.columnAccountStatementID;
                }
            }
            
            internal DataColumn Debit_Column {
                get {
                    return this.columnDebit_;
                }
            }
            
            internal DataColumn CreditColumn {
                get {
                    return this.columnCredit;
                }
            }
            
            internal DataColumn BankNameColumn {
                get {
                    return this.columnBankName;
                }
            }
            
            internal DataColumn CodeBIKColumn {
                get {
                    return this.columnCodeBIK;
                }
            }
            
            internal DataColumn KAccountColumn {
                get {
                    return this.columnKAccount;
                }
            }
            
            internal DataColumn CityNameColumn {
                get {
                    return this.columnCityName;
                }
            }
            
            internal DataColumn OrgName2Column {
                get {
                    return this.columnOrgName2;
                }
            }
            
            internal DataColumn BankNameCorrColumn {
                get {
                    return this.columnBankNameCorr;
                }
            }
            
            internal DataColumn CodeBIKCorrColumn {
                get {
                    return this.columnCodeBIKCorr;
                }
            }
            
            internal DataColumn KAccountCorrColumn {
                get {
                    return this.columnKAccountCorr;
                }
            }
            
            internal DataColumn CityNameCorrColumn {
                get {
                    return this.columnCityNameCorr;
                }
            }
            
            internal DataColumn OrgName2CorrColumn {
                get {
                    return this.columnOrgName2Corr;
                }
            }
            
            internal DataColumn CodeINNColumn {
                get {
                    return this.columnCodeINN;
                }
            }
            
            internal DataColumn CodeKPPColumn {
                get {
                    return this.columnCodeKPP;
                }
            }
            
            internal DataColumn CodeINNCorrColumn {
                get {
                    return this.columnCodeINNCorr;
                }
            }
            
            internal DataColumn CodeKPPCorrColumn {
                get {
                    return this.columnCodeKPPCorr;
                }
            }
            
            internal DataColumn AccOrgNameColumn {
                get {
                    return this.columnAccOrgName;
                }
            }
            
            internal DataColumn AccOrgNameCorrColumn {
                get {
                    return this.columnAccOrgNameCorr;
                }
            }
            
            internal DataColumn POOrgNameColumn {
                get {
                    return this.columnPOOrgName;
                }
            }
            
            internal DataColumn POOrgNameCorrColumn {
                get {
                    return this.columnPOOrgNameCorr;
                }
            }
            
            internal DataColumn RAccountCuttedColumn {
                get {
                    return this.columnRAccountCutted;
                }
            }
            
            public PaymentsOrdersListRow this[int index] {
                get {
                    return ((PaymentsOrdersListRow)(this.Rows[index]));
                }
            }
            
            public event PaymentsOrdersListRowChangeEventHandler PaymentsOrdersListRowChanged;
            
            public event PaymentsOrdersListRowChangeEventHandler PaymentsOrdersListRowChanging;
            
            public event PaymentsOrdersListRowChangeEventHandler PaymentsOrdersListRowDeleted;
            
            public event PaymentsOrdersListRowChangeEventHandler PaymentsOrdersListRowDeleting;
            
            public void AddPaymentsOrdersListRow(PaymentsOrdersListRow row) {
                this.Rows.Add(row);
            }
            
            public PaymentsOrdersListRow AddPaymentsOrdersListRow(
                        System.DateTime PaymentOrderDate, 
                        string PaymentNo, 
                        int OrgAccountID, 
                        int OrgAccountIDCorr, 
                        bool Direction, 
                        System.Double PaymentOrderSum, 
                        string PaymentOrderPurpose, 
                        string Remarks, 
                        int PaymentOrderStatusID, 
                        bool IsPrinted, 
                        System.DateTime HeaderDate, 
                        int OrgID, 
                        string RAccount, 
                        string CurrencyID, 
                        string OrgName, 
                        bool IsInner, 
                        bool IsSpecial, 
                        bool IsNormal, 
                        string RAccountCorr, 
                        int OrgIDCorr, 
                        string OrgNameCorr, 
                        bool IsNormalCorr, 
                        bool IsInnerCorr, 
                        bool IsSpecialCorr, 
                        string CurrencyIDCorr, 
                        int HeaderID, 
                        string PaymentOrderStatusName, 
                        string ClientName, 
                        bool IsInnerClient, 
                        int AccountStatementID, 
                        System.Double Debit_, 
                        System.Double Credit, 
                        string BankName, 
                        string CodeBIK, 
                        string KAccount, 
                        string CityName, 
                        string OrgName2, 
                        string BankNameCorr, 
                        string CodeBIKCorr, 
                        string KAccountCorr, 
                        string CityNameCorr, 
                        string OrgName2Corr, 
                        string CodeINN, 
                        string CodeKPP, 
                        string CodeINNCorr, 
                        string CodeKPPCorr, 
                        string AccOrgName, 
                        string AccOrgNameCorr, 
                        string POOrgName, 
                        string POOrgNameCorr, 
                        string RAccountCutted) {
                PaymentsOrdersListRow rowPaymentsOrdersListRow = ((PaymentsOrdersListRow)(this.NewRow()));
                rowPaymentsOrdersListRow.ItemArray = new object[] {
                        null,
                        PaymentOrderDate,
                        PaymentNo,
                        OrgAccountID,
                        OrgAccountIDCorr,
                        Direction,
                        PaymentOrderSum,
                        PaymentOrderPurpose,
                        Remarks,
                        PaymentOrderStatusID,
                        IsPrinted,
                        HeaderDate,
                        OrgID,
                        RAccount,
                        null,
                        CurrencyID,
                        OrgName,
                        IsInner,
                        IsSpecial,
                        IsNormal,
                        RAccountCorr,
                        OrgIDCorr,
                        OrgNameCorr,
                        IsNormalCorr,
                        IsInnerCorr,
                        IsSpecialCorr,
                        CurrencyIDCorr,
                        null,
                        HeaderID,
                        PaymentOrderStatusName,
                        ClientName,
                        IsInnerClient,
                        AccountStatementID,
                        Debit_,
                        Credit,
                        BankName,
                        CodeBIK,
                        KAccount,
                        CityName,
                        OrgName2,
                        BankNameCorr,
                        CodeBIKCorr,
                        KAccountCorr,
                        CityNameCorr,
                        OrgName2Corr,
                        CodeINN,
                        CodeKPP,
                        CodeINNCorr,
                        CodeKPPCorr,
                        AccOrgName,
                        AccOrgNameCorr,
                        POOrgName,
                        POOrgNameCorr,
                        RAccountCutted};
                this.Rows.Add(rowPaymentsOrdersListRow);
                return rowPaymentsOrdersListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PaymentsOrdersListDataTable cln = ((PaymentsOrdersListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PaymentsOrdersListDataTable();
            }
            
            internal void InitVars() {
                this.columnPaymentOrderID = this.Columns["PaymentOrderID"];
                this.columnPaymentOrderDate = this.Columns["PaymentOrderDate"];
                this.columnPaymentNo = this.Columns["PaymentNo"];
                this.columnOrgAccountID = this.Columns["OrgAccountID"];
                this.columnOrgAccountIDCorr = this.Columns["OrgAccountIDCorr"];
                this.columnDirection = this.Columns["Direction"];
                this.columnPaymentOrderSum = this.Columns["PaymentOrderSum"];
                this.columnPaymentOrderPurpose = this.Columns["PaymentOrderPurpose"];
                this.columnRemarks = this.Columns["Remarks"];
                this.columnPaymentOrderStatusID = this.Columns["PaymentOrderStatusID"];
                this.columnIsPrinted = this.Columns["IsPrinted"];
                this.columnHeaderDate = this.Columns["HeaderDate"];
                this.columnOrgID = this.Columns["OrgID"];
                this.columnRAccount = this.Columns["RAccount"];
                this.columnAccountID = this.Columns["AccountID"];
                this.columnCurrencyID = this.Columns["CurrencyID"];
                this.columnOrgName = this.Columns["OrgName"];
                this.columnIsInner = this.Columns["IsInner"];
                this.columnIsSpecial = this.Columns["IsSpecial"];
                this.columnIsNormal = this.Columns["IsNormal"];
                this.columnRAccountCorr = this.Columns["RAccountCorr"];
                this.columnOrgIDCorr = this.Columns["OrgIDCorr"];
                this.columnOrgNameCorr = this.Columns["OrgNameCorr"];
                this.columnIsNormalCorr = this.Columns["IsNormalCorr"];
                this.columnIsInnerCorr = this.Columns["IsInnerCorr"];
                this.columnIsSpecialCorr = this.Columns["IsSpecialCorr"];
                this.columnCurrencyIDCorr = this.Columns["CurrencyIDCorr"];
                this.columnAccountIDCorr = this.Columns["AccountIDCorr"];
                this.columnHeaderID = this.Columns["HeaderID"];
                this.columnPaymentOrderStatusName = this.Columns["PaymentOrderStatusName"];
                this.columnClientName = this.Columns["ClientName"];
                this.columnIsInnerClient = this.Columns["IsInnerClient"];
                this.columnAccountStatementID = this.Columns["AccountStatementID"];
                this.columnDebit_ = this.Columns["Debit "];
                this.columnCredit = this.Columns["Credit"];
                this.columnBankName = this.Columns["BankName"];
                this.columnCodeBIK = this.Columns["CodeBIK"];
                this.columnKAccount = this.Columns["KAccount"];
                this.columnCityName = this.Columns["CityName"];
                this.columnOrgName2 = this.Columns["OrgName2"];
                this.columnBankNameCorr = this.Columns["BankNameCorr"];
                this.columnCodeBIKCorr = this.Columns["CodeBIKCorr"];
                this.columnKAccountCorr = this.Columns["KAccountCorr"];
                this.columnCityNameCorr = this.Columns["CityNameCorr"];
                this.columnOrgName2Corr = this.Columns["OrgName2Corr"];
                this.columnCodeINN = this.Columns["CodeINN"];
                this.columnCodeKPP = this.Columns["CodeKPP"];
                this.columnCodeINNCorr = this.Columns["CodeINNCorr"];
                this.columnCodeKPPCorr = this.Columns["CodeKPPCorr"];
                this.columnAccOrgName = this.Columns["AccOrgName"];
                this.columnAccOrgNameCorr = this.Columns["AccOrgNameCorr"];
                this.columnPOOrgName = this.Columns["POOrgName"];
                this.columnPOOrgNameCorr = this.Columns["POOrgNameCorr"];
                this.columnRAccountCutted = this.Columns["RAccountCutted"];
            }
            
            private void InitClass() {
                this.columnPaymentOrderID = new DataColumn("PaymentOrderID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderID);
                this.columnPaymentOrderDate = new DataColumn("PaymentOrderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderDate);
                this.columnPaymentNo = new DataColumn("PaymentNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentNo);
                this.columnOrgAccountID = new DataColumn("OrgAccountID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgAccountID);
                this.columnOrgAccountIDCorr = new DataColumn("OrgAccountIDCorr", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgAccountIDCorr);
                this.columnDirection = new DataColumn("Direction", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDirection);
                this.columnPaymentOrderSum = new DataColumn("PaymentOrderSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderSum);
                this.columnPaymentOrderPurpose = new DataColumn("PaymentOrderPurpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderPurpose);
                this.columnRemarks = new DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRemarks);
                this.columnPaymentOrderStatusID = new DataColumn("PaymentOrderStatusID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderStatusID);
                this.columnIsPrinted = new DataColumn("IsPrinted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsPrinted);
                this.columnHeaderDate = new DataColumn("HeaderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderDate);
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.columnRAccount = new DataColumn("RAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccount);
                this.columnAccountID = new DataColumn("AccountID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountID);
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyID);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnIsInner = new DataColumn("IsInner", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInner);
                this.columnIsSpecial = new DataColumn("IsSpecial", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsSpecial);
                this.columnIsNormal = new DataColumn("IsNormal", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsNormal);
                this.columnRAccountCorr = new DataColumn("RAccountCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccountCorr);
                this.columnOrgIDCorr = new DataColumn("OrgIDCorr", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgIDCorr);
                this.columnOrgNameCorr = new DataColumn("OrgNameCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgNameCorr);
                this.columnIsNormalCorr = new DataColumn("IsNormalCorr", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsNormalCorr);
                this.columnIsInnerCorr = new DataColumn("IsInnerCorr", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInnerCorr);
                this.columnIsSpecialCorr = new DataColumn("IsSpecialCorr", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsSpecialCorr);
                this.columnCurrencyIDCorr = new DataColumn("CurrencyIDCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyIDCorr);
                this.columnAccountIDCorr = new DataColumn("AccountIDCorr", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountIDCorr);
                this.columnHeaderID = new DataColumn("HeaderID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderID);
                this.columnPaymentOrderStatusName = new DataColumn("PaymentOrderStatusName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderStatusName);
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnIsInnerClient = new DataColumn("IsInnerClient", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInnerClient);
                this.columnAccountStatementID = new DataColumn("AccountStatementID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountStatementID);
                this.columnDebit_ = new DataColumn("Debit ", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDebit_);
                this.columnCredit = new DataColumn("Credit", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCredit);
                this.columnBankName = new DataColumn("BankName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankName);
                this.columnCodeBIK = new DataColumn("CodeBIK", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeBIK);
                this.columnKAccount = new DataColumn("KAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnKAccount);
                this.columnCityName = new DataColumn("CityName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCityName);
                this.columnOrgName2 = new DataColumn("OrgName2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName2);
                this.columnBankNameCorr = new DataColumn("BankNameCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankNameCorr);
                this.columnCodeBIKCorr = new DataColumn("CodeBIKCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeBIKCorr);
                this.columnKAccountCorr = new DataColumn("KAccountCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnKAccountCorr);
                this.columnCityNameCorr = new DataColumn("CityNameCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCityNameCorr);
                this.columnOrgName2Corr = new DataColumn("OrgName2Corr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName2Corr);
                this.columnCodeINN = new DataColumn("CodeINN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeINN);
                this.columnCodeKPP = new DataColumn("CodeKPP", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeKPP);
                this.columnCodeINNCorr = new DataColumn("CodeINNCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeINNCorr);
                this.columnCodeKPPCorr = new DataColumn("CodeKPPCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeKPPCorr);
                this.columnAccOrgName = new DataColumn("AccOrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccOrgName);
                this.columnAccOrgNameCorr = new DataColumn("AccOrgNameCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccOrgNameCorr);
                this.columnPOOrgName = new DataColumn("POOrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPOOrgName);
                this.columnPOOrgNameCorr = new DataColumn("POOrgNameCorr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPOOrgNameCorr);
                this.columnRAccountCutted = new DataColumn("RAccountCutted", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccountCutted);
                this.columnPaymentOrderID.AutoIncrement = true;
                this.columnPaymentOrderID.AllowDBNull = false;
                this.columnPaymentOrderID.ReadOnly = true;
                this.columnPaymentOrderDate.AllowDBNull = false;
                this.columnPaymentNo.AllowDBNull = false;
                this.columnOrgAccountID.AllowDBNull = false;
                this.columnOrgAccountIDCorr.AllowDBNull = false;
                this.columnDirection.AllowDBNull = false;
                this.columnPaymentOrderSum.AllowDBNull = false;
                this.columnPaymentOrderStatusID.AllowDBNull = false;
                this.columnIsPrinted.AllowDBNull = false;
                this.columnOrgID.AllowDBNull = false;
                this.columnRAccount.AllowDBNull = false;
                this.columnAccountID.AutoIncrement = true;
                this.columnAccountID.AllowDBNull = false;
                this.columnAccountID.ReadOnly = true;
                this.columnCurrencyID.AllowDBNull = false;
                this.columnOrgName.AllowDBNull = false;
                this.columnIsInner.AllowDBNull = false;
                this.columnIsSpecial.AllowDBNull = false;
                this.columnIsNormal.AllowDBNull = false;
                this.columnRAccountCorr.AllowDBNull = false;
                this.columnOrgIDCorr.AllowDBNull = false;
                this.columnOrgNameCorr.AllowDBNull = false;
                this.columnIsNormalCorr.AllowDBNull = false;
                this.columnIsInnerCorr.AllowDBNull = false;
                this.columnIsSpecialCorr.AllowDBNull = false;
                this.columnCurrencyIDCorr.AllowDBNull = false;
                this.columnAccountIDCorr.AutoIncrement = true;
                this.columnAccountIDCorr.AllowDBNull = false;
                this.columnAccountIDCorr.ReadOnly = true;
                this.columnPaymentOrderStatusName.AllowDBNull = false;
                this.columnDebit_.ReadOnly = true;
                this.columnCredit.ReadOnly = true;
                this.columnPOOrgName.ReadOnly = true;
                this.columnPOOrgNameCorr.ReadOnly = true;
            }
            
            public PaymentsOrdersListRow NewPaymentsOrdersListRow() {
                return ((PaymentsOrdersListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PaymentsOrdersListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PaymentsOrdersListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentsOrdersListRowChanged != null)) {
                    this.PaymentsOrdersListRowChanged(this, new PaymentsOrdersListRowChangeEvent(((PaymentsOrdersListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentsOrdersListRowChanging != null)) {
                    this.PaymentsOrdersListRowChanging(this, new PaymentsOrdersListRowChangeEvent(((PaymentsOrdersListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentsOrdersListRowDeleted != null)) {
                    this.PaymentsOrdersListRowDeleted(this, new PaymentsOrdersListRowChangeEvent(((PaymentsOrdersListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentsOrdersListRowDeleting != null)) {
                    this.PaymentsOrdersListRowDeleting(this, new PaymentsOrdersListRowChangeEvent(((PaymentsOrdersListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePaymentsOrdersListRow(PaymentsOrdersListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentsOrdersListRow : DataRow {
            
            private PaymentsOrdersListDataTable tablePaymentsOrdersList;
            
            internal PaymentsOrdersListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaymentsOrdersList = ((PaymentsOrdersListDataTable)(this.Table));
            }
            
            public int PaymentOrderID {
                get {
                    return ((int)(this[this.tablePaymentsOrdersList.PaymentOrderIDColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.PaymentOrderIDColumn] = value;
                }
            }
            
            public System.DateTime PaymentOrderDate {
                get {
                    return ((System.DateTime)(this[this.tablePaymentsOrdersList.PaymentOrderDateColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.PaymentOrderDateColumn] = value;
                }
            }
            
            public string PaymentNo {
                get {
                    return ((string)(this[this.tablePaymentsOrdersList.PaymentNoColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.PaymentNoColumn] = value;
                }
            }
            
            public int OrgAccountID {
                get {
                    return ((int)(this[this.tablePaymentsOrdersList.OrgAccountIDColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.OrgAccountIDColumn] = value;
                }
            }
            
            public int OrgAccountIDCorr {
                get {
                    return ((int)(this[this.tablePaymentsOrdersList.OrgAccountIDCorrColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.OrgAccountIDCorrColumn] = value;
                }
            }
            
            public bool Direction {
                get {
                    return ((bool)(this[this.tablePaymentsOrdersList.DirectionColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.DirectionColumn] = value;
                }
            }
            
            public System.Double PaymentOrderSum {
                get {
                    return ((System.Double)(this[this.tablePaymentsOrdersList.PaymentOrderSumColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.PaymentOrderSumColumn] = value;
                }
            }
            
            public string PaymentOrderPurpose {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.PaymentOrderPurposeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.PaymentOrderPurposeColumn] = value;
                }
            }
            
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.RemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.RemarksColumn] = value;
                }
            }
            
            public int PaymentOrderStatusID {
                get {
                    return ((int)(this[this.tablePaymentsOrdersList.PaymentOrderStatusIDColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.PaymentOrderStatusIDColumn] = value;
                }
            }
            
            public bool IsPrinted {
                get {
                    return ((bool)(this[this.tablePaymentsOrdersList.IsPrintedColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.IsPrintedColumn] = value;
                }
            }
            
            public System.DateTime HeaderDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePaymentsOrdersList.HeaderDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.HeaderDateColumn] = value;
                }
            }
            
            public int OrgID {
                get {
                    return ((int)(this[this.tablePaymentsOrdersList.OrgIDColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.OrgIDColumn] = value;
                }
            }
            
            public string RAccount {
                get {
                    return ((string)(this[this.tablePaymentsOrdersList.RAccountColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.RAccountColumn] = value;
                }
            }
            
            public int AccountID {
                get {
                    return ((int)(this[this.tablePaymentsOrdersList.AccountIDColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.AccountIDColumn] = value;
                }
            }
            
            public string CurrencyID {
                get {
                    return ((string)(this[this.tablePaymentsOrdersList.CurrencyIDColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.CurrencyIDColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    return ((string)(this[this.tablePaymentsOrdersList.OrgNameColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.OrgNameColumn] = value;
                }
            }
            
            public bool IsInner {
                get {
                    return ((bool)(this[this.tablePaymentsOrdersList.IsInnerColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.IsInnerColumn] = value;
                }
            }
            
            public bool IsSpecial {
                get {
                    return ((bool)(this[this.tablePaymentsOrdersList.IsSpecialColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.IsSpecialColumn] = value;
                }
            }
            
            public bool IsNormal {
                get {
                    return ((bool)(this[this.tablePaymentsOrdersList.IsNormalColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.IsNormalColumn] = value;
                }
            }
            
            public string RAccountCorr {
                get {
                    return ((string)(this[this.tablePaymentsOrdersList.RAccountCorrColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.RAccountCorrColumn] = value;
                }
            }
            
            public int OrgIDCorr {
                get {
                    return ((int)(this[this.tablePaymentsOrdersList.OrgIDCorrColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.OrgIDCorrColumn] = value;
                }
            }
            
            public string OrgNameCorr {
                get {
                    return ((string)(this[this.tablePaymentsOrdersList.OrgNameCorrColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.OrgNameCorrColumn] = value;
                }
            }
            
            public bool IsNormalCorr {
                get {
                    return ((bool)(this[this.tablePaymentsOrdersList.IsNormalCorrColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.IsNormalCorrColumn] = value;
                }
            }
            
            public bool IsInnerCorr {
                get {
                    return ((bool)(this[this.tablePaymentsOrdersList.IsInnerCorrColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.IsInnerCorrColumn] = value;
                }
            }
            
            public bool IsSpecialCorr {
                get {
                    return ((bool)(this[this.tablePaymentsOrdersList.IsSpecialCorrColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.IsSpecialCorrColumn] = value;
                }
            }
            
            public string CurrencyIDCorr {
                get {
                    return ((string)(this[this.tablePaymentsOrdersList.CurrencyIDCorrColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.CurrencyIDCorrColumn] = value;
                }
            }
            
            public int AccountIDCorr {
                get {
                    return ((int)(this[this.tablePaymentsOrdersList.AccountIDCorrColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.AccountIDCorrColumn] = value;
                }
            }
            
            public int HeaderID {
                get {
                    try {
                        return ((int)(this[this.tablePaymentsOrdersList.HeaderIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.HeaderIDColumn] = value;
                }
            }
            
            public string PaymentOrderStatusName {
                get {
                    return ((string)(this[this.tablePaymentsOrdersList.PaymentOrderStatusNameColumn]));
                }
                set {
                    this[this.tablePaymentsOrdersList.PaymentOrderStatusNameColumn] = value;
                }
            }
            
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.ClientNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.ClientNameColumn] = value;
                }
            }
            
            public bool IsInnerClient {
                get {
                    try {
                        return ((bool)(this[this.tablePaymentsOrdersList.IsInnerClientColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.IsInnerClientColumn] = value;
                }
            }
            
            public int AccountStatementID {
                get {
                    try {
                        return ((int)(this[this.tablePaymentsOrdersList.AccountStatementIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.AccountStatementIDColumn] = value;
                }
            }
            
            public System.Double Debit_ {
                get {
                    try {
                        return ((System.Double)(this[this.tablePaymentsOrdersList.Debit_Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.Debit_Column] = value;
                }
            }
            
            public System.Double Credit {
                get {
                    try {
                        return ((System.Double)(this[this.tablePaymentsOrdersList.CreditColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.CreditColumn] = value;
                }
            }
            
            public string BankName {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.BankNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.BankNameColumn] = value;
                }
            }
            
            public string CodeBIK {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.CodeBIKColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.CodeBIKColumn] = value;
                }
            }
            
            public string KAccount {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.KAccountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.KAccountColumn] = value;
                }
            }
            
            public string CityName {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.CityNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.CityNameColumn] = value;
                }
            }
            
            public string OrgName2 {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.OrgName2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.OrgName2Column] = value;
                }
            }
            
            public string BankNameCorr {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.BankNameCorrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.BankNameCorrColumn] = value;
                }
            }
            
            public string CodeBIKCorr {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.CodeBIKCorrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.CodeBIKCorrColumn] = value;
                }
            }
            
            public string KAccountCorr {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.KAccountCorrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.KAccountCorrColumn] = value;
                }
            }
            
            public string CityNameCorr {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.CityNameCorrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.CityNameCorrColumn] = value;
                }
            }
            
            public string OrgName2Corr {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.OrgName2CorrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.OrgName2CorrColumn] = value;
                }
            }
            
            public string CodeINN {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.CodeINNColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.CodeINNColumn] = value;
                }
            }
            
            public string CodeKPP {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.CodeKPPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.CodeKPPColumn] = value;
                }
            }
            
            public string CodeINNCorr {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.CodeINNCorrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.CodeINNCorrColumn] = value;
                }
            }
            
            public string CodeKPPCorr {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.CodeKPPCorrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.CodeKPPCorrColumn] = value;
                }
            }
            
            public string AccOrgName {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.AccOrgNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.AccOrgNameColumn] = value;
                }
            }
            
            public string AccOrgNameCorr {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.AccOrgNameCorrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.AccOrgNameCorrColumn] = value;
                }
            }
            
            public string POOrgName {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.POOrgNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.POOrgNameColumn] = value;
                }
            }
            
            public string POOrgNameCorr {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.POOrgNameCorrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.POOrgNameCorrColumn] = value;
                }
            }
            
            public string RAccountCutted {
                get {
                    try {
                        return ((string)(this[this.tablePaymentsOrdersList.RAccountCuttedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentsOrdersList.RAccountCuttedColumn] = value;
                }
            }
            
            public bool IsPaymentOrderPurposeNull() {
                return this.IsNull(this.tablePaymentsOrdersList.PaymentOrderPurposeColumn);
            }
            
            public void SetPaymentOrderPurposeNull() {
                this[this.tablePaymentsOrdersList.PaymentOrderPurposeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRemarksNull() {
                return this.IsNull(this.tablePaymentsOrdersList.RemarksColumn);
            }
            
            public void SetRemarksNull() {
                this[this.tablePaymentsOrdersList.RemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeaderDateNull() {
                return this.IsNull(this.tablePaymentsOrdersList.HeaderDateColumn);
            }
            
            public void SetHeaderDateNull() {
                this[this.tablePaymentsOrdersList.HeaderDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeaderIDNull() {
                return this.IsNull(this.tablePaymentsOrdersList.HeaderIDColumn);
            }
            
            public void SetHeaderIDNull() {
                this[this.tablePaymentsOrdersList.HeaderIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePaymentsOrdersList.ClientNameColumn);
            }
            
            public void SetClientNameNull() {
                this[this.tablePaymentsOrdersList.ClientNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsInnerClientNull() {
                return this.IsNull(this.tablePaymentsOrdersList.IsInnerClientColumn);
            }
            
            public void SetIsInnerClientNull() {
                this[this.tablePaymentsOrdersList.IsInnerClientColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountStatementIDNull() {
                return this.IsNull(this.tablePaymentsOrdersList.AccountStatementIDColumn);
            }
            
            public void SetAccountStatementIDNull() {
                this[this.tablePaymentsOrdersList.AccountStatementIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsDebit_Null() {
                return this.IsNull(this.tablePaymentsOrdersList.Debit_Column);
            }
            
            public void SetDebit_Null() {
                this[this.tablePaymentsOrdersList.Debit_Column] = System.Convert.DBNull;
            }
            
            public bool IsCreditNull() {
                return this.IsNull(this.tablePaymentsOrdersList.CreditColumn);
            }
            
            public void SetCreditNull() {
                this[this.tablePaymentsOrdersList.CreditColumn] = System.Convert.DBNull;
            }
            
            public bool IsBankNameNull() {
                return this.IsNull(this.tablePaymentsOrdersList.BankNameColumn);
            }
            
            public void SetBankNameNull() {
                this[this.tablePaymentsOrdersList.BankNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeBIKNull() {
                return this.IsNull(this.tablePaymentsOrdersList.CodeBIKColumn);
            }
            
            public void SetCodeBIKNull() {
                this[this.tablePaymentsOrdersList.CodeBIKColumn] = System.Convert.DBNull;
            }
            
            public bool IsKAccountNull() {
                return this.IsNull(this.tablePaymentsOrdersList.KAccountColumn);
            }
            
            public void SetKAccountNull() {
                this[this.tablePaymentsOrdersList.KAccountColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNameNull() {
                return this.IsNull(this.tablePaymentsOrdersList.CityNameColumn);
            }
            
            public void SetCityNameNull() {
                this[this.tablePaymentsOrdersList.CityNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgName2Null() {
                return this.IsNull(this.tablePaymentsOrdersList.OrgName2Column);
            }
            
            public void SetOrgName2Null() {
                this[this.tablePaymentsOrdersList.OrgName2Column] = System.Convert.DBNull;
            }
            
            public bool IsBankNameCorrNull() {
                return this.IsNull(this.tablePaymentsOrdersList.BankNameCorrColumn);
            }
            
            public void SetBankNameCorrNull() {
                this[this.tablePaymentsOrdersList.BankNameCorrColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeBIKCorrNull() {
                return this.IsNull(this.tablePaymentsOrdersList.CodeBIKCorrColumn);
            }
            
            public void SetCodeBIKCorrNull() {
                this[this.tablePaymentsOrdersList.CodeBIKCorrColumn] = System.Convert.DBNull;
            }
            
            public bool IsKAccountCorrNull() {
                return this.IsNull(this.tablePaymentsOrdersList.KAccountCorrColumn);
            }
            
            public void SetKAccountCorrNull() {
                this[this.tablePaymentsOrdersList.KAccountCorrColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNameCorrNull() {
                return this.IsNull(this.tablePaymentsOrdersList.CityNameCorrColumn);
            }
            
            public void SetCityNameCorrNull() {
                this[this.tablePaymentsOrdersList.CityNameCorrColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrgName2CorrNull() {
                return this.IsNull(this.tablePaymentsOrdersList.OrgName2CorrColumn);
            }
            
            public void SetOrgName2CorrNull() {
                this[this.tablePaymentsOrdersList.OrgName2CorrColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeINNNull() {
                return this.IsNull(this.tablePaymentsOrdersList.CodeINNColumn);
            }
            
            public void SetCodeINNNull() {
                this[this.tablePaymentsOrdersList.CodeINNColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeKPPNull() {
                return this.IsNull(this.tablePaymentsOrdersList.CodeKPPColumn);
            }
            
            public void SetCodeKPPNull() {
                this[this.tablePaymentsOrdersList.CodeKPPColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeINNCorrNull() {
                return this.IsNull(this.tablePaymentsOrdersList.CodeINNCorrColumn);
            }
            
            public void SetCodeINNCorrNull() {
                this[this.tablePaymentsOrdersList.CodeINNCorrColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeKPPCorrNull() {
                return this.IsNull(this.tablePaymentsOrdersList.CodeKPPCorrColumn);
            }
            
            public void SetCodeKPPCorrNull() {
                this[this.tablePaymentsOrdersList.CodeKPPCorrColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccOrgNameNull() {
                return this.IsNull(this.tablePaymentsOrdersList.AccOrgNameColumn);
            }
            
            public void SetAccOrgNameNull() {
                this[this.tablePaymentsOrdersList.AccOrgNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccOrgNameCorrNull() {
                return this.IsNull(this.tablePaymentsOrdersList.AccOrgNameCorrColumn);
            }
            
            public void SetAccOrgNameCorrNull() {
                this[this.tablePaymentsOrdersList.AccOrgNameCorrColumn] = System.Convert.DBNull;
            }
            
            public bool IsPOOrgNameNull() {
                return this.IsNull(this.tablePaymentsOrdersList.POOrgNameColumn);
            }
            
            public void SetPOOrgNameNull() {
                this[this.tablePaymentsOrdersList.POOrgNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPOOrgNameCorrNull() {
                return this.IsNull(this.tablePaymentsOrdersList.POOrgNameCorrColumn);
            }
            
            public void SetPOOrgNameCorrNull() {
                this[this.tablePaymentsOrdersList.POOrgNameCorrColumn] = System.Convert.DBNull;
            }
            
            public bool IsRAccountCuttedNull() {
                return this.IsNull(this.tablePaymentsOrdersList.RAccountCuttedColumn);
            }
            
            public void SetRAccountCuttedNull() {
                this[this.tablePaymentsOrdersList.RAccountCuttedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PaymentsOrdersListRowChangeEvent : EventArgs {
            
            private PaymentsOrdersListRow eventRow;
            
            private DataRowAction eventAction;
            
            public PaymentsOrdersListRowChangeEvent(PaymentsOrdersListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PaymentsOrdersListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
