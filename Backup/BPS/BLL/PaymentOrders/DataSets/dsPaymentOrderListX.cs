//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS._Forms {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsPaymentOrderListX : DataSet {
        
        private AccountsStatementsDataTable tableAccountsStatements;
        
        public dsPaymentOrderListX() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsPaymentOrderListX(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AccountsStatements"] != null)) {
                    this.Tables.Add(new AccountsStatementsDataTable(ds.Tables["AccountsStatements"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountsStatementsDataTable AccountsStatements {
            get {
                return this.tableAccountsStatements;
            }
        }
        
        public override DataSet Clone() {
            dsPaymentOrderListX cln = ((dsPaymentOrderListX)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["AccountsStatements"] != null)) {
                this.Tables.Add(new AccountsStatementsDataTable(ds.Tables["AccountsStatements"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAccountsStatements = ((AccountsStatementsDataTable)(this.Tables["AccountsStatements"]));
            if ((this.tableAccountsStatements != null)) {
                this.tableAccountsStatements.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsPaymentOrderListX";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsPaymentOrderListX.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAccountsStatements = new AccountsStatementsDataTable();
            this.Tables.Add(this.tableAccountsStatements);
        }
        
        private bool ShouldSerializeAccountsStatements() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AccountsStatementsRowChangeEventHandler(object sender, AccountsStatementsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCurrencyID;
            
            private DataColumn columnOrgName;
            
            private DataColumn columnRAccount;
            
            private DataColumn columnAccountID;
            
            private DataColumn columnOrgID;
            
            private DataColumn columnAccountStatementID;
            
            private DataColumn columnHeaderID;
            
            private DataColumn columnPaymentOrderDate;
            
            private DataColumn columnPaymentNo;
            
            private DataColumn columnOrgAccountIDCorr;
            
            private DataColumn columnDirection;
            
            private DataColumn columnPaymentOrderSum;
            
            private DataColumn columnPaymentOrderPurpose;
            
            private DataColumn columnRemarks;
            
            private DataColumn columnDirect;
            
            private DataColumn columnCodeKPP;
            
            internal AccountsStatementsDataTable() : 
                    base("AccountsStatements") {
                this.InitClass();
            }
            
            internal AccountsStatementsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CurrencyIDColumn {
                get {
                    return this.columnCurrencyID;
                }
            }
            
            internal DataColumn OrgNameColumn {
                get {
                    return this.columnOrgName;
                }
            }
            
            internal DataColumn RAccountColumn {
                get {
                    return this.columnRAccount;
                }
            }
            
            internal DataColumn AccountIDColumn {
                get {
                    return this.columnAccountID;
                }
            }
            
            internal DataColumn OrgIDColumn {
                get {
                    return this.columnOrgID;
                }
            }
            
            internal DataColumn AccountStatementIDColumn {
                get {
                    return this.columnAccountStatementID;
                }
            }
            
            internal DataColumn HeaderIDColumn {
                get {
                    return this.columnHeaderID;
                }
            }
            
            internal DataColumn PaymentOrderDateColumn {
                get {
                    return this.columnPaymentOrderDate;
                }
            }
            
            internal DataColumn PaymentNoColumn {
                get {
                    return this.columnPaymentNo;
                }
            }
            
            internal DataColumn OrgAccountIDCorrColumn {
                get {
                    return this.columnOrgAccountIDCorr;
                }
            }
            
            internal DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            internal DataColumn PaymentOrderSumColumn {
                get {
                    return this.columnPaymentOrderSum;
                }
            }
            
            internal DataColumn PaymentOrderPurposeColumn {
                get {
                    return this.columnPaymentOrderPurpose;
                }
            }
            
            internal DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            internal DataColumn DirectColumn {
                get {
                    return this.columnDirect;
                }
            }
            
            internal DataColumn CodeKPPColumn {
                get {
                    return this.columnCodeKPP;
                }
            }
            
            public AccountsStatementsRow this[int index] {
                get {
                    return ((AccountsStatementsRow)(this.Rows[index]));
                }
            }
            
            public event AccountsStatementsRowChangeEventHandler AccountsStatementsRowChanged;
            
            public event AccountsStatementsRowChangeEventHandler AccountsStatementsRowChanging;
            
            public event AccountsStatementsRowChangeEventHandler AccountsStatementsRowDeleted;
            
            public event AccountsStatementsRowChangeEventHandler AccountsStatementsRowDeleting;
            
            public void AddAccountsStatementsRow(AccountsStatementsRow row) {
                this.Rows.Add(row);
            }
            
            public AccountsStatementsRow AddAccountsStatementsRow(string CurrencyID, string OrgName, string RAccount, int AccountID, int OrgID, int HeaderID, System.DateTime PaymentOrderDate, string PaymentNo, int OrgAccountIDCorr, bool Direction, System.Double PaymentOrderSum, string PaymentOrderPurpose, string Remarks, string Direct, string CodeKPP) {
                AccountsStatementsRow rowAccountsStatementsRow = ((AccountsStatementsRow)(this.NewRow()));
                rowAccountsStatementsRow.ItemArray = new object[] {
                        CurrencyID,
                        OrgName,
                        RAccount,
                        AccountID,
                        OrgID,
                        null,
                        HeaderID,
                        PaymentOrderDate,
                        PaymentNo,
                        OrgAccountIDCorr,
                        Direction,
                        PaymentOrderSum,
                        PaymentOrderPurpose,
                        Remarks,
                        Direct,
                        CodeKPP};
                this.Rows.Add(rowAccountsStatementsRow);
                return rowAccountsStatementsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AccountsStatementsDataTable cln = ((AccountsStatementsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AccountsStatementsDataTable();
            }
            
            internal void InitVars() {
                this.columnCurrencyID = this.Columns["CurrencyID"];
                this.columnOrgName = this.Columns["OrgName"];
                this.columnRAccount = this.Columns["RAccount"];
                this.columnAccountID = this.Columns["AccountID"];
                this.columnOrgID = this.Columns["OrgID"];
                this.columnAccountStatementID = this.Columns["AccountStatementID"];
                this.columnHeaderID = this.Columns["HeaderID"];
                this.columnPaymentOrderDate = this.Columns["PaymentOrderDate"];
                this.columnPaymentNo = this.Columns["PaymentNo"];
                this.columnOrgAccountIDCorr = this.Columns["OrgAccountIDCorr"];
                this.columnDirection = this.Columns["Direction"];
                this.columnPaymentOrderSum = this.Columns["PaymentOrderSum"];
                this.columnPaymentOrderPurpose = this.Columns["PaymentOrderPurpose"];
                this.columnRemarks = this.Columns["Remarks"];
                this.columnDirect = this.Columns["Direct"];
                this.columnCodeKPP = this.Columns["CodeKPP"];
            }
            
            private void InitClass() {
                this.columnCurrencyID = new DataColumn("CurrencyID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyID);
                this.columnOrgName = new DataColumn("OrgName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgName);
                this.columnRAccount = new DataColumn("RAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRAccount);
                this.columnAccountID = new DataColumn("AccountID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountID);
                this.columnOrgID = new DataColumn("OrgID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgID);
                this.columnAccountStatementID = new DataColumn("AccountStatementID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountStatementID);
                this.columnHeaderID = new DataColumn("HeaderID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeaderID);
                this.columnPaymentOrderDate = new DataColumn("PaymentOrderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderDate);
                this.columnPaymentNo = new DataColumn("PaymentNo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentNo);
                this.columnOrgAccountIDCorr = new DataColumn("OrgAccountIDCorr", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrgAccountIDCorr);
                this.columnDirection = new DataColumn("Direction", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDirection);
                this.columnPaymentOrderSum = new DataColumn("PaymentOrderSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderSum);
                this.columnPaymentOrderPurpose = new DataColumn("PaymentOrderPurpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentOrderPurpose);
                this.columnRemarks = new DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRemarks);
                this.columnDirect = new DataColumn("Direct", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDirect);
                this.columnCodeKPP = new DataColumn("CodeKPP", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeKPP);
                this.columnCurrencyID.AllowDBNull = false;
                this.columnOrgName.AllowDBNull = false;
                this.columnRAccount.AllowDBNull = false;
                this.columnAccountID.AllowDBNull = false;
                this.columnOrgID.AllowDBNull = false;
                this.columnAccountStatementID.AutoIncrement = true;
                this.columnAccountStatementID.AllowDBNull = false;
                this.columnAccountStatementID.ReadOnly = true;
                this.columnHeaderID.AllowDBNull = false;
                this.columnPaymentOrderDate.AllowDBNull = false;
                this.columnPaymentNo.AllowDBNull = false;
                this.columnOrgAccountIDCorr.AllowDBNull = false;
                this.columnDirection.AllowDBNull = false;
                this.columnPaymentOrderSum.AllowDBNull = false;
                this.columnDirect.AllowDBNull = false;
            }
            
            public AccountsStatementsRow NewAccountsStatementsRow() {
                return ((AccountsStatementsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AccountsStatementsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AccountsStatementsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountsStatementsRowChanged != null)) {
                    this.AccountsStatementsRowChanged(this, new AccountsStatementsRowChangeEvent(((AccountsStatementsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountsStatementsRowChanging != null)) {
                    this.AccountsStatementsRowChanging(this, new AccountsStatementsRowChangeEvent(((AccountsStatementsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountsStatementsRowDeleted != null)) {
                    this.AccountsStatementsRowDeleted(this, new AccountsStatementsRowChangeEvent(((AccountsStatementsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountsStatementsRowDeleting != null)) {
                    this.AccountsStatementsRowDeleting(this, new AccountsStatementsRowChangeEvent(((AccountsStatementsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAccountsStatementsRow(AccountsStatementsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsRow : DataRow {
            
            private AccountsStatementsDataTable tableAccountsStatements;
            
            internal AccountsStatementsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccountsStatements = ((AccountsStatementsDataTable)(this.Table));
            }
            
            public string CurrencyID {
                get {
                    return ((string)(this[this.tableAccountsStatements.CurrencyIDColumn]));
                }
                set {
                    this[this.tableAccountsStatements.CurrencyIDColumn] = value;
                }
            }
            
            public string OrgName {
                get {
                    return ((string)(this[this.tableAccountsStatements.OrgNameColumn]));
                }
                set {
                    this[this.tableAccountsStatements.OrgNameColumn] = value;
                }
            }
            
            public string RAccount {
                get {
                    return ((string)(this[this.tableAccountsStatements.RAccountColumn]));
                }
                set {
                    this[this.tableAccountsStatements.RAccountColumn] = value;
                }
            }
            
            public int AccountID {
                get {
                    return ((int)(this[this.tableAccountsStatements.AccountIDColumn]));
                }
                set {
                    this[this.tableAccountsStatements.AccountIDColumn] = value;
                }
            }
            
            public int OrgID {
                get {
                    return ((int)(this[this.tableAccountsStatements.OrgIDColumn]));
                }
                set {
                    this[this.tableAccountsStatements.OrgIDColumn] = value;
                }
            }
            
            public int AccountStatementID {
                get {
                    return ((int)(this[this.tableAccountsStatements.AccountStatementIDColumn]));
                }
                set {
                    this[this.tableAccountsStatements.AccountStatementIDColumn] = value;
                }
            }
            
            public int HeaderID {
                get {
                    return ((int)(this[this.tableAccountsStatements.HeaderIDColumn]));
                }
                set {
                    this[this.tableAccountsStatements.HeaderIDColumn] = value;
                }
            }
            
            public System.DateTime PaymentOrderDate {
                get {
                    return ((System.DateTime)(this[this.tableAccountsStatements.PaymentOrderDateColumn]));
                }
                set {
                    this[this.tableAccountsStatements.PaymentOrderDateColumn] = value;
                }
            }
            
            public string PaymentNo {
                get {
                    return ((string)(this[this.tableAccountsStatements.PaymentNoColumn]));
                }
                set {
                    this[this.tableAccountsStatements.PaymentNoColumn] = value;
                }
            }
            
            public int OrgAccountIDCorr {
                get {
                    return ((int)(this[this.tableAccountsStatements.OrgAccountIDCorrColumn]));
                }
                set {
                    this[this.tableAccountsStatements.OrgAccountIDCorrColumn] = value;
                }
            }
            
            public bool Direction {
                get {
                    return ((bool)(this[this.tableAccountsStatements.DirectionColumn]));
                }
                set {
                    this[this.tableAccountsStatements.DirectionColumn] = value;
                }
            }
            
            public System.Double PaymentOrderSum {
                get {
                    return ((System.Double)(this[this.tableAccountsStatements.PaymentOrderSumColumn]));
                }
                set {
                    this[this.tableAccountsStatements.PaymentOrderSumColumn] = value;
                }
            }
            
            public string PaymentOrderPurpose {
                get {
                    try {
                        return ((string)(this[this.tableAccountsStatements.PaymentOrderPurposeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountsStatements.PaymentOrderPurposeColumn] = value;
                }
            }
            
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableAccountsStatements.RemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountsStatements.RemarksColumn] = value;
                }
            }
            
            public string Direct {
                get {
                    return ((string)(this[this.tableAccountsStatements.DirectColumn]));
                }
                set {
                    this[this.tableAccountsStatements.DirectColumn] = value;
                }
            }
            
            public string CodeKPP {
                get {
                    try {
                        return ((string)(this[this.tableAccountsStatements.CodeKPPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAccountsStatements.CodeKPPColumn] = value;
                }
            }
            
            public bool IsPaymentOrderPurposeNull() {
                return this.IsNull(this.tableAccountsStatements.PaymentOrderPurposeColumn);
            }
            
            public void SetPaymentOrderPurposeNull() {
                this[this.tableAccountsStatements.PaymentOrderPurposeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRemarksNull() {
                return this.IsNull(this.tableAccountsStatements.RemarksColumn);
            }
            
            public void SetRemarksNull() {
                this[this.tableAccountsStatements.RemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsCodeKPPNull() {
                return this.IsNull(this.tableAccountsStatements.CodeKPPColumn);
            }
            
            public void SetCodeKPPNull() {
                this[this.tableAccountsStatements.CodeKPPColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountsStatementsRowChangeEvent : EventArgs {
            
            private AccountsStatementsRow eventRow;
            
            private DataRowAction eventAction;
            
            public AccountsStatementsRowChangeEvent(AccountsStatementsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AccountsStatementsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
