//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS._Forms {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsCreditsOperations : DataSet {
        
        private CreditsOperationsDataTable tableCreditsOperations;
        
        public dsCreditsOperations() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsCreditsOperations(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CreditsOperations"] != null)) {
                    this.Tables.Add(new CreditsOperationsDataTable(ds.Tables["CreditsOperations"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CreditsOperationsDataTable CreditsOperations {
            get {
                return this.tableCreditsOperations;
            }
        }
        
        public override DataSet Clone() {
            dsCreditsOperations cln = ((dsCreditsOperations)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["CreditsOperations"] != null)) {
                this.Tables.Add(new CreditsOperationsDataTable(ds.Tables["CreditsOperations"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCreditsOperations = ((CreditsOperationsDataTable)(this.Tables["CreditsOperations"]));
            if ((this.tableCreditsOperations != null)) {
                this.tableCreditsOperations.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsCreditsOperations";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsCreditsOperations.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCreditsOperations = new CreditsOperationsDataTable();
            this.Tables.Add(this.tableCreditsOperations);
        }
        
        private bool ShouldSerializeCreditsOperations() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CreditsOperationsRowChangeEventHandler(object sender, CreditsOperationsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CreditsOperationsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCreditID;
            
            private DataColumn columnOperationDate;
            
            private DataColumn columnTransactionID;
            
            private DataColumn columnTransactionTypeID;
            
            private DataColumn columnTransactionCommited;
            
            private DataColumn columnTransactionPosted;
            
            private DataColumn columnClientID;
            
            private DataColumn columnSumFrom;
            
            private DataColumn columnSumTo;
            
            private DataColumn columnCurrencyRate;
            
            private DataColumn columnAccountIDFrom;
            
            private DataColumn columnAccountIDTo;
            
            private DataColumn columnServiceCharge;
            
            private DataColumn columnDocumentID;
            
            private DataColumn columnCreateDate;
            
            private DataColumn columnPostedDate;
            
            private DataColumn columnCommitedDate;
            
            private DataColumn columnTransactionIDParent;
            
            private DataColumn columnClientRequestID;
            
            private DataColumn columnPurpose;
            
            private DataColumn columnRemarks;
            
            private DataColumn columnTransactionTypeName;
            
            private DataColumn columnCreditSumCurrency;
            
            private DataColumn columnGroupID;
            
            internal CreditsOperationsDataTable() : 
                    base("CreditsOperations") {
                this.InitClass();
            }
            
            internal CreditsOperationsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CreditIDColumn {
                get {
                    return this.columnCreditID;
                }
            }
            
            internal DataColumn OperationDateColumn {
                get {
                    return this.columnOperationDate;
                }
            }
            
            internal DataColumn TransactionIDColumn {
                get {
                    return this.columnTransactionID;
                }
            }
            
            internal DataColumn TransactionTypeIDColumn {
                get {
                    return this.columnTransactionTypeID;
                }
            }
            
            internal DataColumn TransactionCommitedColumn {
                get {
                    return this.columnTransactionCommited;
                }
            }
            
            internal DataColumn TransactionPostedColumn {
                get {
                    return this.columnTransactionPosted;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn SumFromColumn {
                get {
                    return this.columnSumFrom;
                }
            }
            
            internal DataColumn SumToColumn {
                get {
                    return this.columnSumTo;
                }
            }
            
            internal DataColumn CurrencyRateColumn {
                get {
                    return this.columnCurrencyRate;
                }
            }
            
            internal DataColumn AccountIDFromColumn {
                get {
                    return this.columnAccountIDFrom;
                }
            }
            
            internal DataColumn AccountIDToColumn {
                get {
                    return this.columnAccountIDTo;
                }
            }
            
            internal DataColumn ServiceChargeColumn {
                get {
                    return this.columnServiceCharge;
                }
            }
            
            internal DataColumn DocumentIDColumn {
                get {
                    return this.columnDocumentID;
                }
            }
            
            internal DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            internal DataColumn PostedDateColumn {
                get {
                    return this.columnPostedDate;
                }
            }
            
            internal DataColumn CommitedDateColumn {
                get {
                    return this.columnCommitedDate;
                }
            }
            
            internal DataColumn TransactionIDParentColumn {
                get {
                    return this.columnTransactionIDParent;
                }
            }
            
            internal DataColumn ClientRequestIDColumn {
                get {
                    return this.columnClientRequestID;
                }
            }
            
            internal DataColumn PurposeColumn {
                get {
                    return this.columnPurpose;
                }
            }
            
            internal DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            internal DataColumn TransactionTypeNameColumn {
                get {
                    return this.columnTransactionTypeName;
                }
            }
            
            internal DataColumn CreditSumCurrencyColumn {
                get {
                    return this.columnCreditSumCurrency;
                }
            }
            
            internal DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            public CreditsOperationsRow this[int index] {
                get {
                    return ((CreditsOperationsRow)(this.Rows[index]));
                }
            }
            
            public event CreditsOperationsRowChangeEventHandler CreditsOperationsRowChanged;
            
            public event CreditsOperationsRowChangeEventHandler CreditsOperationsRowChanging;
            
            public event CreditsOperationsRowChangeEventHandler CreditsOperationsRowDeleted;
            
            public event CreditsOperationsRowChangeEventHandler CreditsOperationsRowDeleting;
            
            public void AddCreditsOperationsRow(CreditsOperationsRow row) {
                this.Rows.Add(row);
            }
            
            public CreditsOperationsRow AddCreditsOperationsRow(
                        int CreditID, 
                        System.DateTime OperationDate, 
                        int TransactionTypeID, 
                        bool TransactionCommited, 
                        bool TransactionPosted, 
                        int ClientID, 
                        System.Double SumFrom, 
                        System.Double SumTo, 
                        System.Double CurrencyRate, 
                        int AccountIDFrom, 
                        int AccountIDTo, 
                        System.Double ServiceCharge, 
                        int DocumentID, 
                        System.DateTime CreateDate, 
                        System.DateTime PostedDate, 
                        System.DateTime CommitedDate, 
                        int TransactionIDParent, 
                        int ClientRequestID, 
                        string Purpose, 
                        string Remarks, 
                        string TransactionTypeName, 
                        string CreditSumCurrency, 
                        int GroupID) {
                CreditsOperationsRow rowCreditsOperationsRow = ((CreditsOperationsRow)(this.NewRow()));
                rowCreditsOperationsRow.ItemArray = new object[] {
                        CreditID,
                        OperationDate,
                        null,
                        TransactionTypeID,
                        TransactionCommited,
                        TransactionPosted,
                        ClientID,
                        SumFrom,
                        SumTo,
                        CurrencyRate,
                        AccountIDFrom,
                        AccountIDTo,
                        ServiceCharge,
                        DocumentID,
                        CreateDate,
                        PostedDate,
                        CommitedDate,
                        TransactionIDParent,
                        ClientRequestID,
                        Purpose,
                        Remarks,
                        TransactionTypeName,
                        CreditSumCurrency,
                        GroupID};
                this.Rows.Add(rowCreditsOperationsRow);
                return rowCreditsOperationsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CreditsOperationsDataTable cln = ((CreditsOperationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CreditsOperationsDataTable();
            }
            
            internal void InitVars() {
                this.columnCreditID = this.Columns["CreditID"];
                this.columnOperationDate = this.Columns["OperationDate"];
                this.columnTransactionID = this.Columns["TransactionID"];
                this.columnTransactionTypeID = this.Columns["TransactionTypeID"];
                this.columnTransactionCommited = this.Columns["TransactionCommited"];
                this.columnTransactionPosted = this.Columns["TransactionPosted"];
                this.columnClientID = this.Columns["ClientID"];
                this.columnSumFrom = this.Columns["SumFrom"];
                this.columnSumTo = this.Columns["SumTo"];
                this.columnCurrencyRate = this.Columns["CurrencyRate"];
                this.columnAccountIDFrom = this.Columns["AccountIDFrom"];
                this.columnAccountIDTo = this.Columns["AccountIDTo"];
                this.columnServiceCharge = this.Columns["ServiceCharge"];
                this.columnDocumentID = this.Columns["DocumentID"];
                this.columnCreateDate = this.Columns["CreateDate"];
                this.columnPostedDate = this.Columns["PostedDate"];
                this.columnCommitedDate = this.Columns["CommitedDate"];
                this.columnTransactionIDParent = this.Columns["TransactionIDParent"];
                this.columnClientRequestID = this.Columns["ClientRequestID"];
                this.columnPurpose = this.Columns["Purpose"];
                this.columnRemarks = this.Columns["Remarks"];
                this.columnTransactionTypeName = this.Columns["TransactionTypeName"];
                this.columnCreditSumCurrency = this.Columns["CreditSumCurrency"];
                this.columnGroupID = this.Columns["GroupID"];
            }
            
            private void InitClass() {
                this.columnCreditID = new DataColumn("CreditID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreditID);
                this.columnOperationDate = new DataColumn("OperationDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOperationDate);
                this.columnTransactionID = new DataColumn("TransactionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionID);
                this.columnTransactionTypeID = new DataColumn("TransactionTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeID);
                this.columnTransactionCommited = new DataColumn("TransactionCommited", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionCommited);
                this.columnTransactionPosted = new DataColumn("TransactionPosted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionPosted);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnSumFrom = new DataColumn("SumFrom", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSumFrom);
                this.columnSumTo = new DataColumn("SumTo", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSumTo);
                this.columnCurrencyRate = new DataColumn("CurrencyRate", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyRate);
                this.columnAccountIDFrom = new DataColumn("AccountIDFrom", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountIDFrom);
                this.columnAccountIDTo = new DataColumn("AccountIDTo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountIDTo);
                this.columnServiceCharge = new DataColumn("ServiceCharge", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServiceCharge);
                this.columnDocumentID = new DataColumn("DocumentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDocumentID);
                this.columnCreateDate = new DataColumn("CreateDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreateDate);
                this.columnPostedDate = new DataColumn("PostedDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostedDate);
                this.columnCommitedDate = new DataColumn("CommitedDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommitedDate);
                this.columnTransactionIDParent = new DataColumn("TransactionIDParent", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionIDParent);
                this.columnClientRequestID = new DataColumn("ClientRequestID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientRequestID);
                this.columnPurpose = new DataColumn("Purpose", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPurpose);
                this.columnRemarks = new DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRemarks);
                this.columnTransactionTypeName = new DataColumn("TransactionTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeName);
                this.columnCreditSumCurrency = new DataColumn("CreditSumCurrency", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreditSumCurrency);
                this.columnGroupID = new DataColumn("GroupID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupID);
                this.columnCreditID.AllowDBNull = false;
                this.columnOperationDate.AllowDBNull = false;
                this.columnTransactionID.AutoIncrement = true;
                this.columnTransactionID.ReadOnly = true;
                this.columnCreditSumCurrency.AllowDBNull = false;
            }
            
            public CreditsOperationsRow NewCreditsOperationsRow() {
                return ((CreditsOperationsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CreditsOperationsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CreditsOperationsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CreditsOperationsRowChanged != null)) {
                    this.CreditsOperationsRowChanged(this, new CreditsOperationsRowChangeEvent(((CreditsOperationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CreditsOperationsRowChanging != null)) {
                    this.CreditsOperationsRowChanging(this, new CreditsOperationsRowChangeEvent(((CreditsOperationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CreditsOperationsRowDeleted != null)) {
                    this.CreditsOperationsRowDeleted(this, new CreditsOperationsRowChangeEvent(((CreditsOperationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CreditsOperationsRowDeleting != null)) {
                    this.CreditsOperationsRowDeleting(this, new CreditsOperationsRowChangeEvent(((CreditsOperationsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCreditsOperationsRow(CreditsOperationsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CreditsOperationsRow : DataRow {
            
            private CreditsOperationsDataTable tableCreditsOperations;
            
            internal CreditsOperationsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCreditsOperations = ((CreditsOperationsDataTable)(this.Table));
            }
            
            public int CreditID {
                get {
                    return ((int)(this[this.tableCreditsOperations.CreditIDColumn]));
                }
                set {
                    this[this.tableCreditsOperations.CreditIDColumn] = value;
                }
            }
            
            public System.DateTime OperationDate {
                get {
                    return ((System.DateTime)(this[this.tableCreditsOperations.OperationDateColumn]));
                }
                set {
                    this[this.tableCreditsOperations.OperationDateColumn] = value;
                }
            }
            
            public int TransactionID {
                get {
                    try {
                        return ((int)(this[this.tableCreditsOperations.TransactionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.TransactionIDColumn] = value;
                }
            }
            
            public int TransactionTypeID {
                get {
                    try {
                        return ((int)(this[this.tableCreditsOperations.TransactionTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.TransactionTypeIDColumn] = value;
                }
            }
            
            public bool TransactionCommited {
                get {
                    try {
                        return ((bool)(this[this.tableCreditsOperations.TransactionCommitedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.TransactionCommitedColumn] = value;
                }
            }
            
            public bool TransactionPosted {
                get {
                    try {
                        return ((bool)(this[this.tableCreditsOperations.TransactionPostedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.TransactionPostedColumn] = value;
                }
            }
            
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableCreditsOperations.ClientIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.ClientIDColumn] = value;
                }
            }
            
            public System.Double SumFrom {
                get {
                    try {
                        return ((System.Double)(this[this.tableCreditsOperations.SumFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.SumFromColumn] = value;
                }
            }
            
            public System.Double SumTo {
                get {
                    try {
                        return ((System.Double)(this[this.tableCreditsOperations.SumToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.SumToColumn] = value;
                }
            }
            
            public System.Double CurrencyRate {
                get {
                    try {
                        return ((System.Double)(this[this.tableCreditsOperations.CurrencyRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.CurrencyRateColumn] = value;
                }
            }
            
            public int AccountIDFrom {
                get {
                    try {
                        return ((int)(this[this.tableCreditsOperations.AccountIDFromColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.AccountIDFromColumn] = value;
                }
            }
            
            public int AccountIDTo {
                get {
                    try {
                        return ((int)(this[this.tableCreditsOperations.AccountIDToColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.AccountIDToColumn] = value;
                }
            }
            
            public System.Double ServiceCharge {
                get {
                    try {
                        return ((System.Double)(this[this.tableCreditsOperations.ServiceChargeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.ServiceChargeColumn] = value;
                }
            }
            
            public int DocumentID {
                get {
                    try {
                        return ((int)(this[this.tableCreditsOperations.DocumentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.DocumentIDColumn] = value;
                }
            }
            
            public System.DateTime CreateDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCreditsOperations.CreateDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.CreateDateColumn] = value;
                }
            }
            
            public System.DateTime PostedDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCreditsOperations.PostedDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.PostedDateColumn] = value;
                }
            }
            
            public System.DateTime CommitedDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCreditsOperations.CommitedDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.CommitedDateColumn] = value;
                }
            }
            
            public int TransactionIDParent {
                get {
                    try {
                        return ((int)(this[this.tableCreditsOperations.TransactionIDParentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.TransactionIDParentColumn] = value;
                }
            }
            
            public int ClientRequestID {
                get {
                    try {
                        return ((int)(this[this.tableCreditsOperations.ClientRequestIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.ClientRequestIDColumn] = value;
                }
            }
            
            public string Purpose {
                get {
                    try {
                        return ((string)(this[this.tableCreditsOperations.PurposeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.PurposeColumn] = value;
                }
            }
            
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableCreditsOperations.RemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.RemarksColumn] = value;
                }
            }
            
            public string TransactionTypeName {
                get {
                    try {
                        return ((string)(this[this.tableCreditsOperations.TransactionTypeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.TransactionTypeNameColumn] = value;
                }
            }
            
            public string CreditSumCurrency {
                get {
                    return ((string)(this[this.tableCreditsOperations.CreditSumCurrencyColumn]));
                }
                set {
                    this[this.tableCreditsOperations.CreditSumCurrencyColumn] = value;
                }
            }
            
            public int GroupID {
                get {
                    try {
                        return ((int)(this[this.tableCreditsOperations.GroupIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCreditsOperations.GroupIDColumn] = value;
                }
            }
            
            public bool IsTransactionIDNull() {
                return this.IsNull(this.tableCreditsOperations.TransactionIDColumn);
            }
            
            public void SetTransactionIDNull() {
                this[this.tableCreditsOperations.TransactionIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionTypeIDNull() {
                return this.IsNull(this.tableCreditsOperations.TransactionTypeIDColumn);
            }
            
            public void SetTransactionTypeIDNull() {
                this[this.tableCreditsOperations.TransactionTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionCommitedNull() {
                return this.IsNull(this.tableCreditsOperations.TransactionCommitedColumn);
            }
            
            public void SetTransactionCommitedNull() {
                this[this.tableCreditsOperations.TransactionCommitedColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionPostedNull() {
                return this.IsNull(this.tableCreditsOperations.TransactionPostedColumn);
            }
            
            public void SetTransactionPostedNull() {
                this[this.tableCreditsOperations.TransactionPostedColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientIDNull() {
                return this.IsNull(this.tableCreditsOperations.ClientIDColumn);
            }
            
            public void SetClientIDNull() {
                this[this.tableCreditsOperations.ClientIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSumFromNull() {
                return this.IsNull(this.tableCreditsOperations.SumFromColumn);
            }
            
            public void SetSumFromNull() {
                this[this.tableCreditsOperations.SumFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsSumToNull() {
                return this.IsNull(this.tableCreditsOperations.SumToColumn);
            }
            
            public void SetSumToNull() {
                this[this.tableCreditsOperations.SumToColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrencyRateNull() {
                return this.IsNull(this.tableCreditsOperations.CurrencyRateColumn);
            }
            
            public void SetCurrencyRateNull() {
                this[this.tableCreditsOperations.CurrencyRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountIDFromNull() {
                return this.IsNull(this.tableCreditsOperations.AccountIDFromColumn);
            }
            
            public void SetAccountIDFromNull() {
                this[this.tableCreditsOperations.AccountIDFromColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountIDToNull() {
                return this.IsNull(this.tableCreditsOperations.AccountIDToColumn);
            }
            
            public void SetAccountIDToNull() {
                this[this.tableCreditsOperations.AccountIDToColumn] = System.Convert.DBNull;
            }
            
            public bool IsServiceChargeNull() {
                return this.IsNull(this.tableCreditsOperations.ServiceChargeColumn);
            }
            
            public void SetServiceChargeNull() {
                this[this.tableCreditsOperations.ServiceChargeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDocumentIDNull() {
                return this.IsNull(this.tableCreditsOperations.DocumentIDColumn);
            }
            
            public void SetDocumentIDNull() {
                this[this.tableCreditsOperations.DocumentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreateDateNull() {
                return this.IsNull(this.tableCreditsOperations.CreateDateColumn);
            }
            
            public void SetCreateDateNull() {
                this[this.tableCreditsOperations.CreateDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostedDateNull() {
                return this.IsNull(this.tableCreditsOperations.PostedDateColumn);
            }
            
            public void SetPostedDateNull() {
                this[this.tableCreditsOperations.PostedDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommitedDateNull() {
                return this.IsNull(this.tableCreditsOperations.CommitedDateColumn);
            }
            
            public void SetCommitedDateNull() {
                this[this.tableCreditsOperations.CommitedDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionIDParentNull() {
                return this.IsNull(this.tableCreditsOperations.TransactionIDParentColumn);
            }
            
            public void SetTransactionIDParentNull() {
                this[this.tableCreditsOperations.TransactionIDParentColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientRequestIDNull() {
                return this.IsNull(this.tableCreditsOperations.ClientRequestIDColumn);
            }
            
            public void SetClientRequestIDNull() {
                this[this.tableCreditsOperations.ClientRequestIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPurposeNull() {
                return this.IsNull(this.tableCreditsOperations.PurposeColumn);
            }
            
            public void SetPurposeNull() {
                this[this.tableCreditsOperations.PurposeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRemarksNull() {
                return this.IsNull(this.tableCreditsOperations.RemarksColumn);
            }
            
            public void SetRemarksNull() {
                this[this.tableCreditsOperations.RemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionTypeNameNull() {
                return this.IsNull(this.tableCreditsOperations.TransactionTypeNameColumn);
            }
            
            public void SetTransactionTypeNameNull() {
                this[this.tableCreditsOperations.TransactionTypeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsGroupIDNull() {
                return this.IsNull(this.tableCreditsOperations.GroupIDColumn);
            }
            
            public void SetGroupIDNull() {
                this[this.tableCreditsOperations.GroupIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CreditsOperationsRowChangeEvent : EventArgs {
            
            private CreditsOperationsRow eventRow;
            
            private DataRowAction eventAction;
            
            public CreditsOperationsRowChangeEvent(CreditsOperationsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CreditsOperationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
