//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace BPS.BLL.Credits.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsCredits : DataSet {
        
        private CreditsDataTable tableCredits;
        
        public dsCredits() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsCredits(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Credits"] != null)) {
                    this.Tables.Add(new CreditsDataTable(ds.Tables["Credits"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CreditsDataTable Credits {
            get {
                return this.tableCredits;
            }
        }
        
        public override DataSet Clone() {
            dsCredits cln = ((dsCredits)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Credits"] != null)) {
                this.Tables.Add(new CreditsDataTable(ds.Tables["Credits"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCredits = ((CreditsDataTable)(this.Tables["Credits"]));
            if ((this.tableCredits != null)) {
                this.tableCredits.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsCredits";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsCredits.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCredits = new CreditsDataTable();
            this.Tables.Add(this.tableCredits);
            this.InitExpressions();
        }
        
        private bool ShouldSerializeCredits() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        private void InitExpressions() {
            this.tableCredits.GrantedTextColumn.Expression = "iif(IsGranted=1,\'Выдача\',\'Получение\')";
            this.tableCredits.CreditTypeColumn.Expression = "iif(IsExtended = 1, \'С планом погашения\', iif(IsShortTerm = 1, \'Краткосрочный\', \'" +
"Долгосрочный\'))";
        }
        
        public delegate void CreditsRowChangeEventHandler(object sender, CreditsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CreditsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClientName;
            
            private DataColumn columnClientGroupID;
            
            private DataColumn columnCreditStatusName;
            
            private DataColumn columnCreditID;
            
            private DataColumn columnCreditStatusID;
            
            private DataColumn columnClientID;
            
            private DataColumn columnIsGranted;
            
            private DataColumn columnStartDate;
            
            private DataColumn columnEndDate;
            
            private DataColumn columnCreditSum;
            
            private DataColumn columnServiceCharge;
            
            private DataColumn columnServiceChargeExtra;
            
            private DataColumn columnRemarks;
            
            private DataColumn columnGrantedText;
            
            private DataColumn columnCreditSumCurrency;
            
            private DataColumn columnClientGroupName;
            
            private DataColumn columnIsExtended;
            
            private DataColumn columnIsShortTerm;
            
            private DataColumn columnCreditType;
            
            private DataColumn columnPercentageRoundMode;
            
            private DataColumn columnPercentageSinkMode;
            
            internal CreditsDataTable() : 
                    base("Credits") {
                this.InitClass();
            }
            
            internal CreditsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            internal DataColumn ClientGroupIDColumn {
                get {
                    return this.columnClientGroupID;
                }
            }
            
            internal DataColumn CreditStatusNameColumn {
                get {
                    return this.columnCreditStatusName;
                }
            }
            
            internal DataColumn CreditIDColumn {
                get {
                    return this.columnCreditID;
                }
            }
            
            internal DataColumn CreditStatusIDColumn {
                get {
                    return this.columnCreditStatusID;
                }
            }
            
            internal DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            internal DataColumn IsGrantedColumn {
                get {
                    return this.columnIsGranted;
                }
            }
            
            internal DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            internal DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            internal DataColumn CreditSumColumn {
                get {
                    return this.columnCreditSum;
                }
            }
            
            internal DataColumn ServiceChargeColumn {
                get {
                    return this.columnServiceCharge;
                }
            }
            
            internal DataColumn ServiceChargeExtraColumn {
                get {
                    return this.columnServiceChargeExtra;
                }
            }
            
            internal DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            internal DataColumn GrantedTextColumn {
                get {
                    return this.columnGrantedText;
                }
            }
            
            internal DataColumn CreditSumCurrencyColumn {
                get {
                    return this.columnCreditSumCurrency;
                }
            }
            
            internal DataColumn ClientGroupNameColumn {
                get {
                    return this.columnClientGroupName;
                }
            }
            
            internal DataColumn IsExtendedColumn {
                get {
                    return this.columnIsExtended;
                }
            }
            
            internal DataColumn IsShortTermColumn {
                get {
                    return this.columnIsShortTerm;
                }
            }
            
            internal DataColumn CreditTypeColumn {
                get {
                    return this.columnCreditType;
                }
            }
            
            internal DataColumn PercentageRoundModeColumn {
                get {
                    return this.columnPercentageRoundMode;
                }
            }
            
            internal DataColumn PercentageSinkModeColumn {
                get {
                    return this.columnPercentageSinkMode;
                }
            }
            
            public CreditsRow this[int index] {
                get {
                    return ((CreditsRow)(this.Rows[index]));
                }
            }
            
            public event CreditsRowChangeEventHandler CreditsRowChanged;
            
            public event CreditsRowChangeEventHandler CreditsRowChanging;
            
            public event CreditsRowChangeEventHandler CreditsRowDeleted;
            
            public event CreditsRowChangeEventHandler CreditsRowDeleting;
            
            public void AddCreditsRow(CreditsRow row) {
                this.Rows.Add(row);
            }
            
            public CreditsRow AddCreditsRow(
                        string ClientName, 
                        int ClientGroupID, 
                        string CreditStatusName, 
                        int CreditStatusID, 
                        int ClientID, 
                        bool IsGranted, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        System.Double CreditSum, 
                        System.Double ServiceCharge, 
                        System.Double ServiceChargeExtra, 
                        string Remarks, 
                        string GrantedText, 
                        string CreditSumCurrency, 
                        string ClientGroupName, 
                        bool IsExtended, 
                        bool IsShortTerm, 
                        string CreditType, 
                        bool PercentageRoundMode, 
                        bool PercentageSinkMode) {
                CreditsRow rowCreditsRow = ((CreditsRow)(this.NewRow()));
                rowCreditsRow.ItemArray = new object[] {
                        ClientName,
                        ClientGroupID,
                        CreditStatusName,
                        null,
                        CreditStatusID,
                        ClientID,
                        IsGranted,
                        StartDate,
                        EndDate,
                        CreditSum,
                        ServiceCharge,
                        ServiceChargeExtra,
                        Remarks,
                        GrantedText,
                        CreditSumCurrency,
                        ClientGroupName,
                        IsExtended,
                        IsShortTerm,
                        CreditType,
                        PercentageRoundMode,
                        PercentageSinkMode};
                this.Rows.Add(rowCreditsRow);
                return rowCreditsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CreditsDataTable cln = ((CreditsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CreditsDataTable();
            }
            
            internal void InitVars() {
                this.columnClientName = this.Columns["ClientName"];
                this.columnClientGroupID = this.Columns["ClientGroupID"];
                this.columnCreditStatusName = this.Columns["CreditStatusName"];
                this.columnCreditID = this.Columns["CreditID"];
                this.columnCreditStatusID = this.Columns["CreditStatusID"];
                this.columnClientID = this.Columns["ClientID"];
                this.columnIsGranted = this.Columns["IsGranted"];
                this.columnStartDate = this.Columns["StartDate"];
                this.columnEndDate = this.Columns["EndDate"];
                this.columnCreditSum = this.Columns["CreditSum"];
                this.columnServiceCharge = this.Columns["ServiceCharge"];
                this.columnServiceChargeExtra = this.Columns["ServiceChargeExtra"];
                this.columnRemarks = this.Columns["Remarks"];
                this.columnGrantedText = this.Columns["GrantedText"];
                this.columnCreditSumCurrency = this.Columns["CreditSumCurrency"];
                this.columnClientGroupName = this.Columns["ClientGroupName"];
                this.columnIsExtended = this.Columns["IsExtended"];
                this.columnIsShortTerm = this.Columns["IsShortTerm"];
                this.columnCreditType = this.Columns["CreditType"];
                this.columnPercentageRoundMode = this.Columns["PercentageRoundMode"];
                this.columnPercentageSinkMode = this.Columns["PercentageSinkMode"];
            }
            
            private void InitClass() {
                this.columnClientName = new DataColumn("ClientName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientName);
                this.columnClientGroupID = new DataColumn("ClientGroupID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupID);
                this.columnCreditStatusName = new DataColumn("CreditStatusName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreditStatusName);
                this.columnCreditID = new DataColumn("CreditID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreditID);
                this.columnCreditStatusID = new DataColumn("CreditStatusID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreditStatusID);
                this.columnClientID = new DataColumn("ClientID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientID);
                this.columnIsGranted = new DataColumn("IsGranted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsGranted);
                this.columnStartDate = new DataColumn("StartDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartDate);
                this.columnEndDate = new DataColumn("EndDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEndDate);
                this.columnCreditSum = new DataColumn("CreditSum", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreditSum);
                this.columnServiceCharge = new DataColumn("ServiceCharge", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServiceCharge);
                this.columnServiceChargeExtra = new DataColumn("ServiceChargeExtra", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnServiceChargeExtra);
                this.columnRemarks = new DataColumn("Remarks", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRemarks);
                this.columnGrantedText = new DataColumn("GrantedText", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGrantedText);
                this.columnCreditSumCurrency = new DataColumn("CreditSumCurrency", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreditSumCurrency);
                this.columnClientGroupName = new DataColumn("ClientGroupName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClientGroupName);
                this.columnIsExtended = new DataColumn("IsExtended", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsExtended);
                this.columnIsShortTerm = new DataColumn("IsShortTerm", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsShortTerm);
                this.columnCreditType = new DataColumn("CreditType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreditType);
                this.columnPercentageRoundMode = new DataColumn("PercentageRoundMode", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPercentageRoundMode);
                this.columnPercentageSinkMode = new DataColumn("PercentageSinkMode", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPercentageSinkMode);
                this.columnCreditID.AutoIncrement = true;
                this.columnCreditID.AllowDBNull = false;
                this.columnCreditID.ReadOnly = true;
                this.columnCreditStatusID.AllowDBNull = false;
                this.columnClientID.AllowDBNull = false;
                this.columnIsGranted.AllowDBNull = false;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnCreditSum.AllowDBNull = false;
                this.columnServiceCharge.AllowDBNull = false;
                this.columnServiceChargeExtra.AllowDBNull = false;
                this.columnGrantedText.ReadOnly = true;
                this.columnIsExtended.DefaultValue = false;
                this.columnIsShortTerm.DefaultValue = false;
                this.columnCreditType.ReadOnly = true;
                this.columnPercentageRoundMode.AllowDBNull = false;
                this.columnPercentageSinkMode.AllowDBNull = false;
            }
            
            public CreditsRow NewCreditsRow() {
                return ((CreditsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CreditsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CreditsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CreditsRowChanged != null)) {
                    this.CreditsRowChanged(this, new CreditsRowChangeEvent(((CreditsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CreditsRowChanging != null)) {
                    this.CreditsRowChanging(this, new CreditsRowChangeEvent(((CreditsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CreditsRowDeleted != null)) {
                    this.CreditsRowDeleted(this, new CreditsRowChangeEvent(((CreditsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CreditsRowDeleting != null)) {
                    this.CreditsRowDeleting(this, new CreditsRowChangeEvent(((CreditsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCreditsRow(CreditsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CreditsRow : DataRow {
            
            private CreditsDataTable tableCredits;
            
            internal CreditsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCredits = ((CreditsDataTable)(this.Table));
            }
            
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableCredits.ClientNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCredits.ClientNameColumn] = value;
                }
            }
            
            public int ClientGroupID {
                get {
                    try {
                        return ((int)(this[this.tableCredits.ClientGroupIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCredits.ClientGroupIDColumn] = value;
                }
            }
            
            public string CreditStatusName {
                get {
                    try {
                        return ((string)(this[this.tableCredits.CreditStatusNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCredits.CreditStatusNameColumn] = value;
                }
            }
            
            public int CreditID {
                get {
                    return ((int)(this[this.tableCredits.CreditIDColumn]));
                }
                set {
                    this[this.tableCredits.CreditIDColumn] = value;
                }
            }
            
            public int CreditStatusID {
                get {
                    return ((int)(this[this.tableCredits.CreditStatusIDColumn]));
                }
                set {
                    this[this.tableCredits.CreditStatusIDColumn] = value;
                }
            }
            
            public int ClientID {
                get {
                    return ((int)(this[this.tableCredits.ClientIDColumn]));
                }
                set {
                    this[this.tableCredits.ClientIDColumn] = value;
                }
            }
            
            public bool IsGranted {
                get {
                    return ((bool)(this[this.tableCredits.IsGrantedColumn]));
                }
                set {
                    this[this.tableCredits.IsGrantedColumn] = value;
                }
            }
            
            public System.DateTime StartDate {
                get {
                    return ((System.DateTime)(this[this.tableCredits.StartDateColumn]));
                }
                set {
                    this[this.tableCredits.StartDateColumn] = value;
                }
            }
            
            public System.DateTime EndDate {
                get {
                    return ((System.DateTime)(this[this.tableCredits.EndDateColumn]));
                }
                set {
                    this[this.tableCredits.EndDateColumn] = value;
                }
            }
            
            public System.Double CreditSum {
                get {
                    return ((System.Double)(this[this.tableCredits.CreditSumColumn]));
                }
                set {
                    this[this.tableCredits.CreditSumColumn] = value;
                }
            }
            
            public System.Double ServiceCharge {
                get {
                    return ((System.Double)(this[this.tableCredits.ServiceChargeColumn]));
                }
                set {
                    this[this.tableCredits.ServiceChargeColumn] = value;
                }
            }
            
            public System.Double ServiceChargeExtra {
                get {
                    return ((System.Double)(this[this.tableCredits.ServiceChargeExtraColumn]));
                }
                set {
                    this[this.tableCredits.ServiceChargeExtraColumn] = value;
                }
            }
            
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableCredits.RemarksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCredits.RemarksColumn] = value;
                }
            }
            
            public string GrantedText {
                get {
                    try {
                        return ((string)(this[this.tableCredits.GrantedTextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCredits.GrantedTextColumn] = value;
                }
            }
            
            public string CreditSumCurrency {
                get {
                    try {
                        return ((string)(this[this.tableCredits.CreditSumCurrencyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCredits.CreditSumCurrencyColumn] = value;
                }
            }
            
            public string ClientGroupName {
                get {
                    try {
                        return ((string)(this[this.tableCredits.ClientGroupNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCredits.ClientGroupNameColumn] = value;
                }
            }
            
            public bool IsExtended {
                get {
                    try {
                        return ((bool)(this[this.tableCredits.IsExtendedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCredits.IsExtendedColumn] = value;
                }
            }
            
            public bool IsShortTerm {
                get {
                    try {
                        return ((bool)(this[this.tableCredits.IsShortTermColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCredits.IsShortTermColumn] = value;
                }
            }
            
            public string CreditType {
                get {
                    try {
                        return ((string)(this[this.tableCredits.CreditTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCredits.CreditTypeColumn] = value;
                }
            }
            
            public bool PercentageRoundMode {
                get {
                    return ((bool)(this[this.tableCredits.PercentageRoundModeColumn]));
                }
                set {
                    this[this.tableCredits.PercentageRoundModeColumn] = value;
                }
            }
            
            public bool PercentageSinkMode {
                get {
                    return ((bool)(this[this.tableCredits.PercentageSinkModeColumn]));
                }
                set {
                    this[this.tableCredits.PercentageSinkModeColumn] = value;
                }
            }
            
            public bool IsClientNameNull() {
                return this.IsNull(this.tableCredits.ClientNameColumn);
            }
            
            public void SetClientNameNull() {
                this[this.tableCredits.ClientNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientGroupIDNull() {
                return this.IsNull(this.tableCredits.ClientGroupIDColumn);
            }
            
            public void SetClientGroupIDNull() {
                this[this.tableCredits.ClientGroupIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreditStatusNameNull() {
                return this.IsNull(this.tableCredits.CreditStatusNameColumn);
            }
            
            public void SetCreditStatusNameNull() {
                this[this.tableCredits.CreditStatusNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsRemarksNull() {
                return this.IsNull(this.tableCredits.RemarksColumn);
            }
            
            public void SetRemarksNull() {
                this[this.tableCredits.RemarksColumn] = System.Convert.DBNull;
            }
            
            public bool IsGrantedTextNull() {
                return this.IsNull(this.tableCredits.GrantedTextColumn);
            }
            
            public void SetGrantedTextNull() {
                this[this.tableCredits.GrantedTextColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreditSumCurrencyNull() {
                return this.IsNull(this.tableCredits.CreditSumCurrencyColumn);
            }
            
            public void SetCreditSumCurrencyNull() {
                this[this.tableCredits.CreditSumCurrencyColumn] = System.Convert.DBNull;
            }
            
            public bool IsClientGroupNameNull() {
                return this.IsNull(this.tableCredits.ClientGroupNameColumn);
            }
            
            public void SetClientGroupNameNull() {
                this[this.tableCredits.ClientGroupNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsExtendedNull() {
                return this.IsNull(this.tableCredits.IsExtendedColumn);
            }
            
            public void SetIsExtendedNull() {
                this[this.tableCredits.IsExtendedColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsShortTermNull() {
                return this.IsNull(this.tableCredits.IsShortTermColumn);
            }
            
            public void SetIsShortTermNull() {
                this[this.tableCredits.IsShortTermColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreditTypeNull() {
                return this.IsNull(this.tableCredits.CreditTypeColumn);
            }
            
            public void SetCreditTypeNull() {
                this[this.tableCredits.CreditTypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CreditsRowChangeEvent : EventArgs {
            
            private CreditsRow eventRow;
            
            private DataRowAction eventAction;
            
            public CreditsRowChangeEvent(CreditsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CreditsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
