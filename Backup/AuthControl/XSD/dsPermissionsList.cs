//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace AuthControl.XSD {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsPermissionsList : DataSet {
        
        private PermissionsDescriptionsDataTable tablePermissionsDescriptions;
        
        public dsPermissionsList() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsPermissionsList(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PermissionsDescriptions"] != null)) {
                    this.Tables.Add(new PermissionsDescriptionsDataTable(ds.Tables["PermissionsDescriptions"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PermissionsDescriptionsDataTable PermissionsDescriptions {
            get {
                return this.tablePermissionsDescriptions;
            }
        }
        
        public override DataSet Clone() {
            dsPermissionsList cln = ((dsPermissionsList)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["PermissionsDescriptions"] != null)) {
                this.Tables.Add(new PermissionsDescriptionsDataTable(ds.Tables["PermissionsDescriptions"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePermissionsDescriptions = ((PermissionsDescriptionsDataTable)(this.Tables["PermissionsDescriptions"]));
            if ((this.tablePermissionsDescriptions != null)) {
                this.tablePermissionsDescriptions.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsPermissionsList";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsPermissionsList.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePermissionsDescriptions = new PermissionsDescriptionsDataTable();
            this.Tables.Add(this.tablePermissionsDescriptions);
        }
        
        private bool ShouldSerializePermissionsDescriptions() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PermissionsDescriptionsRowChangeEventHandler(object sender, PermissionsDescriptionsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PermissionsDescriptionsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPermissionID;
            
            private DataColumn columnDescription;
            
            private DataColumn columnPermissionTypeID;
            
            private DataColumn columnParentPermissionID;
            
            private DataColumn columnInternalName;
            
            internal PermissionsDescriptionsDataTable() : 
                    base("PermissionsDescriptions") {
                this.InitClass();
            }
            
            internal PermissionsDescriptionsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PermissionIDColumn {
                get {
                    return this.columnPermissionID;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn PermissionTypeIDColumn {
                get {
                    return this.columnPermissionTypeID;
                }
            }
            
            internal DataColumn ParentPermissionIDColumn {
                get {
                    return this.columnParentPermissionID;
                }
            }
            
            internal DataColumn InternalNameColumn {
                get {
                    return this.columnInternalName;
                }
            }
            
            public PermissionsDescriptionsRow this[int index] {
                get {
                    return ((PermissionsDescriptionsRow)(this.Rows[index]));
                }
            }
            
            public event PermissionsDescriptionsRowChangeEventHandler PermissionsDescriptionsRowChanged;
            
            public event PermissionsDescriptionsRowChangeEventHandler PermissionsDescriptionsRowChanging;
            
            public event PermissionsDescriptionsRowChangeEventHandler PermissionsDescriptionsRowDeleted;
            
            public event PermissionsDescriptionsRowChangeEventHandler PermissionsDescriptionsRowDeleting;
            
            public void AddPermissionsDescriptionsRow(PermissionsDescriptionsRow row) {
                this.Rows.Add(row);
            }
            
            public PermissionsDescriptionsRow AddPermissionsDescriptionsRow(string Description, int PermissionTypeID, int ParentPermissionID, string InternalName) {
                PermissionsDescriptionsRow rowPermissionsDescriptionsRow = ((PermissionsDescriptionsRow)(this.NewRow()));
                rowPermissionsDescriptionsRow.ItemArray = new object[] {
                        null,
                        Description,
                        PermissionTypeID,
                        ParentPermissionID,
                        InternalName};
                this.Rows.Add(rowPermissionsDescriptionsRow);
                return rowPermissionsDescriptionsRow;
            }
            
            public PermissionsDescriptionsRow FindByPermissionID(int PermissionID) {
                return ((PermissionsDescriptionsRow)(this.Rows.Find(new object[] {
                            PermissionID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PermissionsDescriptionsDataTable cln = ((PermissionsDescriptionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PermissionsDescriptionsDataTable();
            }
            
            internal void InitVars() {
                this.columnPermissionID = this.Columns["PermissionID"];
                this.columnDescription = this.Columns["Description"];
                this.columnPermissionTypeID = this.Columns["PermissionTypeID"];
                this.columnParentPermissionID = this.Columns["ParentPermissionID"];
                this.columnInternalName = this.Columns["InternalName"];
            }
            
            private void InitClass() {
                this.columnPermissionID = new DataColumn("PermissionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPermissionID);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnPermissionTypeID = new DataColumn("PermissionTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPermissionTypeID);
                this.columnParentPermissionID = new DataColumn("ParentPermissionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentPermissionID);
                this.columnInternalName = new DataColumn("InternalName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInternalName);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPermissionID}, true));
                this.columnPermissionID.AutoIncrement = true;
                this.columnPermissionID.AllowDBNull = false;
                this.columnPermissionID.Unique = true;
                this.columnDescription.AllowDBNull = false;
                this.columnPermissionTypeID.AllowDBNull = false;
                this.columnInternalName.AllowDBNull = false;
            }
            
            public PermissionsDescriptionsRow NewPermissionsDescriptionsRow() {
                return ((PermissionsDescriptionsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PermissionsDescriptionsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PermissionsDescriptionsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PermissionsDescriptionsRowChanged != null)) {
                    this.PermissionsDescriptionsRowChanged(this, new PermissionsDescriptionsRowChangeEvent(((PermissionsDescriptionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PermissionsDescriptionsRowChanging != null)) {
                    this.PermissionsDescriptionsRowChanging(this, new PermissionsDescriptionsRowChangeEvent(((PermissionsDescriptionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PermissionsDescriptionsRowDeleted != null)) {
                    this.PermissionsDescriptionsRowDeleted(this, new PermissionsDescriptionsRowChangeEvent(((PermissionsDescriptionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PermissionsDescriptionsRowDeleting != null)) {
                    this.PermissionsDescriptionsRowDeleting(this, new PermissionsDescriptionsRowChangeEvent(((PermissionsDescriptionsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePermissionsDescriptionsRow(PermissionsDescriptionsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PermissionsDescriptionsRow : DataRow {
            
            private PermissionsDescriptionsDataTable tablePermissionsDescriptions;
            
            internal PermissionsDescriptionsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePermissionsDescriptions = ((PermissionsDescriptionsDataTable)(this.Table));
            }
            
            public int PermissionID {
                get {
                    return ((int)(this[this.tablePermissionsDescriptions.PermissionIDColumn]));
                }
                set {
                    this[this.tablePermissionsDescriptions.PermissionIDColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tablePermissionsDescriptions.DescriptionColumn]));
                }
                set {
                    this[this.tablePermissionsDescriptions.DescriptionColumn] = value;
                }
            }
            
            public int PermissionTypeID {
                get {
                    return ((int)(this[this.tablePermissionsDescriptions.PermissionTypeIDColumn]));
                }
                set {
                    this[this.tablePermissionsDescriptions.PermissionTypeIDColumn] = value;
                }
            }
            
            public int ParentPermissionID {
                get {
                    try {
                        return ((int)(this[this.tablePermissionsDescriptions.ParentPermissionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePermissionsDescriptions.ParentPermissionIDColumn] = value;
                }
            }
            
            public string InternalName {
                get {
                    return ((string)(this[this.tablePermissionsDescriptions.InternalNameColumn]));
                }
                set {
                    this[this.tablePermissionsDescriptions.InternalNameColumn] = value;
                }
            }
            
            public bool IsParentPermissionIDNull() {
                return this.IsNull(this.tablePermissionsDescriptions.ParentPermissionIDColumn);
            }
            
            public void SetParentPermissionIDNull() {
                this[this.tablePermissionsDescriptions.ParentPermissionIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PermissionsDescriptionsRowChangeEvent : EventArgs {
            
            private PermissionsDescriptionsRow eventRow;
            
            private DataRowAction eventAction;
            
            public PermissionsDescriptionsRowChangeEvent(PermissionsDescriptionsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PermissionsDescriptionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
