//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace AuthControl.XSD {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsGroupsPermissions : DataSet {
        
        private UserGroupsPermissionsDataTable tableUserGroupsPermissions;
        
        public dsGroupsPermissions() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsGroupsPermissions(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UserGroupsPermissions"] != null)) {
                    this.Tables.Add(new UserGroupsPermissionsDataTable(ds.Tables["UserGroupsPermissions"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserGroupsPermissionsDataTable UserGroupsPermissions {
            get {
                return this.tableUserGroupsPermissions;
            }
        }
        
        public override DataSet Clone() {
            dsGroupsPermissions cln = ((dsGroupsPermissions)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["UserGroupsPermissions"] != null)) {
                this.Tables.Add(new UserGroupsPermissionsDataTable(ds.Tables["UserGroupsPermissions"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableUserGroupsPermissions = ((UserGroupsPermissionsDataTable)(this.Tables["UserGroupsPermissions"]));
            if ((this.tableUserGroupsPermissions != null)) {
                this.tableUserGroupsPermissions.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsGroupsPermissions";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsGroupsPermissions.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableUserGroupsPermissions = new UserGroupsPermissionsDataTable();
            this.Tables.Add(this.tableUserGroupsPermissions);
        }
        
        private bool ShouldSerializeUserGroupsPermissions() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void UserGroupsPermissionsRowChangeEventHandler(object sender, UserGroupsPermissionsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserGroupsPermissionsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDescription;
            
            private DataColumn columnParentPermissionID;
            
            private DataColumn columnUserGroupPermissionID;
            
            private DataColumn columnGroupID;
            
            private DataColumn columnPermissionID;
            
            private DataColumn columnAllow;
            
            private DataColumn columnExpr1;
            
            private DataColumn columnShowOrder;
            
            internal UserGroupsPermissionsDataTable() : 
                    base("UserGroupsPermissions") {
                this.InitClass();
            }
            
            internal UserGroupsPermissionsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn ParentPermissionIDColumn {
                get {
                    return this.columnParentPermissionID;
                }
            }
            
            internal DataColumn UserGroupPermissionIDColumn {
                get {
                    return this.columnUserGroupPermissionID;
                }
            }
            
            internal DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            internal DataColumn PermissionIDColumn {
                get {
                    return this.columnPermissionID;
                }
            }
            
            internal DataColumn AllowColumn {
                get {
                    return this.columnAllow;
                }
            }
            
            internal DataColumn Expr1Column {
                get {
                    return this.columnExpr1;
                }
            }
            
            internal DataColumn ShowOrderColumn {
                get {
                    return this.columnShowOrder;
                }
            }
            
            public UserGroupsPermissionsRow this[int index] {
                get {
                    return ((UserGroupsPermissionsRow)(this.Rows[index]));
                }
            }
            
            public event UserGroupsPermissionsRowChangeEventHandler UserGroupsPermissionsRowChanged;
            
            public event UserGroupsPermissionsRowChangeEventHandler UserGroupsPermissionsRowChanging;
            
            public event UserGroupsPermissionsRowChangeEventHandler UserGroupsPermissionsRowDeleted;
            
            public event UserGroupsPermissionsRowChangeEventHandler UserGroupsPermissionsRowDeleting;
            
            public void AddUserGroupsPermissionsRow(UserGroupsPermissionsRow row) {
                this.Rows.Add(row);
            }
            
            public UserGroupsPermissionsRow AddUserGroupsPermissionsRow(string Description, int ParentPermissionID, int GroupID, int PermissionID, bool Allow, int ShowOrder) {
                UserGroupsPermissionsRow rowUserGroupsPermissionsRow = ((UserGroupsPermissionsRow)(this.NewRow()));
                rowUserGroupsPermissionsRow.ItemArray = new object[] {
                        Description,
                        ParentPermissionID,
                        null,
                        GroupID,
                        PermissionID,
                        Allow,
                        null,
                        ShowOrder};
                this.Rows.Add(rowUserGroupsPermissionsRow);
                return rowUserGroupsPermissionsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UserGroupsPermissionsDataTable cln = ((UserGroupsPermissionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UserGroupsPermissionsDataTable();
            }
            
            internal void InitVars() {
                this.columnDescription = this.Columns["Description"];
                this.columnParentPermissionID = this.Columns["ParentPermissionID"];
                this.columnUserGroupPermissionID = this.Columns["UserGroupPermissionID"];
                this.columnGroupID = this.Columns["GroupID"];
                this.columnPermissionID = this.Columns["PermissionID"];
                this.columnAllow = this.Columns["Allow"];
                this.columnExpr1 = this.Columns["Expr1"];
                this.columnShowOrder = this.Columns["ShowOrder"];
            }
            
            private void InitClass() {
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnParentPermissionID = new DataColumn("ParentPermissionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentPermissionID);
                this.columnUserGroupPermissionID = new DataColumn("UserGroupPermissionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserGroupPermissionID);
                this.columnGroupID = new DataColumn("GroupID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupID);
                this.columnPermissionID = new DataColumn("PermissionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPermissionID);
                this.columnAllow = new DataColumn("Allow", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAllow);
                this.columnExpr1 = new DataColumn("Expr1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr1);
                this.columnShowOrder = new DataColumn("ShowOrder", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShowOrder);
                this.columnUserGroupPermissionID.AutoIncrement = true;
                this.columnExpr1.AutoIncrement = true;
            }
            
            public UserGroupsPermissionsRow NewUserGroupsPermissionsRow() {
                return ((UserGroupsPermissionsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UserGroupsPermissionsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UserGroupsPermissionsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserGroupsPermissionsRowChanged != null)) {
                    this.UserGroupsPermissionsRowChanged(this, new UserGroupsPermissionsRowChangeEvent(((UserGroupsPermissionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserGroupsPermissionsRowChanging != null)) {
                    this.UserGroupsPermissionsRowChanging(this, new UserGroupsPermissionsRowChangeEvent(((UserGroupsPermissionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserGroupsPermissionsRowDeleted != null)) {
                    this.UserGroupsPermissionsRowDeleted(this, new UserGroupsPermissionsRowChangeEvent(((UserGroupsPermissionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserGroupsPermissionsRowDeleting != null)) {
                    this.UserGroupsPermissionsRowDeleting(this, new UserGroupsPermissionsRowChangeEvent(((UserGroupsPermissionsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUserGroupsPermissionsRow(UserGroupsPermissionsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserGroupsPermissionsRow : DataRow {
            
            private UserGroupsPermissionsDataTable tableUserGroupsPermissions;
            
            internal UserGroupsPermissionsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserGroupsPermissions = ((UserGroupsPermissionsDataTable)(this.Table));
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableUserGroupsPermissions.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserGroupsPermissions.DescriptionColumn] = value;
                }
            }
            
            public int ParentPermissionID {
                get {
                    try {
                        return ((int)(this[this.tableUserGroupsPermissions.ParentPermissionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserGroupsPermissions.ParentPermissionIDColumn] = value;
                }
            }
            
            public int UserGroupPermissionID {
                get {
                    try {
                        return ((int)(this[this.tableUserGroupsPermissions.UserGroupPermissionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserGroupsPermissions.UserGroupPermissionIDColumn] = value;
                }
            }
            
            public int GroupID {
                get {
                    try {
                        return ((int)(this[this.tableUserGroupsPermissions.GroupIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserGroupsPermissions.GroupIDColumn] = value;
                }
            }
            
            public int PermissionID {
                get {
                    try {
                        return ((int)(this[this.tableUserGroupsPermissions.PermissionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserGroupsPermissions.PermissionIDColumn] = value;
                }
            }
            
            public bool Allow {
                get {
                    try {
                        return ((bool)(this[this.tableUserGroupsPermissions.AllowColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserGroupsPermissions.AllowColumn] = value;
                }
            }
            
            public int Expr1 {
                get {
                    try {
                        return ((int)(this[this.tableUserGroupsPermissions.Expr1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserGroupsPermissions.Expr1Column] = value;
                }
            }
            
            public int ShowOrder {
                get {
                    try {
                        return ((int)(this[this.tableUserGroupsPermissions.ShowOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserGroupsPermissions.ShowOrderColumn] = value;
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableUserGroupsPermissions.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableUserGroupsPermissions.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsParentPermissionIDNull() {
                return this.IsNull(this.tableUserGroupsPermissions.ParentPermissionIDColumn);
            }
            
            public void SetParentPermissionIDNull() {
                this[this.tableUserGroupsPermissions.ParentPermissionIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserGroupPermissionIDNull() {
                return this.IsNull(this.tableUserGroupsPermissions.UserGroupPermissionIDColumn);
            }
            
            public void SetUserGroupPermissionIDNull() {
                this[this.tableUserGroupsPermissions.UserGroupPermissionIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsGroupIDNull() {
                return this.IsNull(this.tableUserGroupsPermissions.GroupIDColumn);
            }
            
            public void SetGroupIDNull() {
                this[this.tableUserGroupsPermissions.GroupIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPermissionIDNull() {
                return this.IsNull(this.tableUserGroupsPermissions.PermissionIDColumn);
            }
            
            public void SetPermissionIDNull() {
                this[this.tableUserGroupsPermissions.PermissionIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsAllowNull() {
                return this.IsNull(this.tableUserGroupsPermissions.AllowColumn);
            }
            
            public void SetAllowNull() {
                this[this.tableUserGroupsPermissions.AllowColumn] = System.Convert.DBNull;
            }
            
            public bool IsExpr1Null() {
                return this.IsNull(this.tableUserGroupsPermissions.Expr1Column);
            }
            
            public void SetExpr1Null() {
                this[this.tableUserGroupsPermissions.Expr1Column] = System.Convert.DBNull;
            }
            
            public bool IsShowOrderNull() {
                return this.IsNull(this.tableUserGroupsPermissions.ShowOrderColumn);
            }
            
            public void SetShowOrderNull() {
                this[this.tableUserGroupsPermissions.ShowOrderColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserGroupsPermissionsRowChangeEvent : EventArgs {
            
            private UserGroupsPermissionsRow eventRow;
            
            private DataRowAction eventAction;
            
            public UserGroupsPermissionsRowChangeEvent(UserGroupsPermissionsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UserGroupsPermissionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
