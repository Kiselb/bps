//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace AuthControl.XSD {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsUserGroups : DataSet {
        
        private UsersGroupsDataTable tableUsersGroups;
        
        public dsUserGroups() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsUserGroups(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UsersGroups"] != null)) {
                    this.Tables.Add(new UsersGroupsDataTable(ds.Tables["UsersGroups"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersGroupsDataTable UsersGroups {
            get {
                return this.tableUsersGroups;
            }
        }
        
        public override DataSet Clone() {
            dsUserGroups cln = ((dsUserGroups)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["UsersGroups"] != null)) {
                this.Tables.Add(new UsersGroupsDataTable(ds.Tables["UsersGroups"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableUsersGroups = ((UsersGroupsDataTable)(this.Tables["UsersGroups"]));
            if ((this.tableUsersGroups != null)) {
                this.tableUsersGroups.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsUserGroups";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsUserGroups.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableUsersGroups = new UsersGroupsDataTable();
            this.Tables.Add(this.tableUsersGroups);
        }
        
        private bool ShouldSerializeUsersGroups() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void UsersGroupsRowChangeEventHandler(object sender, UsersGroupsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersGroupsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnGroupID;
            
            private DataColumn columnGroupName;
            
            private DataColumn columnIsRemoved;
            
            internal UsersGroupsDataTable() : 
                    base("UsersGroups") {
                this.InitClass();
            }
            
            internal UsersGroupsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn GroupIDColumn {
                get {
                    return this.columnGroupID;
                }
            }
            
            internal DataColumn GroupNameColumn {
                get {
                    return this.columnGroupName;
                }
            }
            
            internal DataColumn IsRemovedColumn {
                get {
                    return this.columnIsRemoved;
                }
            }
            
            public UsersGroupsRow this[int index] {
                get {
                    return ((UsersGroupsRow)(this.Rows[index]));
                }
            }
            
            public event UsersGroupsRowChangeEventHandler UsersGroupsRowChanged;
            
            public event UsersGroupsRowChangeEventHandler UsersGroupsRowChanging;
            
            public event UsersGroupsRowChangeEventHandler UsersGroupsRowDeleted;
            
            public event UsersGroupsRowChangeEventHandler UsersGroupsRowDeleting;
            
            public void AddUsersGroupsRow(UsersGroupsRow row) {
                this.Rows.Add(row);
            }
            
            public UsersGroupsRow AddUsersGroupsRow(string GroupName, bool IsRemoved) {
                UsersGroupsRow rowUsersGroupsRow = ((UsersGroupsRow)(this.NewRow()));
                rowUsersGroupsRow.ItemArray = new object[] {
                        null,
                        GroupName,
                        IsRemoved};
                this.Rows.Add(rowUsersGroupsRow);
                return rowUsersGroupsRow;
            }
            
            public UsersGroupsRow FindByGroupID(int GroupID) {
                return ((UsersGroupsRow)(this.Rows.Find(new object[] {
                            GroupID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UsersGroupsDataTable cln = ((UsersGroupsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UsersGroupsDataTable();
            }
            
            internal void InitVars() {
                this.columnGroupID = this.Columns["GroupID"];
                this.columnGroupName = this.Columns["GroupName"];
                this.columnIsRemoved = this.Columns["IsRemoved"];
            }
            
            private void InitClass() {
                this.columnGroupID = new DataColumn("GroupID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupID);
                this.columnGroupName = new DataColumn("GroupName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupName);
                this.columnIsRemoved = new DataColumn("IsRemoved", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsRemoved);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnGroupID}, true));
                this.columnGroupID.AutoIncrement = true;
                this.columnGroupID.AllowDBNull = false;
                this.columnGroupID.Unique = true;
                this.columnGroupName.AllowDBNull = false;
                this.columnIsRemoved.AllowDBNull = false;
            }
            
            public UsersGroupsRow NewUsersGroupsRow() {
                return ((UsersGroupsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UsersGroupsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UsersGroupsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersGroupsRowChanged != null)) {
                    this.UsersGroupsRowChanged(this, new UsersGroupsRowChangeEvent(((UsersGroupsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersGroupsRowChanging != null)) {
                    this.UsersGroupsRowChanging(this, new UsersGroupsRowChangeEvent(((UsersGroupsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersGroupsRowDeleted != null)) {
                    this.UsersGroupsRowDeleted(this, new UsersGroupsRowChangeEvent(((UsersGroupsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersGroupsRowDeleting != null)) {
                    this.UsersGroupsRowDeleting(this, new UsersGroupsRowChangeEvent(((UsersGroupsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUsersGroupsRow(UsersGroupsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersGroupsRow : DataRow {
            
            private UsersGroupsDataTable tableUsersGroups;
            
            internal UsersGroupsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsersGroups = ((UsersGroupsDataTable)(this.Table));
            }
            
            public int GroupID {
                get {
                    return ((int)(this[this.tableUsersGroups.GroupIDColumn]));
                }
                set {
                    this[this.tableUsersGroups.GroupIDColumn] = value;
                }
            }
            
            public string GroupName {
                get {
                    return ((string)(this[this.tableUsersGroups.GroupNameColumn]));
                }
                set {
                    this[this.tableUsersGroups.GroupNameColumn] = value;
                }
            }
            
            public bool IsRemoved {
                get {
                    return ((bool)(this[this.tableUsersGroups.IsRemovedColumn]));
                }
                set {
                    this[this.tableUsersGroups.IsRemovedColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UsersGroupsRowChangeEvent : EventArgs {
            
            private UsersGroupsRow eventRow;
            
            private DataRowAction eventAction;
            
            public UsersGroupsRowChangeEvent(UsersGroupsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UsersGroupsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
